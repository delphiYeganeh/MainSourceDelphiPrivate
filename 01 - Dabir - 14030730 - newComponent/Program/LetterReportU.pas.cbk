unit LetterReportU;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, BaseUnit, Grids, DBGrids, YDbgrid, ExtCtrls, ActnList, DB,
  StdCtrls, ADODB, ExtActns, Buttons,  xpBitBtn, Menus, Mask, DBCtrls , Word2000;

type
  TLetterReport = class(TMBaseForm)
    Panel1: TPanel;
    SelectLetter: TADOStoredProc;
    Action1: TAction;
    Panel2: TPanel;
    Button4: TBitBtn;
    Button3: TBitBtn;
    Button6: TBitBtn;
    MakeRep: TBitBtn;
    Button5: TBitBtn;
    Allsec: TCheckBox;
    Label1: TLabel;
    Number: TLabel;
    Panel3: TPanel;
    YDBGrid1: TYDBGrid;
    SelectLetterLetterID: TAutoIncField;
    SelectLetterIndicatorID: TIntegerField;
    SelectLetterMYear: TWordField;
    SelectLetterSecretariatID: TIntegerField;
    SelectLetterLetter_Type: TIntegerField;
    SelectLetterletterformat: TIntegerField;
    SelectLetterIncommingNO: TWideStringField;
    SelectLetterIncommingdate: TWideStringField;
    SelectLetterCenterNo: TWideStringField;
    SelectLetterCenterDate: TStringField;
    SelectLetterFromOrgID: TIntegerField;
    SelectLetterToOrgID: TIntegerField;
    SelectLetterSignerid: TWideStringField;
    SelectLetterClassificationID: TIntegerField;
    SelectLetterUrgencyID: TIntegerField;
    SelectLetterMemo: TWideStringField;
    SelectLetterAttachTitle: TWideStringField;
    SelectLetterNumberOfAttachPages: TSmallintField;
    SelectLetterNumberOfPage: TWordField;
    SelectLetterReceiveTypeID: TIntegerField;
    SelectLetterUserID: TIntegerField;
    SelectLetterRetroactionNo: TWideStringField;
    SelectLetterRegistrationDate: TStringField;
    SelectLetterRegistrationTime: TStringField;
    SelectLetterFollowLetterNo: TWideStringField;
    SelectLetterToStaffer: TWideStringField;
    SelectLetterSentLetterID: TIntegerField;
    SelectLetterTemplateID: TIntegerField;
    SelectLetterHeaderID: TIntegerField;
    SelectLetterLetterRecommites: TWideStringField;
    SelectLetterPreCode: TWideStringField;
    SelectLetterfromstaffer: TWideStringField;
    SelectLetterFinalized: TBooleanField;
    SelectLetterSendStatusID: TIntegerField;
    SelectLetterLastUpdate: TDateTimeField;
    SelectLetterUserTableID: TIntegerField;
    SelectLetterUniqueID: TLargeintField;
    SelectLetterArchived: TBooleanField;
    SelectLetterSubjectDescription: TWideStringField;
    SelectLetterSubjectID: TIntegerField;
    SelectLetterLatestActionTypeID: TIntegerField;
    SelectLetterLatestActionReason: TWideStringField;
    SelectLetterDeadLineDate: TStringField;
    SelectLetterActionTypeID: TIntegerField;
    SelectLetterUserTableID2: TIntegerField;
    SelectLetterEmailNuFromDate: TWideStringField;
    SelectLetterReciveTitle: TWideStringField;
    SelectLetterClassificatioTitle: TWideStringField;
    SelectLetterUrgencyTitle: TWideStringField;
    SelectLetterUserTitle: TWideStringField;
    SelectLetterFormatTitle: TWideStringField;
    SelectLetterToOrgTitle: TWideStringField;
    SelectLetterTemplateTitle: TWideStringField;
    SelectLetterFromTitle: TWideStringField;
    SelectLetterLetterTypeTitle: TWideStringField;
    SelectLetterAnswerMYear: TWordField;
    SelectLetterAnswerIndicatorID: TIntegerField;
    SelectLetterUserMemo: TWideStringField;
    SelectLetterOldSecretariatID: TIntegerField;
    SelectLetterCustomerID: TIntegerField;
    SelectLetterInnerNO: TStringField;
    SelectLetterHas_File: TBooleanField;
    SelectLetterHas_Page: TBooleanField;
    SelectLetterHas_WordPage: TBooleanField;
    DBEdit1: TDBEdit;
    SelectLetterATF: TStringField;
    SelectLetterPEY: TStringField;
    BitBtn1: TBitBtn;
    BitBtn2: TBitBtn;
    procedure MakeRepClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Action1Execute(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure YDBGrid1NeedImageIndex(Column: TColumn;
      var ImageIndex: Integer);
    procedure YDBGrid1DblClick(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  LetterReport: TLetterReport;

implementation

uses Dmu, LetterFilterU, UMain,BusinessLayer;

{$R *.dfm}

procedure TLetterReport.MakeRepClick(Sender: TObject);
var
   w:string;
   I : integer;
begin
   inherited;
   if Allsec.Checked then
      w:=''
   else
      w:='(l.SecretariatID='+IntToStr(Dm.SecId)+')';

   if LetterFilter.Where<>'' then
      if w<>'' then
         w:=w+' and '+LetterFilter.Where
      else
         w:=LetterFilter.Where ;

   //Ranjbar
   if Trim(LetterFilter.EdtIncommingNO.Text)<>'' then
      W := W + ' And l.IncommingNO like ''%'+ LetterFilter.EdtIncommingNO.Text + '%''';

   //⁄ÿ›
   if Trim(LetterFilter.EdtRetroactionNo.Text)<>'' then
      W := W + ' And l.RetroactionNo like ''%'+ LetterFilter.EdtRetroactionNo.Text + '%''';
   //ÅÌ—Ê
   if Trim(LetterFilter.EdtFollowLetterNo.Text)<>'' then
      W := W + ' And l.FollowLetterNo like ''%'+ LetterFilter.EdtFollowLetterNo.Text + '%''';
   //----

   {Ranjbar 89.10.05 ID=232}
   For I:=0 to YDBGrid1.Columns.Count-1 do
      if UpperCase(YDBGrid1.Columns[I].FieldName) = UpperCase('UserMemo') then
      begin
         YDBGrid1.Columns[I].Title.Caption := GetSystemSetting('UserMemoDisplay');
         Break;
      end;
   //---

   With SelectLetter do
   begin
      Close;
      Parameters.ParamByName('@where').Value:= w ;
      Open;
      Number.Caption:='  ⁄œ«œ : '+IntToStr(RecordCount);
   end;
end;

procedure TLetterReport.FormShow(Sender: TObject);
begin
   inherited;
   LetterFilter := TLetterFilter.Create(self);
   LetterFilter.DateFieldName := ' L.Incommingdate ';
   LetterFilter.ShowInPanel(Panel1);
end;

procedure TLetterReport.Button4Click(Sender: TObject);
begin
  inherited;
  YDBGrid1.ExportToExcel;
end;

procedure TLetterReport.Button3Click(Sender: TObject);
begin
  inherited;
 YDBGrid1.ExportToWord;
end;

procedure TLetterReport.Button6Click(Sender: TObject);
begin
  inherited;
 YDBGrid1.CustomizePrint;
end;

procedure TLetterReport.Action1Execute(Sender: TObject);
begin
  inherited;
 MakeRepClick(MakeRep);

end;

procedure TLetterReport.Button5Click(Sender: TObject);
begin
  inherited;
close;
end;

procedure TLetterReport.YDBGrid1NeedImageIndex(Column: TColumn;
  var ImageIndex: Integer);
begin
  inherited;
  // Amin 1391/12/01 Start
   if UpperCase(Column.FieldName) = 'HAS_PAGE' then
      if SelectLetterhas_Page.AsBoolean then
         ImageIndex := 3
      else
         ImageIndex := 0;

   if UpperCase(Column.FieldName) = 'HAS_WORDPAGE' then
      if SelectLetterhas_WordPage.AsBoolean then
         ImageIndex := 2
      else
         ImageIndex := 0;

   if Uppercase(Column.FieldName) = 'HAS_FILE' then
      if SelectLetterhas_file.AsBoolean then
         ImageIndex := 1
      else
         ImageIndex := 0;
   // Amin 1391/12/01 End
end;

procedure TLetterReport.YDBGrid1DblClick(Sender: TObject);
begin
  inherited;       
   // Amin 1391/12/01 Start
    Case SelectLetterLetter_Type.AsInteger of
         1: MainForm.ViewReceivedLetter(SelectLetterLetterID.AsInteger);
         2: MainForm.ViewSentLetter(SelectLetterLetterID.AsInteger);
         3: MainForm.ViewInnerLetter(SelectLetterLetterID.AsInteger);
         4: MainForm.ViewDocument(SelectLetterLetterID.AsInteger);
      end;
   // Amin 1391/12/01 End
end;

procedure TLetterReport.BitBtn1Click(Sender: TObject);
//begin
//  inherited;
//procedure TYDBGrid.ExportToWord(fileName:string='');
var
   fileName:string;
   HNDL:THandle;
   HLine, Line:string;
   i: byte;
   L,m: Integer;
   WordApplication:TWordApplication;
   WordDocument:TWordDocument;
   Template,f1,f2,f3,f4,f5,f6, ItemIndex,fals,tru:OleVariant;
   Old_GroupField_Value:string;
   PageBreak,Story,f:OleVariant;
   {Ranjbar 89.08.01 ID=152}
   Data : String;
   DataSetRecorIndicator : integer;  // Amin 1391/10/13
   //---
begin

   if YDBGrid1.VisibleColumnCount>15 then
   begin
      ShowMessage('«—”«· ÃœÊ·Ì »« »Ì‘ «“ 15 ” Ê‰ «„ò«‰ Å–Ì— ‰Ì” ');
      exit;
   end;

   WordApplication:=TWordApplication.Create(self);
   WordDocument:=TWordDocument.Create(self);
   WordApplication.Visible :=true;
     WordApplication.Caption :='REP';
     HNDL :=FindWindow('OpusApp',pansichar('REP'));
     SetForegroundWindow(HNDL);

   PageBreak:=wdPageBreak;

//   if GroupByField<>'' then
//      TAdoDataSet(self.DataSource.DataSet).Sort:=GroupByField ;

   with WordApplication,Selection do
   begin
      fals:=false;
      tru:=true;
      ItemIndex := 1;
      Template := EmptyParam;
      Documents.Add(Template, fals,Template,Template);

      WordDocument.ConnectTo(WordApplication.Documents.Item(itemindex));
      with WordDocument do
         //if FOriention=poLandscape then
         //   PageSetup.Orientation:=wdOrientLandscape
         //else
            PageSetup.Orientation:=wdOrientPortrait;
      Selection.RtlPara;
   end;


   with DSForm,SelectLetter do
      if Active then
      begin
         //if FHasindex then
            HLine:='—œÌ›'+ListSeparator;
         //else
         //   HLine:='';
         m:=0;
         L := 0;
         for i:= 0 to Columns.Count-1 do
            if Columns[i].Visible then
            begin
               HLine:=HLine+Columns[i].Title.Caption+ListSeparator;
               inc(m)
            end;
            HLine[length(Hline)]:=#13;
            WordApplication.Selection.TypeText(HLine);
            inc(l);
            First;
            // Amin 1391/10/13 while not eof do

            for DataSetRecorIndicator:= 1 to RecordCount do // Amin 1391/10/13
            begin
               if FHasindex then
                  line:=IntToStr(l)+ListSeparator
               else
                  line:='';
               for i:= 0 to Columns.Count-1 do
                  if Columns[i].Visible then
                  begin
                     {Ranjbar 89.08.01 ID=152}
                     //Line:=Line+Replace(Replace(CorrectFarsi(Columns[i].Field.AsString),#13,' '),#10,' ')+ListSeparator;

                     if (NOT Columns[i].Field.IsBlob) AND (NOT Columns[i].Field.IsNull) then
                        Data := Trim(Columns[i].Field.AsString)
                        ELSE
                        Data := '';

                     if UpperCase(Data) = 'FALSE' then
                        Data := ''
                     else
                        if UpperCase(Data) = 'TRUE' then
                           Data := 'X';
                     Line:=Line+Replace(Replace((Data),#13,' '),#10,' ')+ListSeparator;
//    have bug                 Line:=Line+Replace(Replace(CorrectFarsi(Data),#13,' '),#10,' ')+ListSeparator;
                     //---
                  end;

               line[length(line)]:=#13;
               Inc(L);
               WordApplication.Selection.TypeText(line);
               next;
               if  FGroupByField<>'' then
               if  Old_GroupField_Value<>FieldByName(FGroupByField).AsString then
               begin
                   if Old_GroupField_Value<>'' then
                     WordApplication.Selection.TypeParagraph;
                   Old_GroupField_Value:=FieldByName(FGroupByField).AsString
               end;

            end;{while}

               line:='';
          if FooterFields<>'' then
            begin
              for i:= 0 to Columns.Count-1 do
               if Columns[i].Visible then
                if pos(UpperCase( Columns[i].FieldName),UpperCase(FFooterFields))<>0 then
                 Line:=Line+GetSum(Columns[i].FieldName)+ListSeparator
                else
                 line :=line+ListSeparator;
                 line[length(line)]:=#13;
                 Inc(L);
                 WordApplication.Selection.TypeText(line);
           end;

     if m>15 then exit;

       WordApplication.Selection.WholeStory;
       f1:=wdSeparateByCommas;  f2:=wdAutoFitFixed;
       f5:=100;    f6:=16;
       f3:=l-1;
       if FHasindex then
        f4:=m+1
       else
        f4:=m;
       WordApplication.Selection.ConvertToTable(f1,f3,f4,f5,f6,tru,tru,tru,tru,tru,tru,tru,tru,tru,f2,tru);


      with WordApplication,Selection,Tables.Item(1) do
       begin
        Select;
        AutoFitBehavior(wdAutoFitContent);
        AutoFitBehavior (wdAutoFitContent);
        AutoFitBehavior (wdAutoFitWindow);
        AutoFitBehavior (wdAutoFitWindow);
        f3:=wdStory;
        HomeKey(f3,tru);
        SelectRow;
        Selection.Shading.Texture := wdTextureNone ;
        Selection.Shading.ForegroundPatternColor := wdColorAutomatic;
        Selection.Shading.BackgroundPatternColor := wdColorGray30;
        Selection.Font.Bold := wdToggle;
        Selection.Font.BoldBi := wdToggle;
        Selection.Rows.HeadingFormat := wdToggle;
     end;
     end;{with dataset}


    with WordApplication.Selection do
     begin
        f3:=wdStory;
        HomeKey(f3,tru);
        SplitTable;
         ParagraphFormat.Alignment := wdAlignParagraphCenter;
         Font.Bold := wdToggle;
         Font.BoldBi := wdToggle;
        TypeText(GetPrintTitle);
        WordDocument.ActiveWindow.ActivePane.View.SeekView := wdSeekCurrentPageHeader;
        WholeStory;
        ParagraphFormat.Alignment:=wdAlignParagraphLeft;
        TypeText(' «—ÌŒ  ÂÌÂ ê“«—‘ '+CheckFarsiDate(ShamsiString(now)));
        WordDocument.ActiveWindow.ActivePane.View.SeekView := wdSeekMainDocument;
      end;
    if fileName<>'' then
     begin
        f:=fileName;
      WordDocument.SaveAs(f);
      WordDocument.Close;
      WordApplication.Disconnect;
      WordApplication.Visible:=false;
     end;


end;

end.

