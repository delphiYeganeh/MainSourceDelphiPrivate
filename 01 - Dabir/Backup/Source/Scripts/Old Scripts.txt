--Yeganeh123

[LastNum]=1


--Dabir Scripts
-------------------------------------------------------------------------- 
/*  ﬂÌ  Å—ÊéÂ
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[added]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[added]
GO

CREATE TABLE [dbo].[added] (
	[number] [int] NOT NULL ,
	[Title] [nvarchar] (100)  NOT NULL 
) ON [PRIMARY]
GO

update tables
set Description=' Å—ÊéÂ Â« '
where tableid=2

go
delete Fields where tableid=2
insert into fields(FieldName,TableID,Description,IsWhere,ISString,IsLike,EveryLike,VisibleInGrid)
values('Number',2,'òœ Å—ÊéÂ ',1,1,1,0,1)

insert into fields(FieldName,TableID,Description,IsWhere,ISString,IsLike,EveryLike,VisibleInGrid)
values('Title',2,'⁄‰Ê«‰ Å—ÊéÂ',1,1,1,1,1)
go
UPDATE    Settings
SET           [Value] = N'number'
WHERE     (UserID = - 1) AND (VariableId = 26)
go
UPDATE    Settings
SET           [Value] = N'Title'
WHERE     (UserID = - 1) AND (VariableId = 25)
*/
---------------------------------------------------------------------------------------------------------------------------------------------------------------

[Num]=1
-----------

---------------------------------------------------------------------  Tables  ------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[UserSign]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[UserSign] (
	[UserID] [int] NOT NULL ,
	[UserSign] [image] NOT NULL 
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[UserSign] WITH NOCHECK ADD 
	CONSTRAINT [PK_UserSign] PRIMARY KEY  CLUSTERED 
	(
		[UserID]
	)  ON [PRIMARY] 
end

GO
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Extention]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin
CREATE TABLE [dbo].[Extention] (
	[ExtentionID] [int] IDENTITY (1, 1) NOT NULL ,
	[ExtentionTitle] [nvarchar] (200)  NOT NULL ,
	[Extention] [varchar] (5)  NOT NULL ,
	[IsSystem] [bit] NOT NULL
) ON [PRIMARY]


ALTER TABLE [dbo].[Extention] WITH NOCHECK ADD
	CONSTRAINT [PK_Extention] PRIMARY KEY  CLUSTERED
	(
		[ExtentionID]
	)  ON [PRIMARY]


ALTER TABLE [dbo].[Extention] ADD
	CONSTRAINT [DF__Extention__IsSys__3E88198C] DEFAULT (0) FOR [IsSystem]
end
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LetterFieldValue]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[LetterFieldValue] (
	[LetterFieldValueID] [int] IDENTITY (1, 1) NOT NULL ,
	[LetterID] [int] NOT NULL ,
	[FieldID] [int] NOT NULL ,
	[FieldValue] [nvarchar] (2000)  NULL ,
	[uniqueID] [bigint] NULL ,
	[LastUpdate] [datetime] NULL ,
	[InsertUserID] [int] NOT NULL
) ON [PRIMARY]
ALTER TABLE [dbo].[LetterFieldValue] ADD
	CONSTRAINT [DF__LetterFie__LastU__0020D2BF] DEFAULT (getdate()) FOR [LastUpdate],
	CONSTRAINT [DF__LetterFie__Inser__7AF2094E] DEFAULT (0) FOR [InsertUserID]

ALTER TABLE [dbo].[LetterFieldValue] WITH NOCHECK ADD
	CONSTRAINT [PK_LetterFieldValue] PRIMARY KEY  CLUSTERED
	(
		[LetterFieldValueID]
	)  ON [PRIMARY]

end


Go
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ParaphTemplate]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[ParaphTemplate] (
	[ParaphTemplateID] [int] IDENTITY (1, 1) NOT NULL ,
	[UserID] [int] NOT NULL ,
	[OrderID] [tinyint] NOT NULL ,
	[Title] [nvarchar] (50)  NOT NULL ,
	[Paraph] [nvarchar] (500)  NOT NULL
) ON [PRIMARY]


ALTER TABLE [dbo].[ParaphTemplate] WITH NOCHECK ADD
	CONSTRAINT [PK_ParaphTemplate] PRIMARY KEY  CLUSTERED
	(
		[ParaphTemplateID]
	)  ON [PRIMARY]
end
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[added]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
CREATE TABLE [dbo].[added](
	[number] [int] NOT NULL,
	[Title] [nvarchar](100) NOT NULL) ON [PRIMARY]
go
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LetterRelation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[LetterRelation] (
	[LetterRelationID] [int] IDENTITY (1, 1) NOT NULL ,
	[MainLetterID] [int] NOT NULL ,
	[SubLetterID] [int] NOT NULL ,
	[Ord] [tinyint] NOT NULL
) ON [PRIMARY]

ALTER TABLE [dbo].[LetterRelation] WITH NOCHECK ADD
	CONSTRAINT [PK_LetterRelation] PRIMARY KEY  CLUSTERED
	(
		[LetterRelationID]
	)  ON [PRIMARY]

ALTER TABLE [dbo].[LetterRelation] ADD
	CONSTRAINT [DF_LetterRelation_Ord] DEFAULT (1) FOR [Ord]
end
GO
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ArchiveCenter]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[ArchiveCenter] (
	[ArchiveCenterID] [int] NOT NULL ,
	[ArchiveCenterTitle] [nvarchar] (50)  NOT NULL
) ON [PRIMARY]
ALTER TABLE [dbo].[ArchiveCenter] WITH NOCHECK ADD
	CONSTRAINT [PK_ArchiveCenter] PRIMARY KEY  CLUSTERED
	(
		[ArchiveCenterID]
	)  ON [PRIMARY]
insert into ArchiveCenter values(0,'„‘ —ò »Ì‰ Â„Â œ»Ì—Œ«‰Â Â«')

end
GO

if  exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FollowUp]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
if (select count(*) from followup)<=5
  drop table [FollowUp]

GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FollowUp]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin

CREATE TABLE [dbo].[FollowUp](
	[FollowUPID] [int] IDENTITY(1,1) NOT NULL,
	[StartFollowUpID] [int] NULL,
	[FollowUPTypeID] [int] NOT NULL,
	[DoneStatusID] [tinyint] NOT NULL CONSTRAINT [DF_FollowUp_DoneStatusID]  DEFAULT (1),
	[UserID] [int] NOT NULL,
	[Comment] [nvarchar](255) NULL,
	[ToDoDate] [char](10) NULL,
	[ToDoTime] [char](5) NULL,
	[DoneComment] [nvarchar](255) NULL,
	[HasAlarm] [bit] NULL,
	[Letterid] [int] NULL CONSTRAINT [DF_FollowUp_Letterid]  DEFAULT (0)
) ON [PRIMARY]

ALTER TABLE [dbo].[FollowUp] WITH NOCHECK ADD
	CONSTRAINT [PK_FollowUp] PRIMARY KEY  CLUSTERED
	(
		[FollowUPID]
	)  ON [PRIMARY]

end

GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ActionType]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[ActionType] (
	[ActionTypeID] [tinyint] NOT NULL ,
	[ActionTypeTitle] [nvarchar] (50)  NULL
) ON [PRIMARY]

ALTER TABLE [dbo].[ActionType] WITH NOCHECK ADD
	CONSTRAINT [PK_ActionType] PRIMARY KEY  CLUSTERED
	(
		[ActionTypeID]
	)  ON [PRIMARY]
end
GO


if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DoneStatus]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[DoneStatus] (
	[DoneStatusID] [tinyint] NOT NULL ,
	[DoneStatustitle] [nvarchar] (50)  NOT NULL
) ON [PRIMARY]

ALTER TABLE [dbo].[DoneStatus] WITH NOCHECK ADD
	CONSTRAINT [PK_DoneStatus] PRIMARY KEY  CLUSTERED
	(
		[DoneStatusID]
	)  ON [PRIMARY]
end
GO


if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FollowUpType]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[FollowUpType] (
	[FollowUpTypeID] [int] IDENTITY (1, 1) NOT NULL ,
	[FollowUpTypeTitle] [nvarchar] (50)  NOT NULL
) ON [PRIMARY]
ALTER TABLE [dbo].[FollowUpType] WITH NOCHECK ADD
	CONSTRAINT [PK_FollowUpType] PRIMARY KEY  CLUSTERED
	(
		[FollowUpTypeID]
	)  ON [PRIMARY]
end
GO

GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LifeTips]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[LifeTips] (
	[id] [int]  NOT NULL ,
	[title] [nvarchar] (150)  NULL
) ON [PRIMARY]
ALTER TABLE [dbo].[LifeTips] WITH NOCHECK ADD
	CONSTRAINT [PK_LifeTips] PRIMARY KEY  CLUSTERED
	(
		[id]
	)  ON [PRIMARY]
end
GO
if not exists (select * from dbo.sysobjects where id = object_id(N'dbo.UserExtention') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin

CREATE TABLE dbo.UserExtention (
	UserExtentionID int IDENTITY (1, 1) NOT NULL ,
	UserId int NOT NULL ,
	ExtentionID int NOT NULL ,
	ReaderApplication nvarchar (2000)  NULL
)

ALTER TABLE dbo.UserExtention WITH NOCHECK ADD
	CONSTRAINT PK_UserExtention  PRIMARY KEY  CLUSTERED
	(
		UserExtentionID
	)
 CREATE  UNIQUE  INDEX User_extention_idx ON dbo.UserExtention(UserId, ExtentionID)


end
GO


if not exists (select * from dbo.sysobjects where id = object_id(N'dbo.LetterArchiveFolder') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin

CREATE TABLE dbo.LetterArchiveFolder (
	LetterArchiveID int IDENTITY (1, 1) NOT NULL ,
	ArchiveFolderID int NOT NULL ,
	LetterID int NOT NULL ,
	ArchiveDate char (10)  NOT NULL ,
	Page int NULL ,
	ArchiveNotes nvarchar (50)  NULL,
	UserID int NOT NULL  DEFAULT 0

)
ALTER TABLE dbo.LetterArchiveFolder WITH NOCHECK ADD
	CONSTRAINT PK_LetterArchiveFolder PRIMARY KEY  CLUSTERED
	(
		LetterArchiveID
	)



end
GO



if not exists (select * from dbo.sysobjects where id = object_id(N'dbo.ListItems') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin
CREATE TABLE dbo.ListItems (
	ListItemsID int IDENTITY (1, 1) NOT NULL ,
	ListID tinyint NOT NULL ,
	KeyValue int NOT NULL ,
	Title nvarchar (50)  NULL ,
	Notes nvarchar (255)  NULL
)
ALTER TABLE dbo.ListItems WITH NOCHECK ADD
	CONSTRAINT PK_List PRIMARY KEY  CLUSTERED
	(
		ListItemsID
	)



 end
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RelatedSecretariats]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
  if not exists (select * from RelatedSecretariats)
    drop table RelatedSecretariats
GO
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RelatedSecretariats]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[RelatedSecretariats] (
	[RelatedSecretariatID] [int] IDENTITY (1, 1) NOT NULL ,
	[RelatedSecretariatTitle] [nvarchar] (50)  NOT NULL ,
	[DestinationOrgID_inSource] [int] NOT NULL ,
	[DestinationSecID] [int] NOT NULL ,
	[DestinationServerIP] [varchar] (30)  NULL ,
	[DestinationServerDB] [varchar] (50)  NULL
) ON [PRIMARY]

ALTER TABLE [dbo].[RelatedSecretariats] WITH NOCHECK ADD
	CONSTRAINT [PK_RelatedSecretarats] PRIMARY KEY  CLUSTERED
	(
		[RelatedSecretariatID]
	)  ON [PRIMARY]
end
GO



if not exists (select * from dbo.sysobjects where id = object_id(N'dbo.SendStatus') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin
CREATE TABLE dbo.SendStatus (
	SendStatusID tinyint NOT NULL ,
	SendStatusTitle nvarchar (100)  NOT NULL
)

ALTER TABLE dbo.SendStatus WITH NOCHECK ADD
	CONSTRAINT PK_SendStatus PRIMARY KEY  CLUSTERED
	(
		SendStatusID
	)


end
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'dbo.TemplateGroup') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin

CREATE TABLE dbo.TemplateGroup (
	TemplateGroupID int IDENTITY (1, 1) NOT NULL ,
	TemplateGroupTitle nvarchar (100)  NOT NULL
)
ALTER TABLE dbo.TemplateGroup WITH NOCHECK ADD
	CONSTRAINT PK_TemplateGroup PRIMARY KEY  CLUSTERED
	(
		TemplateGroupID
	)


 end
GO
if not exists (select * from dbo.sysobjects where id = object_id(N'dbo.UserLog') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin
CREATE TABLE dbo.UserLog (
	UserID tinyint NOT NULL ,
	FormID tinyint NOT NULL ,
	ActionID int NOT NULL ,
	Time1 datetime NOT NULL DEFAULT (getdate()),
	LetterID int NULL
)

end
GO


if not exists (select * from dbo.sysobjects where id = object_id(N'dbo.UserLoginLogout') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin
CREATE TABLE dbo.UserLoginLogout (
	UserLoginLogoutID int IDENTITY (1, 1) NOT NULL ,
	UserID int NOT NULL ,
	IPAddress char (15)  NULL ,
	LoginTime datetime NOT NULL DEFAULT (getdate()),
	LogoutTime datetime NOT NULL DEFAULT (getdate()),
	isSafeLogout bit NOT NULL DEFAULT 0
) ON [PRIMARY]
ALTER TABLE dbo.UserLoginLogout WITH NOCHECK ADD
	CONSTRAINT PK_UserLoginLogout PRIMARY KEY  CLUSTERED
	(
		UserLoginLogoutID
	)

end
GO


if not exists (select * from dbo.sysobjects where id = object_id(N'dbo.UserNote') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin CREATE TABLE dbo.UserNote (
	UserNoteID int IDENTITY (1, 1) NOT NULL ,
	UserID int NOT NULL ,
	Note ntext  NULL ,
	CreateDate char (10)  NOT NULL
)

ALTER TABLE dbo.UserNote WITH NOCHECK ADD
	CONSTRAINT PK_UserNote PRIMARY KEY  CLUSTERED
	(
		UserNoteID
	)


end
GO



if not exists (select * from dbo.sysobjects where id = object_id(N'dbo.UserShortCut') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin
CREATE TABLE dbo.UserShortCut (
	userShortCutID int IDENTITY (1, 1) NOT NULL ,
	UserID int NOT NULL ,
	keyText nvarchar (100)  NOT NULL ,
	altKey char (1)  NOT NULL
)
ALTER TABLE dbo.UserShortCut WITH NOCHECK ADD
	CONSTRAINT PK_UserShortCut PRIMARY KEY  NONCLUSTERED
	(
		userShortCutID
	)



 CREATE  CLUSTERED  INDEX userShortCut_user_idx ON dbo.UserShortCut(UserID)

 CREATE  INDEX userShortCut_keytext_idx ON dbo.UserShortCut(keyText)


end
GO


if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserShortCut' and c.name='altKey')
begin

 if  exists (select * from sysobjects  where  name='UserShortCut' )
 drop tabLE [UserShortCut]


 CREATE TABLE [dbo].[UserShortCut] (
	[userShortCutID] [int] IDENTITY (1, 1) NOT NULL ,
	[UserID] [int] NOT NULL ,
	[keyText] [nvarchar] (100)  NOT NULL ,
	[altKey] [char] (1)  NOT NULL
 ) ON [PRIMARY]

 CREATE  CLUSTERED  INDEX [userShortCut_user_idx] ON [dbo].[UserShortCut]([UserID]) ON [PRIMARY]
 CREATE  INDEX [userShortCut_keytext_idx] ON [dbo].[UserShortCut]([keyText]) ON [PRIMARY]

 ALTER TABLE [dbo].[UserShortCut] WITH NOCHECK ADD
	CONSTRAINT [PK_UserShortCut] PRIMARY KEY  NONCLUSTERED
	(
		[userShortCutID]
	)  ON [PRIMARY]
end
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'dbo.UserTemplateGroup') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin
CREATE TABLE dbo.UserTemplateGroup (
	UserTemplateGroupID int IDENTITY (1, 1) NOT NULL ,
	TemplateGroupID int NOT NULL ,
	UserID int NOT NULL
)
ALTER TABLE dbo.UserTemplateGroup WITH NOCHECK ADD
	CONSTRAINT PK_UserTemplateGroup PRIMARY KEY  CLUSTERED
	(
		UserTemplateGroupID
	)



 end
GO





if not exists (select * from dbo.sysobjects where id = object_id(N'dbo.sys_AppMessage') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
 begin 
CREATE TABLE dbo.sys_AppMessage (
	ID int NOT NULL ,
	FarsiMessage nvarchar (255)  NULL 
)
ALTER TABLE dbo.sys_AppMessage WITH NOCHECK ADD 
	CONSTRAINT PK_sys_AppMessage PRIMARY KEY  CLUSTERED 
	(
		ID
	) 


end
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FieldType]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[FieldType] (
	[FieldTypeID] [tinyint] NOT NULL ,
	[FieldTypeTitle] [nvarchar] (50)  NOT NULL 
) ON [PRIMARY]

ALTER TABLE [dbo].[FieldType] WITH NOCHECK ADD 
	CONSTRAINT [PK_FieldType] PRIMARY KEY  CLUSTERED 
	(
		[FieldTypeID]
	)  ON [PRIMARY]
 end

GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ReferenceTableData]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin

CREATE TABLE [dbo].[ReferenceTableData] (
	[ReferenceTableDataID] [int] IDENTITY (1, 1) NOT NULL ,
	[TableID] [int] NOT NULL ,
	[DataID] [tinyint] NOT NULL ,
	[DataTitle] [nvarchar] (50)  NOT NULL 
) ON [PRIMARY]



ALTER TABLE [dbo].[ReferenceTableData] WITH NOCHECK ADD 
	CONSTRAINT [PK_ReferenceTableData] PRIMARY KEY  CLUSTERED
	(
		[ReferenceTableDataID]
	)  ON [PRIMARY] 

end
GO

if  exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Server]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table server
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Subject]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[Subject] (
	[SubjectID] [int] IDENTITY (1, 1) NOT NULL ,
	[SubjectTitle] [nvarchar] (50)  NOT NULL ,
	[IsActive] [bit] NOT NULL default 1
) ON [PRIMARY]

ALTER TABLE [dbo].[Subject] WITH NOCHECK ADD 
	CONSTRAINT [PK_Subject] PRIMARY KEY  CLUSTERED 
	(
		[SubjectID]
	)  ON [PRIMARY]
end
Go
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[UserMessage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin

CREATE TABLE [dbo].[UserMessage] (
	[UserMessageID] [bigint] IDENTITY (1, 1) NOT NULL ,
	[To_] [int] NOT NULL ,
	[Code] [int]  NULL ,
	[From_] [int] NULL ,
	[MsgDate] [varchar] (10)  NULL ,
	[MsgTime] [varchar] (6)  NULL ,
	[Subject] [nvarchar] (50)  NULL ,
	[Message] [ntext]  NULL ,
	[Status] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]


ALTER TABLE [dbo].[UserMessage] WITH NOCHECK ADD
	CONSTRAINT [PK_UserMessage] PRIMARY KEY  CLUSTERED
	(
		[UserMessageID]
	)  ON [PRIMARY]
 CREATE  INDEX [UserMessage_To_status_idx] ON [dbo].[UserMessage]([To_], [Status]) ON [PRIMARY]
end
Go

if NOT exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AccessType]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin

CREATE TABLE [dbo].[AccessType] (
	[AccessTypeID] [tinyint] NOT NULL ,
	[AccessTypeTitle] [nvarchar] (50)  NOT NULL
) ON [PRIMARY]
ALTER TABLE [dbo].[AccessType] WITH NOCHECK ADD
	CONSTRAINT [PK_AccessType] PRIMARY KEY  CLUSTERED
	(
		[AccessTypeID]
	)  ON [PRIMARY]
INSERT INTO AccessType (AccessTypeID ,AccessTypeTitle)VALUES (1,'⁄œ„ ”ÿÕ œ” —”Ì')
INSERT INTO AccessType (AccessTypeID ,AccessTypeTitle)VALUES (2,'‰„«Ì‘')
INSERT INTO AccessType (AccessTypeID ,AccessTypeTitle)VALUES (3,'œ—Ã')
INSERT INTO AccessType (AccessTypeID ,AccessTypeTitle)VALUES (4,'œ—Ã Ê ÊÌ—«Ì‘')        
end
GO



if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FieldAccess]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
CREATE TABLE [dbo].[FieldAccess] (
	[FieldAccessID] [int] IDENTITY (1, 1) NOT NULL ,
	[FieldID] [int] NOT NULL ,
	[UserID] [int] NOT NULL ,
	[AccessTypeID] [tinyint] NOT NULL
) ON [PRIMARY]

ALTER TABLE [dbo].[FieldAccess] WITH NOCHECK ADD
	CONSTRAINT [PK_FieldAccess] PRIMARY KEY  CLUSTERED
	(
		[FieldAccessID]
	)  ON [PRIMARY]

end
GO
-----------------------------------------------------------------------  Fields  ------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ArchiveFolder' and c.name='Title')
alter TABLE ArchiveFolder add Title  nvarchar(100) NULL
else
alter TABLE ArchiveFolder alter column Title  nvarchar(100) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ArchiveFolder' and c.name='Notes')
alter TABLE ArchiveFolder add Notes  nvarchar(500) NULL
else
alter TABLE ArchiveFolder alter column Notes  nvarchar(500) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ArchiveFolder' and c.name='Place')
alter TABLE ArchiveFolder add Place  nvarchar(100) NULL
else
alter TABLE ArchiveFolder alter column Place  nvarchar(100) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Classifications' and c.name='Title')
alter TABLE Classifications add Title  nvarchar(50) NULL
else 
alter TABLE Classifications alter column Title  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='ErrorMessage' and c.name='ErrorMessage')
alter TABLE ErrorMessage add ErrorMessage  nvarchar(255) NULL                                                                     
else 
alter TABLE ErrorMessage alter column ErrorMessage  nvarchar(255) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='ErrorMessage' and c.name='ErrorDate')
alter TABLE ErrorMessage add ErrorDate  nvarchar(10) NULL                                                                            
else 
alter TABLE ErrorMessage alter column ErrorDate  nvarchar(10) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='ErrorMessage' and c.name='UserCode')
alter TABLE ErrorMessage add UserCode  int NULL                                                                                       
else 
alter TABLE ErrorMessage alter column UserCode  int NULL
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='ErrorMessage' and c.name='FarsiMessage')
alter TABLE ErrorMessage add FarsiMessage  nvarchar(255) NULL                                                                     
else 
alter TABLE ErrorMessage alter column FarsiMessage  nvarchar(255) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='ErrorMessage' and c.name='ShowMessage')
alter TABLE ErrorMessage add ShowMessage  bit NULL                                                                                 
else 
alter TABLE ErrorMessage alter column ShowMessage  bit NULL  
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Extention' and c.name='ExtentionTitle')
alter TABLE Extention add ExtentionTitle  nvarchar(200) Not Null default 0                                                         
else 
alter TABLE Extention alter column ExtentionTitle  nvarchar(200) Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Extention' and c.name='Extention')
alter TABLE Extention add Extention  varchar(5) Not Null default 0                                                                      
else
alter TABLE Extention alter column Extention  varchar(5) Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Extention' and c.name='IsSystem')
alter TABLE Extention add IsSystem  bit Not Null default 0                                                                               
else 
alter TABLE Extention alter column IsSystem  bit Not Null 
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Fields' and c.name='FieldName')
alter TABLE Fields add FieldName  varchar(50) Not Null default 0
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Fields' and c.name='TableID')
alter TABLE Fields add TableID  int Not Null default 0
else
alter TABLE Fields alter column TableID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Fields' and c.name='Description')
alter TABLE Fields add Description  nvarchar(50) NULL
else
alter TABLE Fields alter column Description  nvarchar(50) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Fields' and c.name='IsWhere')
alter TABLE Fields add IsWhere  bit Not Null default 0
else
alter TABLE Fields alter column IsWhere  bit Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Fields' and c.name='ISString')
alter TABLE Fields add ISString  bit Not Null default 0
else
alter TABLE Fields alter column ISString  bit Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Fields' and c.name='IsLike')
alter TABLE Fields add IsLike  bit Not Null default 0
else
alter TABLE Fields alter column IsLike  bit Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Fields' and c.name='EveryLike')
alter TABLE Fields add EveryLike  bit Not Null default 0
else
alter TABLE Fields alter column EveryLike  bit Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Fields' and c.name='VisibleInGrid')
alter TABLE Fields add VisibleInGrid  bit Not Null default 0
else
alter TABLE Fields alter column VisibleInGrid  bit Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Fields' and c.name='isblob')
alter TABLE Fields add isblob  bit Not Null default 0
else 
alter TABLE Fields alter column isblob  bit  Null 
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='FromOrganizations' and c.name='Phone')
alter TABLE FromOrganizations add Phone  nvarchar(30) NULL
else
alter TABLE FromOrganizations alter column Phone  nvarchar(30) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='FromOrganizations' and c.name='Fax')
alter TABLE FromOrganizations add Fax  nvarchar(30) NULL                                                                              
else 
alter TABLE FromOrganizations alter column Fax  nvarchar(30) NULL
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='FromOrganizations' and c.name='Email')
alter TABLE FromOrganizations add Email  nvarchar(30) NULL                                                                          
else 
alter TABLE FromOrganizations alter column Email  nvarchar(30) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='FromOrganizations' and c.name='ResponsibleStaffer')
alter TABLE FromOrganizations add ResponsibleStaffer  nvarchar(50) NULL                                                
else 
alter TABLE FromOrganizations alter column ResponsibleStaffer  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='FromOrganizations' and c.name='IsActive')
alter TABLE FromOrganizations add IsActive  bit NULL                                                                             
else 
alter TABLE FromOrganizations alter column IsActive  bit NULL   
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='FromOrganizations' and c.name='PreCode')
alter TABLE FromOrganizations add PreCode  nvarchar(50) NULL                                                                      
else 
alter TABLE FromOrganizations alter column PreCode  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='FromOrganizations' and c.name='IsInnerOrg')
alter TABLE FromOrganizations add IsInnerOrg  bit Not Null default 0
else
alter TABLE FromOrganizations alter column IsInnerOrg  bit Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='FromOrganizations' and c.name='Code')
alter TABLE FromOrganizations add Code  nvarchar(50) NULL
else
alter TABLE FromOrganizations alter column Code  nvarchar(50) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='Signerid')
alter TABLE Letter add Signerid  nvarchar(50) NULL
else
alter TABLE Letter alter column Signerid  nvarchar(50) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='Memo')
alter TABLE Letter add Memo  nvarchar(2000) NULL
else
alter TABLE Letter alter column Memo  nvarchar(2000) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='AttachTitle')
alter TABLE Letter add AttachTitle  nvarchar(50) NULL
else
alter TABLE Letter alter column AttachTitle  nvarchar(50) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='NumberOfAttachPages')
alter TABLE Letter add NumberOfAttachPages  smallint NULL default 1
else
alter TABLE Letter alter column NumberOfAttachPages  smallint NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='NumberOfPage')
alter TABLE Letter add NumberOfPage  tinyint Not Null default 1
else
alter TABLE Letter alter column NumberOfPage  tinyint Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='ToStaffer')
alter TABLE Letter add ToStaffer  nvarchar(50) NULL
else
alter TABLE Letter alter column ToStaffer  nvarchar(50) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='SentLetterID')
alter TABLE Letter add SentLetterID  int NULL
else
alter TABLE Letter alter column SentLetterID  int NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='TemplateID')
alter TABLE Letter add TemplateID  int NULL
else
alter TABLE Letter alter column TemplateID  int NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='LetterRecommites')
alter TABLE Letter add LetterRecommites  nvarchar(500) NULL
else
alter TABLE Letter alter column LetterRecommites  nvarchar(500) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='FromStaffer')
alter TABLE Letter add FromStaffer  nvarchar(50) NULL
else
alter TABLE Letter alter column FromStaffer  nvarchar(50) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='Finalized')
alter TABLE Letter add Finalized  bit Not Null default 1
else
alter TABLE Letter alter column Finalized  bit Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='SendStatusID')
alter TABLE Letter add SendStatusID  tinyint Not Null default 1
else
alter TABLE Letter alter column SendStatusID  tinyint Not Null
GO
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='Archived')
ALTER TABLE dbo.Letter ADD Archived bit NOT NULL  DEFAULT 0
else
alter TABLE dbo.Letter alter column Archived bit NOT NULL
GO
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='LatestActionTypeID')
 alter TABLE [Letter] add [LatestActionTypeID] [tinyint] NULL
else
 alter TABLE [Letter] alter column [LatestActionTypeID] [tinyint] NULL

GO
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='LatestActionReason')
 alter TABLE [Letter] add [LatestActionReason] [nvarchar](255) NULL
else
 alter TABLE [Letter] alter column [LatestActionReason] [nvarchar](255) NULL

GO
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='DeadLineDate')
ALTER TABLE dbo.Letter ADD	DeadLineDate char(10) NULL
GO

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterArchiveFolder' and c.name='LetterArchiveID')
alter TABLE LetterArchiveFolder add LetterArchiveID  int Not Null default 0
else
alter TABLE LetterArchiveFolder alter column LetterArchiveID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterArchiveFolder' and c.name='ArchiveFolderID')
alter TABLE LetterArchiveFolder add ArchiveFolderID  int Not Null default 0
else
alter TABLE LetterArchiveFolder alter column ArchiveFolderID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterArchiveFolder' and c.name='LetterID')
alter TABLE LetterArchiveFolder add LetterID  int Not Null default 0
else
alter TABLE LetterArchiveFolder alter column LetterID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterArchiveFolder' and c.name='ArchiveDate')
alter TABLE LetterArchiveFolder add ArchiveDate  char(10) Not Null default 0
else
alter TABLE LetterArchiveFolder alter column ArchiveDate  char(10) Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterArchiveFolder' and c.name='Page')
alter TABLE LetterArchiveFolder add Page  int NULL
else
alter TABLE LetterArchiveFolder alter column Page  int NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterArchiveFolder' and c.name='ArchiveNotes')
alter TABLE LetterArchiveFolder add ArchiveNotes  nvarchar(50) NULL
else
alter TABLE LetterArchiveFolder alter column ArchiveNotes  nvarchar(50) NULL
go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterArchiveFolder' and c.name='UserID')
ALTER TABLE LetterArchiveFolder ADD	UserID int NOT NULL  DEFAULT 0
Go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterData' and c.name='LetterDataID')
alter TABLE LetterData add LetterDataID  int Not Null
else
alter TABLE LetterData alter column LetterDataID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterData' and c.name='LetterID')
alter TABLE LetterData add LetterID  int Not Null default 0                                                                             
else 
alter TABLE LetterData alter column LetterID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterData' and c.name='PageNumber')
alter TABLE LetterData add PageNumber  tinyint Not Null default 0                                                                     
else 
alter TABLE LetterData alter column PageNumber  tinyint Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterData' and c.name='Image')
alter TABLE LetterData add Image  image NULL                                                                                               
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterData' and c.name='extention')
alter TABLE LetterData add extention  tinyint Not Null default 1
else 
alter TABLE LetterData alter column extention  tinyint Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterData' and c.name='Description')
alter TABLE LetterData add Description  nvarchar(200) NULL
else 
alter TABLE LetterData alter column Description  nvarchar(200) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterFormats' and c.name='Code')
alter TABLE LetterFormats add Code  int Not Null default 0                                                                               
else 
alter TABLE LetterFormats alter column Code  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterFormats' and c.name='Title')
alter TABLE LetterFormats add Title  nvarchar(50) NULL                                                                                  
else 
alter TABLE LetterFormats alter column Title  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterTemplate' and c.name='ID')
alter TABLE LetterTemplate add ID  int Not Null default 0                                                                                 
else 
alter TABLE LetterTemplate alter column ID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterTemplate' and c.name='Document')
alter TABLE LetterTemplate add Document  image NULL                                                                                 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterTemplate' and c.name='Title')
alter TABLE LetterTemplate add Title  nvarchar(50) NULL                                                                                
else 
alter TABLE LetterTemplate alter column Title  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterTemplate' and c.name='validHeader')
alter TABLE LetterTemplate add validHeader  smallint NULL                                                                        
else 
alter TABLE LetterTemplate alter column validHeader  smallint NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterTemplate' and c.name='TemplateGroupID')
alter TABLE LetterTemplate add TemplateGroupID  int Not Null default 1 
else 
alter TABLE LetterTemplate alter column TemplateGroupID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterText' and c.name='LetterID')
alter TABLE LetterText add LetterID  int NULL                                                                                           
else 
alter TABLE LetterText alter column LetterID  int NULL
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterText' and c.name='TypeText')
alter TABLE LetterText add TypeText  ntext NULL                                                                                         
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterText' and c.name='LetterFormat')
alter TABLE LetterText add LetterFormat  int Not Null default 0                                                                     
else 
alter TABLE LetterText alter column LetterFormat  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterTypes' and c.name='ID')
alter TABLE LetterTypes add ID  tinyint Not Null default 0                                                                                   
else 
alter TABLE LetterTypes alter column ID  tinyint Not Null 
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterTypes' and c.name='Title')
alter TABLE LetterTypes add Title  nvarchar(50) NULL                                                                                      
else 
alter TABLE LetterTypes alter column Title  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='ListItems' and c.name='ListItemsID')
alter TABLE ListItems add ListItemsID  int Not Null default 0
else
alter TABLE ListItems alter column ListItemsID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ListItems' and c.name='ListID')
alter TABLE ListItems add ListID  tinyint Not Null default 0
else
alter TABLE ListItems alter column ListID  tinyint Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ListItems' and c.name='KeyValue')
alter TABLE ListItems add KeyValue  int Not Null default 0
else
alter TABLE ListItems alter column KeyValue  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ListItems' and c.name='Title')
alter TABLE ListItems add Title  nvarchar(50) NULL
else
alter TABLE ListItems alter column Title  nvarchar(50) NULL
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='ListItems' and c.name='Notes')
alter TABLE ListItems add Notes  nvarchar(255) NULL
else
alter TABLE ListItems alter column Notes  nvarchar(255) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReceiveTypes' and c.name='ID')
alter TABLE ReceiveTypes add ID  tinyint Not Null default 0
else
alter TABLE ReceiveTypes alter column ID  tinyint Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReceiveTypes' and c.name='Title')
alter TABLE ReceiveTypes add Title  nvarchar(50) NULL
else 
alter TABLE ReceiveTypes alter column Title  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='RecommiteData' and c.name='RecommiteDataID')
alter TABLE RecommiteData add RecommiteDataID  int Not Null default 0                                                         
else 
alter TABLE RecommiteData alter column RecommiteDataID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='RecommiteData' and c.name='RecommiteID')
alter TABLE RecommiteData add RecommiteID  int Not Null default 0                                                                 
else 
alter TABLE RecommiteData alter column RecommiteID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='RecommiteData' and c.name='Image')
alter TABLE RecommiteData add Image  image NULL
go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='RecommiteData' and c.name='extention')
alter TABLE RecommiteData add extention  tinyint Not Null default 0
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='ReCommites' and c.name='RecommiteID')
alter TABLE ReCommites add RecommiteID  int Not Null default 0
else
alter TABLE ReCommites alter column RecommiteID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='LetterID')
alter TABLE ReCommites add LetterID  int Not Null default 0
else
alter TABLE ReCommites alter column LetterID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='ID')
alter TABLE ReCommites add ID  smallint Not Null default 0
else
alter TABLE ReCommites alter column ID  smallint Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='Type')
alter TABLE ReCommites add Type  tinyint Not Null default 1
else
alter TABLE ReCommites alter column Type  tinyint Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='ParentId')
alter TABLE ReCommites add ParentId  smallint Not Null default 0
else
alter TABLE ReCommites alter column ParentId  smallint Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='OrgID')
alter TABLE ReCommites add OrgID  int Not Null default 0
else
alter TABLE ReCommites alter column OrgID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='Paraph')
alter TABLE ReCommites add Paraph  nvarchar(500) NULL
else
alter TABLE ReCommites alter column Paraph  nvarchar(500) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='RecommiteDate')
alter TABLE ReCommites add RecommiteDate  varchar(10) Not Null default 0
else
alter TABLE ReCommites alter column RecommiteDate  varchar(10) Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='UserID')
alter TABLE ReCommites add UserID  tinyint Not Null default 1
else
alter TABLE ReCommites alter column UserID  tinyint Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='IsCopy')
alter TABLE ReCommites add IsCopy  bit NULL
else
alter TABLE ReCommites alter column IsCopy  bit NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='Proceeded')
alter TABLE ReCommites add Proceeded  bit Not Null default 0
else
alter TABLE ReCommites alter column Proceeded  bit Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='ProceedDate')
alter TABLE ReCommites add ProceedDate  varchar(10) NULL
else
alter TABLE ReCommites alter column ProceedDate  varchar(10) NULL
go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='staffmemo')
alter TABLE ReCommites add staffmemo  nvarchar(255) NULL
else
alter TABLE ReCommites alter column staffmemo  nvarchar(255) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='viewdate')
alter TABLE ReCommites add viewdate  char(10) NULL
else
alter TABLE ReCommites alter column viewdate  char(10) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='ActionTypeID')
 alter TABLE [Letter] add [ActionTypeID] [tinyint] not  NULL default 1
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='OrgStaff')
alter TABLE ReCommites add OrgStaff  nvarchar(50) NULL
else
alter TABLE ReCommites alter column OrgStaff  nvarchar(50) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='DeadLineDate')
alter TABLE ReCommites add DeadLineDate  char(10) NULL
else
alter TABLE ReCommites alter column DeadLineDate  char(10) NULL
go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='ActionTypeID')
alter TABLE ReCommites add [ActionTypeID] [tinyint]  NULL
else
alter TABLE ReCommites alter column [ActionTypeID] [tinyint]  NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReCommites' and c.name='DeadLineToint')
ALTER TABLE dbo.ReCommites ADD	DeadLineToint int NULL

GO
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='RecommiteTypes' and c.name='ID')
alter TABLE RecommiteTypes add ID  tinyint Not Null default 0
else
alter TABLE RecommiteTypes alter column ID  tinyint Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='RecommiteTypes' and c.name='Title')
alter TABLE RecommiteTypes add Title  nvarchar(50) NULL                                                                                
else 
alter TABLE RecommiteTypes alter column Title  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='RecommiteTypes' and c.name='ReceiveMode')
alter TABLE RecommiteTypes add ReceiveMode  bit NULL                                                                             
else 
alter TABLE RecommiteTypes alter column ReceiveMode  bit NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='RecommiteTypes' and c.name='InnerOrganize')
alter TABLE RecommiteTypes add InnerOrganize  bit NULL                                                                         
else 
alter TABLE RecommiteTypes alter column InnerOrganize  bit NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Secretariats' and c.name='SecID')
alter TABLE Secretariats add SecID  int Not Null default 0                                                                               
else
alter TABLE Secretariats alter column SecID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Secretariats' and c.name='ArchiveCenterID')
alter TABLE Secretariats add ArchiveCenterID  int Not Null default 0                                                                               
else 
alter TABLE Secretariats alter column  [ArchiveCenterID] [int] NOT NULL 
GO
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Secretariats' and c.name='SecTitle')
alter TABLE Secretariats add SecTitle  nvarchar(50) NULL                                                                              
else 
alter TABLE Secretariats alter column SecTitle  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Secretariats' and c.name='PreCode')
alter TABLE Secretariats add PreCode  nvarchar(50) NULL                                                                                
else 
alter TABLE Secretariats alter column PreCode  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='SendStatus' and c.name='SendStatusID')
alter TABLE SendStatus add SendStatusID  tinyint Not Null default 0                                                                 
else 
alter TABLE SendStatus alter column SendStatusID  tinyint Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='SendStatus' and c.name='SendStatusTitle')
alter TABLE SendStatus add SendStatusTitle  nvarchar(100) Not Null default 0                                                     
else 
alter TABLE SendStatus alter column SendStatusTitle  nvarchar(100) Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Sentenses' and c.name='ID')
alter TABLE Sentenses add ID  int Not Null default 0                                                                                           
else 
alter TABLE Sentenses alter column ID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Sentenses' and c.name='SentenseName')
alter TABLE Sentenses add SentenseName  nvarchar(50) NULL                                                                            
else
alter TABLE Sentenses alter column SentenseName  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Sentenses' and c.name='SentensValue')
alter TABLE Sentenses add SentensValue  nvarchar(255) NULL                                                                           
else 
alter TABLE Sentenses alter column SentensValue  nvarchar(255) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Settings' and c.name='UserID')
alter TABLE Settings add UserID  int Not Null default 0
else 
alter TABLE Settings alter column UserID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Settings' and c.name='VariableId')
alter TABLE Settings add VariableId  int Not Null default 0                                                                             
else 
alter TABLE Settings alter column VariableId  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Settings' and c.name='Value')
alter TABLE Settings add Value  nvarchar(255) NULL                                                                                           
else
alter TABLE Settings alter column Value  nvarchar(255) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Settings' and c.name='description')
alter TABLE Settings add description  nvarchar(50) NULL                                                                                
else 
alter TABLE Settings alter column description  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='sys_AppMessage' and c.name='ID')
alter TABLE sys_AppMessage add ID  int Not Null default 0                                                                                 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='sys_AppMessage' and c.name='FarsiMessage')
alter TABLE sys_AppMessage add FarsiMessage  nvarchar(255) NULL                                                                 
else 
alter TABLE sys_AppMessage alter column FarsiMessage  nvarchar(255) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Tables' and c.name='TableId')
alter TABLE Tables add TableId  tinyint Not Null default 0
else
alter TABLE Tables alter column TableId  tinyint Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Tables' and c.name='TableName')
alter TABLE Tables add TableName  nvarchar(50) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Tables' and c.name='Description')
alter TABLE Tables add Description  nvarchar(50) NULL
go
 if not exists (select * from syscolumns c,sysobjects o
 where o.id=c.id and o.name='Tables' and c.name='TableCode')
 alter TABLE Tables add [TableCode] [varchar](50) NULL
go
 if not exists (select * from syscolumns c,sysobjects o
 where o.id=c.id and o.name='Tables' and c.name='UserField1')
 alter TABLE Tables add [UserField1] [nvarchar](50) NULL
go
if not exists (select * from syscolumns c,sysobjects o
 where o.id=c.id and o.name='Tables' and c.name='UserField2')
 alter TABLE Tables add [UserField2] [nvarchar](50) NULL

go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='TemplateGroup' and c.name='TemplateGroupID')
alter TABLE TemplateGroup add TemplateGroupID  int Not Null default 0
else
alter TABLE TemplateGroup alter column TemplateGroupID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='TemplateGroup' and c.name='TemplateGroupTitle')
alter TABLE TemplateGroup add TemplateGroupTitle  nvarchar(100) Not Null default 0
else
alter TABLE TemplateGroup alter column TemplateGroupTitle  nvarchar(100) Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Urgenceis' and c.name='ID')
alter TABLE Urgenceis add ID  smallint Not Null default 0
else 
alter TABLE Urgenceis alter column ID  smallint Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Urgenceis' and c.name='Title')
alter TABLE Urgenceis add Title  nvarchar(50) NULL
else 
alter TABLE Urgenceis alter column Title  nvarchar(50) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserExtention' and c.name='UserExtentionID')
alter TABLE UserExtention add UserExtentionID  int Not Null default 0                                                         
else 
alter TABLE UserExtention alter column UserExtentionID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserExtention' and c.name='UserId')
alter TABLE UserExtention add UserId  int Not Null default 0                                                                           
else 
alter TABLE UserExtention alter column UserId  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserExtention' and c.name='ExtentionID')
alter TABLE UserExtention add ExtentionID  int Not Null default 0                                                                 
else 
alter TABLE UserExtention alter column ExtentionID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserExtention' and c.name='ReaderApplication')
alter TABLE UserExtention add ReaderApplication  nvarchar(2000) NULL                                                        
else 
alter TABLE UserExtention alter column ReaderApplication  nvarchar(2000) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserLog' and c.name='UserID')
alter TABLE UserLog add UserID  tinyint Not Null default 0                                                                                   
else 
alter TABLE UserLog alter column UserID  tinyint Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserLog' and c.name='FormID')
alter TABLE UserLog add FormID  tinyint Not Null default 0                                                                                   
else 
alter TABLE UserLog alter column FormID  tinyint Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserLog' and c.name='ActionID')
alter TABLE UserLog add ActionID  int Not Null default 0
else
alter TABLE UserLog alter column ActionID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserLog' and c.name='Time1')
alter TABLE UserLog add Time1  datetime Not Null DEFAULT (getdate())
else 
alter TABLE UserLog alter column Time1  datetime Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserLog' and c.name='LetterID')
alter TABLE UserLog add LetterID  int NULL
else
alter TABLE UserLog alter column LetterID  int NULL
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserLoginLogout' and c.name='UserLoginLogoutID')
alter TABLE UserLoginLogout add UserLoginLogoutID  int Not Null default 0
else 
alter TABLE UserLoginLogout alter column UserLoginLogoutID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserLoginLogout' and c.name='UserID')
alter TABLE UserLoginLogout add UserID  int Not Null default 0
else 
alter TABLE UserLoginLogout alter column UserID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserLoginLogout' and c.name='IPAddress')
alter TABLE UserLoginLogout add IPAddress  char(15) NULL                                                                          
else 
alter TABLE UserLoginLogout alter column IPAddress  char(15) NULL
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserLoginLogout' and c.name='LoginTime')
alter TABLE UserLoginLogout add LoginTime  datetime Not Null DEFAULT (getdate())
else
alter TABLE UserLoginLogout alter column LoginTime  datetime Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserLoginLogout' and c.name='LogoutTime')
alter TABLE UserLoginLogout add LogoutTime  datetime Not Null DEFAULT (getdate())
else
alter TABLE UserLoginLogout alter column LogoutTime  datetime Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserLoginLogout' and c.name='isSafeLogout')
alter TABLE UserLoginLogout add isSafeLogout  bit Not Null default 0
else
alter TABLE UserLoginLogout alter column isSafeLogout  bit Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserNote' and c.name='UserNoteID')
alter TABLE UserNote add UserNoteID  int Not Null default 0                                                                             
else 
alter TABLE UserNote alter column UserNoteID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserNote' and c.name='UserID')
alter TABLE UserNote add UserID  int Not Null default 0                                                                                     
else 
alter TABLE UserNote alter column UserID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserNote' and c.name='Note')
alter TABLE UserNote add Note  ntext NULL                                                                                                     
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserNote' and c.name='CreateDate')
alter TABLE UserNote add CreateDate  char(10) Not Null default 0                                                                        
else 
alter TABLE UserNote alter column CreateDate  char(10) Not Null 
go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='EndActiveDate')
alter TABLE Users add [EndActiveDate] [char](10) NULL
else
alter TABLE Users alter column [EndActiveDate] [char](10) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='BeginActiveDate')
alter TABLE Users add 	[BeginActiveDate] [char](10) NULL
else
alter TABLE Users alter column 	[BeginActiveDate] [char](10) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='IsSecretariantStaffer')
alter TABLE Users add IsSecretariantStaffer  bit NULL
else
alter TABLE Users alter column IsSecretariantStaffer  bit NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='KartableGridInfo')
alter TABLE Users add KartableGridInfo  image NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='DabirGridInfo')
alter TABLE Users add DabirGridInfo  image NULL
go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='AlternativeUserID')
alter TABLE Users add AlternativeUserID int NULL
else
alter TABLE Users alter column AlternativeUserID int NULL
go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='AlternativeEndDate')
alter TABLE Users add AlternativeEndDate char(10)  NULL
else
alter TABLE Users alter column AlternativeEndDate char(10)  NULL
go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='AlternativebeginDate')
alter TABLE Users add AlternativebeginDate char(10) NULL
else
alter TABLE Users alter column AlternativebeginDate char(10) NULL
go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='HasSecureLetterAccess')
alter TABLE Users add [HasSecureLetterAccess] bit not NULL default 1
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='SecondOrgID')
alter TABLE Users add SecondOrgID int NULL
else
alter TABLE Users alter column SecondOrgID int NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='eCartableGridInfo')
Alter TABLE [dbo].[Users] Add [eCartableGridInfo] [varchar](500) NULL
else
alter TABLE Users alter column [eCartableGridInfo] [varchar](500) NULL
GO
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Users' and c.name='eCartableTheme')
Alter TABLE [dbo].[Users] Add [eCartableTheme] [varchar](50) NULL
else
Alter TABLE [dbo].[Users] alter column [eCartableTheme] [varchar](50) NULL
GO


if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserSecretariats' and c.name='UserId')
alter TABLE UserSecretariats add UserId  int Not Null default 0
else
alter TABLE UserSecretariats alter column UserId  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserSecretariats' and c.name='SecId')
alter TABLE UserSecretariats add SecId  int Not Null default 0
else
alter TABLE UserSecretariats alter column SecId  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserShortCut' and c.name='userShortCutID')
alter TABLE UserShortCut add userShortCutID  int Not Null default 0
else
alter TABLE UserShortCut alter column userShortCutID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserShortCut' and c.name='UserID')
alter TABLE UserShortCut add UserID  int Not Null default 0
else
alter TABLE UserShortCut alter column UserID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserShortCut' and c.name='keyText')
alter TABLE UserShortCut add keyText  nvarchar(100) Not Null default 0
else
alter TABLE UserShortCut alter column keyText  nvarchar(100) Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserShortCut' and c.name='altKey')
alter TABLE UserShortCut add altKey  char(1) Not Null default 0
else
alter TABLE UserShortCut alter column altKey  char(1) Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserTemplateGroup' and c.name='UserTemplateGroupID')
alter TABLE UserTemplateGroup add UserTemplateGroupID  int Not Null default 0                                         
else 
alter TABLE UserTemplateGroup alter column UserTemplateGroupID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserTemplateGroup' and c.name='TemplateGroupID')
alter TABLE UserTemplateGroup add TemplateGroupID  int Not Null default 0                                                 
else 
alter TABLE UserTemplateGroup alter column TemplateGroupID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserTemplateGroup' and c.name='UserID')
alter TABLE UserTemplateGroup add UserID  int Not Null default 0                                                                   
else 
alter TABLE UserTemplateGroup alter column UserID  int Not Null 
go

if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterTypes' and c.name='PreCode')
alter TABLE LetterTypes add PreCode  nvarchar(10) NULL
else 
alter TABLE LetterTypes alter column PreCode  nvarchar(10) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Secretariats' and c.name='ServerID')
alter TABLE Secretariats add ServerID  int Not Null default 0
else 
alter TABLE Secretariats alter column ServerID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Fields' and c.name='FieldGroupID')
alter TABLE Fields add FieldGroupID  int NULL                                                                                           
else 
alter TABLE Fields alter column FieldGroupID  int NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Fields' and c.name='order')
alter TABLE Fields add [order]  int NULL                                                                                                         
else 
alter TABLE Fields alter column [order]  int NULL 
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Fields' and c.name='isboolean')
alter TABLE Fields add isboolean  bit NULL                                                                                                 
else 
alter TABLE Fields alter column isboolean  bit NULL 
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Fields' and c.name='FieldTypeID')
alter TABLE Fields add FieldTypeID  tinyint NULL                                                                                         
else 
alter TABLE Fields alter column FieldTypeID  tinyint NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Fields' and c.name='ReferenceTableID')
alter TABLE Fields add ReferenceTableID  tinyint NULL                                                                               
else 
alter TABLE Fields alter column ReferenceTableID  tinyint NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='FieldType' and c.name='FieldTypeID')
alter TABLE FieldType add FieldTypeID  tinyint Not Null default 0                                                                     
else 
alter TABLE FieldType alter column FieldTypeID  tinyint Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='FieldType' and c.name='FieldTypeTitle')
alter TABLE FieldType add FieldTypeTitle  nvarchar(50) Not Null default 0                                                          
else 
alter TABLE FieldType alter column FieldTypeTitle  nvarchar(50) Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='ReCommites' and c.name='LastUpdate')
alter TABLE ReCommites add LastUpdate  datetime NULL   default getdate()                                                                                
else 
 alter TABLE ReCommites alter column LastUpdate  datetime NULL
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterFieldValue' and c.name='LetterFieldValueID')
alter TABLE LetterFieldValue add LetterFieldValueID  int Not Null default 0
else
alter TABLE LetterFieldValue alter column LetterFieldValueID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterFieldValue' and c.name='LetterID')
alter TABLE LetterFieldValue add LetterID  int Not Null default 0
else
alter TABLE LetterFieldValue alter column LetterID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterFieldValue' and c.name='FormOrder')
alter TABLE LetterFieldValue add FormOrder tinyint NOT NULL  DEFAULT 1


go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterFieldValue' and c.name='FieldID')
alter TABLE LetterFieldValue add FieldID  int Not Null default 0
else
alter TABLE LetterFieldValue alter column FieldID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterFieldValue' and c.name='FieldValue')
alter TABLE LetterFieldValue add FieldValue  nvarchar(2000) NULL
else
alter TABLE LetterFieldValue alter column FieldValue  nvarchar(2000) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='LetterFieldValue' and c.name='LastUpdate')
alter TABLE LetterFieldValue add LastUpdate  datetime NULL    default getdate()
else
alter TABLE LetterFieldValue alter column LastUpdate  datetime NULL
go
if not exists (select * from syscolumns c,sysobjects o
 where o.id=c.id and o.name='LetterFieldValue' and c.name='InsertUserID')
 alter TABLE LetterFieldValue add InsertUserID int not NULL default 0

go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReferenceTableData' and c.name='ReferenceTableDataID')
alter TABLE ReferenceTableData add ReferenceTableDataID  int Not Null default 0
else
alter TABLE ReferenceTableData alter column ReferenceTableDataID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='ReferenceTableData' and c.name='TableID')
alter TABLE ReferenceTableData add TableID  int Not Null default 0                                                               
else 
alter TABLE ReferenceTableData alter column TableID  int Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='ReferenceTableData' and c.name='DataID')
alter TABLE ReferenceTableData add DataID  tinyint Not Null default 0                                                             
else 
alter TABLE ReferenceTableData alter column DataID  tinyint Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='ReferenceTableData' and c.name='DataTitle')
alter TABLE ReferenceTableData add DataTitle  nvarchar(50) Not Null default 0                                                  
else 
alter TABLE ReferenceTableData alter column DataTitle  nvarchar(50) Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Tables' and c.name='TableType')
alter TABLE Tables add TableType  tinyint NULL                                                                                             
else 
alter TABLE Tables alter column TableType  tinyint NULL 
go
/*if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Added' and c.name='Number')
alter TABLE Added add Number  int Not Null default 0                                                                                           
else 
alter TABLE Added alter column Number  int Not Null 
go*/
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterData' and c.name='LastUpdate')
alter TABLE LetterData add LastUpdate  datetime NULL      default getdate()
else
alter TABLE LetterData alter column LastUpdate  datetime NULL  
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='RelatedSecretariats' and c.name='DestinationOrgID_inSource')
alter TABLE RelatedSecretariats add DestinationOrgID_inSource  int Not Null default 0
else
alter TABLE RelatedSecretariats alter column DestinationOrgID_inSource  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='RelatedSecretariats' and c.name='DestinationSecID')
alter TABLE RelatedSecretariats add DestinationSecID  int Not Null default 0
else
alter TABLE RelatedSecretariats alter column DestinationSecID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='RelatedSecretariats' and c.name='DestinationServerIP')
alter TABLE RelatedSecretariats add [DestinationServerIP] [varchar] (30)  NULL
else
alter TABLE RelatedSecretariats alter column [DestinationServerIP] [varchar] (30)  NULL
go

if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='RelatedSecretariats' and c.name='DestinationServerDB')
alter TABLE RelatedSecretariats add DestinationServerDB [varchar] (50)  NULL
else
alter TABLE RelatedSecretariats alter column DestinationServerDB [varchar] (50)  NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='LastUpdate')
alter TABLE Letter add LastUpdate  datetime Not Null  default getdate()                                                                         
else 
alter TABLE Letter alter column LastUpdate  datetime Not Null  
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='UserTableID')
alter TABLE Letter add UserTableID  int NULL
else
alter TABLE Letter alter column UserTableID  int NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Letter' and c.name='UserTableID2')
alter TABLE Letter add UserTableID2  int NULL
else
alter TABLE Letter alter column UserTableID2  int NULL
go
declare @sql nvarchar(1000)
if exists (select *
from sysobjects o1 
inner join sysobjects o2 on  o1.parent_obj=o2.id
inner join syscolumns c on  c.id=o2.id and c.colid=o1.info
where o2.name='Tables' and c.name='IsSystemTable')

select @sql =' alter TABLE Tables DROP CONSTRAINT '+ o1.name 
from sysobjects o1 
inner join sysobjects o2 on  o1.parent_obj=o2.id 
inner join syscolumns c on  c.id=o2.id and c.colid=o1.info
where  o2.name='Tables' and c.name='IsSystemTable'
Exec(@sql)
GO
if  exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Tables' and c.name='IsSystemTable')
alter TABLE Tables drop column IsSystemTable   
go

if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Letter' and c.name='SubjectDescription')
alter TABLE Letter add SubjectDescription  nvarchar(255) NULL
else 
alter TABLE Letter alter column SubjectDescription  nvarchar(255) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='Letter' and c.name='SubjectID')
alter TABLE Letter add SubjectID  int NULL                                                                                                 
else 
alter TABLE Letter alter column SubjectID  int NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserMessage' and c.name='UserMessageID')
alter TABLE UserMessage add UserMessageID  bigint Not Null default 0                                                              
else 
alter TABLE UserMessage alter column UserMessageID  bigint Not Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserMessage' and c.name='To_')
alter TABLE UserMessage add To_  int Not Null default 0                                                                                     
else 
alter TABLE UserMessage alter column To_  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserMessage' and c.name='Code')
alter TABLE UserMessage add Code  int Null 
else 
alter TABLE UserMessage alter column Code  int  Null 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserMessage' and c.name='From_')
alter TABLE UserMessage add From_  int NULL                                                                                               
else 
alter TABLE UserMessage alter column From_  int NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserMessage' and c.name='MsgDate')
alter TABLE UserMessage add MsgDate  varchar(10) NULL                                                                                   
else 
alter TABLE UserMessage alter column MsgDate  varchar(10) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserMessage' and c.name='MsgTime')
alter TABLE UserMessage add MsgTime  varchar(6) NULL                                                                                    
else 
alter TABLE UserMessage alter column MsgTime  varchar(6) NULL 
go
if not exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='UserMessage' and c.name='Subject')
alter TABLE UserMessage add Subject  nvarchar(50) NULL
else
alter TABLE UserMessage alter column Subject  nvarchar(50) NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='UserMessage' and c.name='Status')
alter TABLE UserMessage add Status  int NULL
else
alter TABLE UserMessage alter column Status  int NULL
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Subject' and c.name='SubjectID')
alter TABLE Subject add SubjectID  int Not Null default 0
else
alter TABLE Subject alter column SubjectID  int Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Subject' and c.name='SubjectTitle')
alter TABLE Subject add SubjectTitle  nvarchar(50) Not Null default 0
else
alter TABLE Subject alter column SubjectTitle  nvarchar(50) Not Null
go
if not exists (select * from syscolumns c,sysobjects o
where o.id=c.id and o.name='Subject' and c.name='IsActive')
alter TABLE Subject add IsActive  bit Not Null default 1
else
alter TABLE Subject alter column IsActive  bit Not Null
go


-------------------------------------------------------- Functions ---------------------------------------
----------------------------------------------------------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Recommite_DeadLine]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Recommite_DeadLine]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Recommite_DeadLineDate]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Recommite_DeadLineDate]
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ArchiveFolders]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ArchiveFolders]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ArchiveID]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ArchiveID]
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Fasl]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Fasl]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetSystemValue]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[GetSystemValue]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HistoryDateList]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[HistoryDateList]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[InnerNo]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[InnerNo]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[IsString]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[IsString]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Is_ParentId]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Is_ParentId]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Letter_Archived]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Letter_Archived]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MiladiLeapyear]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[MiladiLeapyear]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NumberOfPage_ByMaxSize]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[NumberOfPage_ByMaxSize]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Number_Of_Inbox]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Number_Of_Inbox]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Number_Of_Week]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Number_Of_Week]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ParentId]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ParentId]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Recommite_FirstProceed]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Recommite_FirstProceed]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Recommite_FirstView]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Recommite_FirstView]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Recommite_has_done]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Recommite_has_done]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Recommites_by_indicator]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Recommites_by_indicator]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Shamsi]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Shamsi]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ShamsiDateDiff]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ShamsiDateDiff]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ShamsiDayOf]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ShamsiDayOf]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ShamsiDayOfWeek]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ShamsiDayOfWeek]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ShamsiDayPerMonth]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ShamsiDayPerMonth]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ShamsiEnCodeDate]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ShamsiEnCodeDate]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ShamsiIncDate]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ShamsiIncDate]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ShamsiInvertForWord]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ShamsiInvertForWord]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ShamsiLeapYear]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ShamsiLeapYear]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ShamsiMonthOf]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ShamsiMonthOf]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ShamsiToInt]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ShamsiToInt]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ShamsiYearOf]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[ShamsiYearOf]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delphiType]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[delphiType]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[everyLike]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[everyLike]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_Number_Of_Letter_RelatedSecretariatID]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[get_Number_Of_Letter_RelatedSecretariatID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[has_Page]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[has_Page]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[has_WordPage]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[has_WordPage]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[has_file]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[has_file]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[has_tifPage]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[has_tifPage]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isLike]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[isLike]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[newIndicatorid]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[newIndicatorid]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pm]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[pm]
GO


CREATE FUNCTION ArchiveFolders (@LetterID int,@UserID  tinyint)
RETURNS nvarchar(1000)
BEGIN
declare @result  nvarchar(1000)
set @result=''
SELECT   @result=@result +' , '+Title +' - '+ArchiveDate
FROM         LetterArchiveFolder
INNER JOIN          ArchiveFolder ON LetterArchiveFolder.ArchiveFolderID = ArchiveFolder.FolderID
where  ArchiveFolder.UserID=@userid and Letterid =@LetterID
if @result<>'' set  @result='»«Ìê«‰Ì œ—: '+substring(@result,4,1000)
return(@result)
end
GO


CREATE FUNCTION ArchiveID (@Sid int,@fid  tinyint,@Myear tinyint,@page tinyint)
RETURNS varchar(20)
BEGIN
declare @result vaRCHAR(20)

if isnull(@fid,0)=0
SET @result=cast(@sid as varchar(8))+'/'+cast(@myear as char(2))+'/'+cast(@page as varchar(4))
else
SET @result=cast(@sid as varchar(8))+'-'+cast(@fid as varchar(2))++'/'+cast(@myear as char(2))+'/'+cast(@page as varchar(4))
return(@result)
END


GO


CREATE FUNCTION Fasl(@date char(10))
RETURNS varchar(50) AS  
BEGIN 
declare @m tinyint,@f tinyint
set @m=cast(substring(@date,6,2) as tinyint)
set @f=case when @m>1 then (@m-1)/3+1 else 1 end
return(case @f when 1 then '»Â«—' 
when 2 then ' «»” «‰'
when 3 then 'Å«ÌÌ“'
else '“„” «‰' end) 
END




GO



CREATE FUNCTION GetSystemValue(@varID int)
RETURNS nvarchar(255)  AS  
BEGIN 
if not exists(select * from settings where variableid=@varID and userid=-1)
 return(0)


 return(select value from settings where variableid=@varID and userid=-1)
END

GO





CREATE function HistoryDateList(@today char(10),@weekday tinyint)

returns @result table (id int , Title nvarchar(100),beginDate char(10),Enddate char(10))
begin

declare @year char(4)
set @year=substring(@today,1,4)

insert into @result values (1, '«„—Ê“',@today,@today)
insert into @result values (2, 'œÌ—Ê“',dbo.ShamsiIncDate(@today,0,0,-1),dbo.ShamsiIncDate(@today,0,0,-1))
insert into @result values (3, 'Â› Â «ŒÌ—',dbo.ShamsiIncDate(@today,0,0,-@weekday),@today)
insert into @result values (4, '„«Â «ŒÌ—',substring(@today,1,8)+'01',@today)
declare @month int,@i int
set @month=cast(substring(@today,9,2) as int)-1
set @i=1

 if @i<=@month
 insert into @result values (15, '›—Ê—œÌ‰',@year+'/01/01',@year+'/01/31')
 set @i=@i+1
  
 if @i<=@month
 insert into @result values (14, '«—œÌ»Â‘ ',@year+'/02/01',@year+'/02/31')
 set @i=@i+1

 if @i<=@month
 insert into @result values (13, 'Œ—œ«œ',@year+'/03/01',@year+'/03/31')
 set @i=@i+1

 if @i<=@month
 insert into @result values (12, ' Ì—',@year+'/04/01',@year+'/04/31')
 set @i=@i+1

 if @i<=@month
 insert into @result values (11, '„—œ«œ',@year+'/05/01',@year+'/05/31')
 set @i=@i+1

 if @i<=@month
 insert into @result values (10, '‘Â—ÌÊ—',@year+'/06/01',@year+'/06/31')
 set @i=@i+1

 if @i<=@month
 insert into @result values (9, '„Â—',@year+'/07/01',@year+'/07/31')
 set @i=@i+1

 if @i<=@month
 insert into @result values (8, '¬»«‰',@year+'/08/01',@year+'/08/31')
 set @i=@i+1

 if @i<=@month
 insert into @result values (7, '¬–—',@year+'/09/01',@year+'/09/31')
 set @i=@i+1

 if @i<=@month
 insert into @result values (6, 'œÌ',@year+'/10/01',@year+'/10/31')
 set @i=@i+1

 if @i<=@month
 insert into @result values (5, '»Â„‰',@year+'/11/01',@year+'/11/31')

 insert into @result values (0, ' Â„Â „Ê«—œ ','1300/11/01',+'1399/12/30')
return


end


GO



CREATE function InnerNo(@LetterID int)
  returns nvarchar(200)
begin
declare @SecCode nvarchar(50),@MYear nchar(2), @IndicatorID nvarchar(10), @ToOrgCode  nvarchar(50),
@FromOrgCode  nvarchar(50), @LetterTypCode  nvarchar(10),@result nvarchar(4000),@UserMemo nvarchar(255),
@FromPrecode  nvarchar(50)

SELECT
@SecCode=ltrim(isnull(Secretariats.Precode,'')),
@MYear=Letter.MYear,
@IndicatorID=Letter.IndicatorID,
@FromOrgCode= case when len(fromorg.code)>5  then  FromOrg.Code  else ltrim(isnull(fromorg.Precode,'')) end ,
@ToOrgCode= case when len(Toorg.code)>5  then  Toorg.Code  else ltrim(isnull(Toorg.Precode,'')) end ,
@LetterTypCode=ltrim(isnull(LetterTypes.PreCode,'')),
@UserMemo=ltrim(isnull(Usermemo,'')),
@FromPrecode=ltrim(isnull(fromorg.Precode,''))
FROM         Letter
INNER JOIN  FromOrganizations Toorg ON Letter.FromOrgID = Toorg.ID
INNER JOIN  FromOrganizations FromOrg ON Letter.FromOrgID = FromOrg.ID
INNER JOIN  LetterTypes ON Letter.Letter_Type = LetterTypes.ID
INNER JOIN  Secretariats ON Letter.SecretariatID = Secretariats.SecID
WHERE     (Letter.LetterID = @LetterID)

declare @Delimeter char(1)
set @Delimeter=ltrim(dbo.GetSystemValue(44))


set @result=case  dbo.GetSystemValue(35)
                   when 0 then ''
                   when 1 then @SecCode+@Delimeter
                   when 2 then @MYear+@Delimeter
                   when 3 then @IndicatorID+@Delimeter
                   when 4 then @ToOrgCode+@Delimeter
                   when 5 then @FromOrgCode+@Delimeter
                   when 6 then @LetterTypCode+@Delimeter
                   when 7 then @UserMemo+@Delimeter
                   when 8 then @FromPrecode+@Delimeter end+

             case  dbo.GetSystemValue(36)
                   when 0 then ''
                   when 1 then @SecCode+@Delimeter
                   when 2 then @MYear+@Delimeter
                   when 3 then @IndicatorID+@Delimeter
                   when 4 then @ToOrgCode+@Delimeter
                   when 5 then @FromOrgCode+@Delimeter
                   when 6 then @LetterTypCode+@Delimeter
                   when 7 then @UserMemo+@Delimeter 
                   when 8 then @FromPrecode+@Delimeter end+

             case  dbo.GetSystemValue(37)
                   when 0 then ''
                   when 1 then @SecCode+@Delimeter
                   when 2 then @MYear+@Delimeter
                   when 3 then @IndicatorID+@Delimeter
                   when 4 then @ToOrgCode+@Delimeter
                   when 5 then @FromOrgCode+@Delimeter
                   when 6 then @LetterTypCode+@Delimeter
                   when 7 then @UserMemo+@Delimeter 
                   when 8 then @FromPrecode+@Delimeter end+

             case  dbo.GetSystemValue(38)
                   when 0 then ''
                   when 1 then @SecCode+@Delimeter
                   when 2 then @MYear+@Delimeter
                   when 3 then @IndicatorID+@Delimeter
                   when 4 then @ToOrgCode+@Delimeter
                   when 5 then @FromOrgCode+@Delimeter
                   when 6 then @LetterTypCode+@Delimeter
                   when 7 then @UserMemo+@Delimeter 
                   when 8 then @FromPrecode+@Delimeter end+

             case  dbo.GetSystemValue(39)
                   when 0 then ''
                   when 1 then @SecCode+@Delimeter
                   when 2 then @MYear+@Delimeter
                   when 3 then @IndicatorID+@Delimeter
                   when 4 then @ToOrgCode+@Delimeter
                   when 5 then @FromOrgCode+@Delimeter
                   when 6 then @LetterTypCode+@Delimeter
                   when 7 then @UserMemo+@Delimeter 
                   when 8 then @FromPrecode+@Delimeter end+

             case  dbo.GetSystemValue(40)
                   when 0 then ''
                   when 1 then @SecCode+@Delimeter
                   when 2 then @MYear+@Delimeter
                   when 3 then @IndicatorID+@Delimeter
                   when 4 then @ToOrgCode+@Delimeter
                   when 5 then @FromOrgCode+@Delimeter
                   when 6 then @LetterTypCode+@Delimeter
                   when 7 then @UserMemo+@Delimeter 
                   when 8 then @FromPrecode+@Delimeter end

while charindex('  ',@result)<>0
  begin
   Set @result=replace(@result,'  ',' ')
   Set @result=replace(@result,'/ ','/')
   Set @result=replace(@result,' /','/')
  end 

set @result=replace(ltrim(rtrim(@result)),@Delimeter+@Delimeter,@Delimeter)
set @result=replace(@result,@Delimeter+@Delimeter,@Delimeter)


if substring(@result,len(@result),1)=@Delimeter
   set @result=substring(@result,1,len(@result)-1)

if substring(@result,1,1)=@Delimeter
   set @result=substring(@result,2,len(@result)-1)


return(@result)
end

GO

CREATE FUNCTION IsString(@fieldType varchar(50))
RETURNS bit  AS
BEGIN
return case when @fieldType in ('float','int','bit','money','bigint') then 0 else 1 end
END


GO





CREATE   FUNCTION Is_ParentId (@ChildID int,@ParentID int)
RETURNS bit AS
BEGIN

 declare @PI int,@CurID int,@stoper int
if @childid=@parentid return(1)
if @ParentID<5 return(1)
 set @CurID=@ChildID
set @stoper=1
 while @CurID<>0 and @stoper<4
   begin
    select @PI=ParentID from FromOrganizations where id=@CurID
    if @PI=@ParentID return(1)  else set @CurID=@PI
   set @stoper=@stoper+1
   end
return(0)
END



GO
create function Letter_Archived(@letterID int )
returns bit
begin
if exists(SELECT     *
FROM         LetterArchiveFolder INNER JOIN
                      ArchiveFolder ON LetterArchiveFolder.ArchiveFolderID = ArchiveFolder.FolderID
WHERE     (ArchiveFolder.UserID = 0) AND (LetterArchiveFolder.LetterID =@letterID ))
return(1)

return(0)
end





GO





CREATE FUNCTION MiladiLeapyear(@y int)
RETURNS int AS
BEGIN
     if ((@y%4=0) and (@y%100<>0)) or ((@y%100=0) and ((@y/100)%4=0))
return 1

return 0

END










GO



CREATE FUNCTION NumberOfPage_ByMaxSize (@letterID int ,@MaxSize int)
RETURNS int AS
BEGIN
declare @result int
set @result=-1
select top 1 @result=Pagenumber
from letterdata ld
where (select sum(datalength(image)) from letterData where letterid=@letterID and pagenumber<=ld.Pagenumber)<=1000*@MaxSize
order by Pagenumber desc
return(@result)
END



GO

CREATE  function Number_Of_Inbox(@SecretariatID int, @LetterFormat tinyint,@OrgID int,
@Proceeded bit,@myear tinyint,@Letter_Type int)
returns int

begin

return( SELECT count(Letter.letterID)
FROM ReCommites
INNER JOIN Letter  ON ReCommites.LetterID = Letter.LetterID
where (Letter.myear= @myear)
and (SecretariatID=@SecretariatID or @SecretariatID=0)
and (LetterFormat =@LetterFormat or  @LetterFormat=0)
and (OrgID =@OrgID )
and (Proceeded = @Proceeded)
and ( Letter_Type=@Letter_Type or @Letter_Type=0))

end



GO
CREATE FUNCTION Number_Of_Week (@D datetime)
RETURNS tinyint
 AS
BEGIN
declare @r tinyint
if (datepart(month,@d)>3) or (datepart(month,@d)=3 and datepart(day,@d)>20)
select @r=datepart(week,@d)-11 --if getdate>='Mar 21'
else
select @r=datepart(week,@d)+41--if getdate<'Mar 21'
return(@r)
END


GO





CREATE FUNCTION ParentId (@ID int)
RETURNS int AS
BEGIN
 declare @i int,@PI int,@CurID int
 set @i=0
 set @CurID=@id
 while @i<10
   begin
    select @PI=ParentID from FromOrganizations where id=@CurID
    if @PI=1 return(@CurID)   else set @CurID=@PI

    set @i=@i+1
   end
return(@PI)
END



GO






CREATE  FUNCTION Recommite_FirstProceed(@RecommiteID int)
RETURNS  varchar(10) AS
BEGIN

declare @result char(10)
declare @id int,@letterid int
select @id=id,@Letterid=Letterid
from [ReCommites]
where (RecommiteID=@RecommiteID )

select @result=Proceeddate from  ReCommites
where Letterid=@Letterid and parentid=@id

set @result=isnull(@result,'-')
return(@result)
END



GO





CREATE  FUNCTION Recommite_FirstView(@RecommiteID 	[int])
RETURNS  varchar(10) AS
BEGIN
declare @result char(10)
declare @id int,@letterid int
select @id=id,@Letterid=Letterid
from [ReCommites]
where (RecommiteID=@RecommiteID )

select @result=Viewdate from  ReCommites
where Letterid=@Letterid and parentid=@id

set @result=isnull(@result,'-')
return(@result)
END


GO




CREATE function Recommite_has_done(@RecommiteID int)
returns tinyint
begin
declare   @LetterID int, @ID int, @Type int

SELECT     @LetterID=LetterID, @ID=ID,@Type=Type
FROM         ReCommites
WHERE     (RecommiteID = @RecommiteID)
declare @all int ,@done int

if exists (select *
from  ReCommites
WHERE     LetterID=@LetterID and Type=@Type and id>@id and proceeded=0)  return(2)

return(1)

end



GO











CREATE  FUNCTION Recommites_by_indicator(@LetterID int )
RETURNS nvarchar(500) AS
BEGIN


declare @res nvarchar(500)
set @res=''

SELECT       @res=@res+','+FromOrganizations.Title+'  '+recommitedate
FROM         ReCommites  INNER JOIN
                      FromOrganizations ON ReCommites.OrgID = FromOrganizations.ID
WHERE     (ReCommites.LetterID = @LetterID)

if @res<>'' set @res=substring(@res,2,len(@res)-1)

return(@res)

END





GO






CREATE  Function Shamsi(@DATE datetime)
returns char(10)   AS BEGIN
Declare @mi smallint,@sy smallint,@sm smallint,@sd smallint,@i    smallint,
        @si smallint,@my smallint,@mm smallint,@md smallint,@Diff smallint,@result varchar(10)
Set @my=datepart(yy,@date)
Set @mm=datepart(mm,@date)
Set @md=datepart(dd,@date)
set @mi=0
set @i=0
while @i<@mm-1
 begin
    set @i=@i+1
    set @mi=@mi+case when @i in (1,3,5,7,8,10,12) then 31
                     when @i=2 then 28+dbo.MiladiLeapYear(@my) else 30 end
 end
set @mi=@mi+@md
set @sy=@my-622
set @Diff=79-dbo.ShamsiLeapYear(@sy)
set @si= case when @mi>@Diff then 0              else 365              end+@mi-@Diff
set @sy= case when @mi>@Diff then 1              else 0                end+@sy
set @sm= case when @si<187   then ((@si-1)/31)+1 else 7+((@si-187)/30) end
set @sd= case when @si<187   then ((@si-1)%31)+1 else ((@si-187)%30)+1 end

Return(                                      cast(@sy as varchar(4))+'/'+
       Case when @sm<10 then '0' else '' end+cast(@sm as varchar(2))+'/'+
       case when @sd<10 then '0' else '' end+cast(@sd as varchar(2)))
end


GO






CREATE FUNCTION ShamsiDateDiff(@dateFrom char(10),@dateTo char(10))
RETURNS   int
AS
BEGIN

RETURN( dbo.ShamsiToInt(@dateTo)-dbo.ShamsiToInt(@dateFrom))
END




GO





create function ShamsiDayOf(@date char(10))
returns  INT
as begin
Return(cast(right(@date,2) as int)) 
end



GO




CREATE FUNCTION dbo.ShamsiDayOfWeek(@date char(10))
RETURNS varchar(50) AS  
BEGIN 
return(case  (dbo.shamsitoint(@date)+1)%7 
when 0 then '‘‰»Â'
when 1 then 'Ìò‘‰»Â'
when 2 then 'œÊ‘‰»Â'
when 3 then '”Â ‘‰»Â'
when 4 then 'çÂ«— ‘‰»Â'
when 5 then 'Å‰Ã ‘‰»Â'
when 6 then 'Ã„⁄Â' end)
END



GO



CREATE FUNCTION ShamsiDayPerMonth(@y int,@m int) RETURNS  INT 
AS BEGIN
 return(case when @m<=6 then 31 when @m>6 and @m<>12 then 30 else 29+dbo.ShamsiLeapYear(@y) end)
END


 
GO







CREATE function ShamsiEnCodeDate(@y int ,@m int ,@d int) 
returns char(10)  
as 
begin
 return(cast(@y as char(4))+'/'+
  case when @m<10 then '0'+cast(@m as char(1)) else cast(@m as char(2)) end+'/'+
  case when @d<10 then '0'+cast(@d as char(1)) else cast(@d as char(2)) end+'/')
end



 
GO







CREATE function ShamsiIncDate(@date char(10) ,@y int ,@m int ,@d int) 
returns char(10)  
as 
begin
declare @ny int,@nm int ,@nd int
  set @ny=dbo.shamsiYearof(@date) 
  set @nm=dbo.shamsimonthof(@date) 
  set @nd=dbo.shamsidayof(@date) 
  set @ny=@ny+@y

 set @nm=@nm+@m
 set @ny=case when @nm<1 then @ny-1 when @nm>12 then @ny+1   else @ny end
 set @nm=case when @nm<1 then @nm+12 when @nm>12 then @nm-12 else @nm end
 set @nd=@nd+@d

 if @nd>dbo.shamsidayPermonth(@ny,@nm) 
   begin
    set @nd=@nd-dbo.shamsidayPermonth(@ny,@nm)
    set @nm=@nm+1
 set @ny=case when @nm<1 then @ny-1 when @nm>12 then @ny+1   else @ny end
 set @nm=case when @nm<1 then @nm+12 when @nm>12 then @nm-12 else @nm end
  end

  if @nd<1 
   begin
    set @nm=@nm-1
 set @ny=case when @nm<1 then @ny-1 when @nm>12 then @ny+1   else @ny end
 set @nm=case when @nm<1 then @nm+12 when @nm>12 then @nm-12 else @nm end
     set  @nd=@nd+dbo.shamsidayPermonth(@ny,@nm)
   end

return(dbo.ShamsiEnCodeDate(@ny,@nm,@nd))
end




 
GO








CREATE FUNCTION ShamsiInvertForWord(@date  varchar(10))
RETURNS varchar(10)   AS  
BEGIN 
return(substring(@date,9,2)+substring(@date,5,4)+substring(@date,1,4))
END





GO







CREATE FUNCTION ShamsiLeapYear(@y int) 
RETURNS tinyint  
AS BEGIN
declare @s tinyint
  set @s=(@y-22)%33
  Return(case when (@s<>32) and (@s%4 = 0) then  1 else 0 end )
END




GO





create function ShamsiMonthOf(@date char(10))
returns  INT 
as begin
Return(cast(substring(@date,6,2) as int) )
end




GO




--//


CREATE FUNCTION ShamsiToInt(@date char(10)) RETURNS  INT 
AS BEGIN
  declare @d1 int ,@d2 int ,@Y int ,@m int ,@d int ,@dif int ,@i int
set @y=dbo.shamsiYearof(@date)
  set @m=dbo.shamsimonthof(@date) 
  set @d=dbo.shamsidayof(@date)   
set @dif=case when @m<7 then  (@m-1)*31+@d else 186+(@m-7)*30+@d end;
  set @i=1300
  while @i<@y
    begin
     set @dif=@dif+dbo.ShamsiLeapYear(@i)+365
     set @i=@i+1  
    end
  RETURN(@dif)
END




GO










create function ShamsiYearOf(@date char(10))
returns  INT
as begin
return(cast(left(@date,4) as int)) 
end








 
GO









CREATE FUNCTION delphiType (@typeName varchar(100))  
RETURNS varchar(20) AS  
BEGIN 
Return
(case  
when  @typeName in ('int','bigint','smallint') then 'integer'
when  @typeName in ('tinyint') then 'integer'
when  @typeName in ('bit') then 'boolean'
when  @typeName in ('varchar','char','sysname','text','shamsiDate','tel','path','time') then 'string'
when  @typeName in ('nvarchar','ntext') then 'widestring'
when  @typeName in ('sql_variant') then 'variant'
when  @typeName in ('float') then 'real'  else @typeName	end)

END



GO





CREATE FUNCTION everyLike(@fieldType varchar(50),@len int)
RETURNS  bit AS  
BEGIN 
 return case when @fieldType in('varchar','nvarchar','text') and @len>50 then 1 else 0 end
END




GO

create function get_Number_Of_Letter_RelatedSecretariatID(
@RelatedSecretariatID int)
returns int
begin
declare  @Number_Of_Letter int 
SELECT    @Number_Of_Letter= COUNT(*)  
FROM         Letter INNER JOIN
                      RelatedSecretariats ON Letter.ToOrgID = RelatedSecretariats.DestinationOrgID_inSource
WHERE     ((RelatedSecretariats.RelatedSecretariatID = @RelatedSecretariatID) AND Letter.SendStatusID=2 and letterformat=1)


set @Number_Of_Letter=isnull(@Number_Of_Letter,0)
return(@Number_Of_Letter)
end


GO


CREATE FUNCTION has_Page(@LetterID int)
RETURNS bit AS  
BEGIN 
declare @res bit
if exists(
SELECT     PageNumber
FROM         LetterData
WHERE     LetterID=@LetterID and extention in (1,2))
set @res=1
else
set @res=0
return(@res)

END

GO

create FUNCTION has_WordPage(@LetterID int)
RETURNS bit AS  
BEGIN 
declare @res bit

if exists(
SELECT     PageNumber
FROM         LetterData
WHERE     LetterID=@LetterID and extention=3)
set @res=1
else
set @res=0
return(@res)

END


 
GO



CREATE FUNCTION has_file(@LetterID int)
RETURNS bit AS  
BEGIN 
declare @res bit

if exists(
SELECT     LetterDataID
FROM         LetterData
WHERE     LetterID=@LetterID and extention>3)
set @res=1
else
set @res=0
return(@res)

END


 
GO





create FUNCTION has_tifPage(@LetterID int)
RETURNS bit AS
BEGIN 
declare @res bit

if exists(
SELECT     PageNumber
FROM         LetterData
WHERE     LetterID=@LetterID and extention=2)
set @res=1
else
set @res=0
return(@res)

END

 


GO





CREATE FUNCTION isLike(@fieldType varchar(50))
RETURNS  bit AS  
BEGIN 
 return case when @fieldType in ('float','int','bit','money','bigint','datetime') then 0 else 1 end
END



GO








CREATE FUNCTION newIndicatorid(@letter_type int,@LetterFormat int,@myear int,@SecretariatID int)
RETURNS int AS  
BEGIN
declare @RecivedInd int ,@SentInd  int,@innerind int,@newIndicatorid int

Select @RecivedInd=isnull(max(indicatorID),0)+1 from Letter where myear=@myear and LetterFormat=@LetterFormat
 and SecretariatID=@SecretariatID and letter_type=1 

Select @SentInd=isnull(max(indicatorID),0)+1 from Letter where myear=@myear and LetterFormat=@LetterFormat
 and SecretariatID=@SecretariatID and letter_type=2 


 Select @innerind=isnull(max(indicatorID),0)+1 from Letter where myear=@myear and LetterFormat=@LetterFormat
 and SecretariatID=@SecretariatID and letter_type=3

  if @RecivedInd<dbo.GetSystemValue(3)
    set  @RecivedInd=dbo.GetSystemValue(3)


  if @SentInd<dbo.GetSystemValue(3) 
    set  @SentInd=dbo.GetSystemValue(3)

  if @innerind<dbo.GetSystemValue(3) 
    set  @innerind=dbo.GetSystemValue(3)


if @letter_type=3 
  return(@innerind)
  

 if dbo.GetSystemValue(5)=0
  begin
     if @SentInd>@RecivedInd 
        set @newIndicatorid=@SentInd
       else
        set @newIndicatorid=@RecivedInd

  end

 if dbo.GetSystemValue(5)=1
   begin
    if @letter_type=1 
     set @newIndicatorid=@RecivedInd
    if @letter_type=2
     set @newIndicatorid=@SentInd
   end

 if dbo.GetSystemValue(5)=2
  begin
   if @letter_type=2
      set @newIndicatorid=2*(1+(@SentInd-1)/2)

   if @letter_type=1
      set @newIndicatorid=2*(1+(@RecivedInd-1)/2)+1
  end

 if dbo.GetSystemValue(5)=3
  begin
   if @letter_type=1
      set @newIndicatorid=2*(1+(@RecivedInd-1)/2)

   if @letter_type=2
      set @newIndicatorid=2*(1+(@SentInd -1)/2)+1
  end
return(@newIndicatorid) 
END



GO




CREATE FUNCTION pm(@time char(5))
RETURNS varchar(100) AS  
BEGIN
return(case when substring(@time,1,2)>12 then '»⁄œ «“ ŸÂ—' else 'ﬁ»· «“ ŸÂ—' end)
END


GO


------------------------------------------------------------- triggers -------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_update_FromOrganizationsUniqueID]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[tr_update_FromOrganizationsUniqueID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_update_letterUniqueID]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[tr_update_letterUniqueID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_update_LetterDataUniqueID]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[tr_update_LetterDataUniqueID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_update_LetterFieldValueUniqueID]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[tr_update_LetterFieldValueUniqueID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_update_RecommiteUniqueID]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[tr_update_RecommiteUniqueID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Update_LetterRecommites]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[Update_LetterRecommites]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_update_RecommiteDataUniqueID]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[tr_update_RecommiteDataUniqueID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[user_ins]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[user_ins]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Delete_Users]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[Delete_Users]
GO

GO

CREATE TRIGGER Update_LetterRecommites ON dbo.ReCommites 
FOR INSERT, UPDATE, DELETE
AS
declare @Letterid int,@actionTypeID tinyint ,@Paraph nvarchar(500)


SELECT    @letterid=LetterID  ,@actionTypeID=actionTypeID
FROM         inserted

if @letterid is null
SELECT    @letterid=LetterID
FROM        deleted

select top 1 @paraph=isnull(Paraph,'') 
from Recommites
where letterid=@Letterid
order by recommitedate desc ,recommiteid desc 


UPDATE    Letter
SET    LetterRecommites =CAST(dbo.Recommites_by_indicator(LetterID)+'
¬Œ—Ì‰ Å«—«›: '+@paraph AS NVARCHAR(500))
 ,latestActionTypeid=@actionTypeID
where Letterid=@letterid





GO

CREATE TRIGGER [user_ins] ON dbo.Users
FOR INSERT
AS
set nocount on
declare  @ui int,@defSec int 
select @ui=id,@defSec= DefualtSecretariatID from inserted


delete from settings
where userid=@ui


insert into settings
SELECT @ui, VariableId, Value, description
FROM Settings
where userid=0

delete
FROM         UserTemplateGroup
where userid=@ui
insert into     UserTemplateGroup
select @ui,TemplateGroupID
from TemplateGroup



delete
FROM         UserSecretariats
where userid=@ui
insert into     UserSecretariats
values(@ui,@defSec)


delete
FROM         UserExtention
where userid=@ui

insert into     UserExtention
(userid,extentionid)

select @ui,extentionid
from extention

if not exists (select * from ArchiveFolder where userid=@ui)
 INSERT INTO ArchiveFolder ( ParentFolderID , Title , UserID) values( 0 ,'»«Ìê«‰Ì' ,@ui)
set nocount off



GO


CREATE TRIGGER [Delete_Users] ON dbo.Users
FOR  DELETE
AS
set nocount on
declare  @ui int
select @ui=id from deleted
if @ui<>0
delete from settings
where userid=@ui

delete
FROM         UserSecretariats
where userid=@ui


delete
FROM         UserTemplateGroup
where userid=@ui

delete
FROM         UserExtention
where userid=@ui
GO

-----------------------------------------------------------------------  Stored Procedure   ------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------



if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Report_UserLog]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Report_UserLog]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Check_duplicate_UserName]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Check_duplicate_UserName]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Duplicate_UserShortCut]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Duplicate_UserShortCut]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Recommite_DeadLine]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Recommite_DeadLine]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Folder_hasRecommite]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Folder_hasRecommite]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_FieldAccess_by_TableID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_FieldAccess_by_TableID]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[has_PDF]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[has_PDF]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_FieldValue_by_LetterID_FieldID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_FieldValue_by_LetterID_FieldID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_Fields_by_TableID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_Fields_by_TableID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_UserSign]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_UserSign]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_FieldAccess_by_TableID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_FieldAccess_by_TableID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_FieldAccess]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_FieldAccess]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Web_Access]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Web_Access]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_ArchiveRecommite]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_ArchiveRecommite]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_GetLetterArchiveHistory]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_GetLetterArchiveHistory]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_GetLetterAttachment]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_GetLetterAttachment]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_GetRecommiteById]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_GetRecommiteById]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_Get_LetterData_by_LetterDataID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_Get_LetterData_by_LetterDataID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_Insert_LetterData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_Insert_LetterData]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_ProceedRecommite]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_ProceedRecommite]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_Select_LetterReCommite]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_Select_LetterReCommite]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_insert_AnswerLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_insert_AnswerLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_insert_DraftLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_insert_DraftLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_insert_NewReCommite]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_insert_NewReCommite]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_insert_ReceivedLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_insert_ReceivedLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_insert_innerLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_insert_innerLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[web_insert_sentLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[web_insert_sentLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_AlternativeInfo_ByUserID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_AlternativeInfo_ByUserID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_UserOrgid]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_UserOrgid]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_delphi_proceByName]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_delphi_proceByName]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Next_page]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Next_page]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Move_ParaphTemplate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Move_ParaphTemplate]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Insert_ParaphTemplate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Insert_ParaphTemplate]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SELECT_ParaphTemplate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SELECT_ParaphTemplate]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Update_ParaphTemplate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Update_ParaphTemplate]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_ParaphTemplate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_ParaphTemplate]
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Report_Scan]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Report_Scan]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_letter_details]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_letter_details]

GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_DatabaseName_By_Year]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_DatabaseName_By_Year]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_DraftReceivedLetter_count]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_DraftReceivedLetter_count]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_FollowUP_Count]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_FollowUP_Count]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_UserTable]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_UserTable]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LetterAction_By_LetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LetterAction_By_LetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LifeTip_byUserid]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LifeTip_byUserid]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_FolllowUp_ByLetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_FolllowUp_ByLetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_FollowUP_By_Date]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_FollowUP_By_Date]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_recommite_report]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_recommite_report]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_recommite_statistic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_recommite_statistic]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_FollowUp_ByStart]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_FollowUp_ByStart]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_letterHistory_by_LetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_letterHistory_by_LetterID]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SendLetter_To_Other_sec]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SendLetter_To_Other_sec]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetRecommiteById]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[GetRecommiteById]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LetterAttachment]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LetterAttachment]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LetterdataExtention]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LetterdataExtention]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ArchivePlaces]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_ArchivePlaces]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_Letter_By_UserMemo]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_Letter_By_UserMemo]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_UserMessageCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_UserMessageCount]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_NewOrgCode]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_NewOrgCode]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_Subject]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_Subject]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[select_LetterSubject]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[select_LetterSubject]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_delphi_makeField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_delphi_makeField]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_delphi_makeTable]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_delphi_makeTable]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_delphi_makeproce]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_delphi_makeproce]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_delphi_proceByName]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_delphi_proceByName]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_delphi_procecreate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_delphi_procecreate]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GetLetterWordText]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_GetLetterWordText]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[testt]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[testt]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DeleteFulltextLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[DeleteFulltextLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_backupDb]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_backupDb]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Activate_Letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Activate_Letter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Activate_Recommite]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Activate_Recommite]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AnswerLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[AnswerLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AnswerNote]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[AnswerNote]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Delete_All_Secretariats_Of_User]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Delete_All_Secretariats_Of_User]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Delete_All_TemplateGroup_Of_User]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Delete_All_TemplateGroup_Of_User]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Delete_Exported_LetterData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Delete_Exported_LetterData]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Delete_Table]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Delete_Table]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Deleted_to_Letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Deleted_to_Letter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Draft_to_SentLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Draft_to_SentLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Export_LetterData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Export_LetterData]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Folder_hasChild]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Folder_hasChild]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Folder_hasLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Folder_hasLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetLetterTemplate_HeaderID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[GetLetterTemplate_HeaderID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[GetList]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetUserLogout_status]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[GetUserLogout_status]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_ActiveUser]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_ActiveUser]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_All_Letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_All_Letter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_FieldValues_by_LetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_FieldValues_by_LetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_FromOrganizationsID_ByCode]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_FromOrganizationsID_ByCode]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_FromOrganizations_ByCode]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_FromOrganizations_ByCode]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LastUserId]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LastUserId]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LetterAbstract]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LetterAbstract]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LetterDataIDs]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LetterDataIDs]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LetterData_by_LetterDataID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LetterData_by_LetterDataID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LetterData_by_LetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LetterData_by_LetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LetterJpgFile]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LetterJpgFile]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LetterTifFile]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LetterTifFile]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LetterWordFile]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LetterWordFile]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_Letter_PDF]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_Letter_PDF]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_RecommiteJpgFile]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_RecommiteJpgFile]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_Related_Letters]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_Related_Letters]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_SecretariatID_ByUniversalCode]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_SecretariatID_ByUniversalCode]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_UserSecretariat_Tree]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_UserSecretariat_Tree]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_innerLetterMemo]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_innerLetterMemo]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_sys_AppMessage]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_sys_AppMessage]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_tmp_LetterDataIDs]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_tmp_LetterDataIDs]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Import_LetterData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Import_LetterData]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Make_FieldValues_by_LetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Make_FieldValues_by_LetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NewRecommiteID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[NewRecommiteID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NextTag]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[NextTag]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NumberOfLetter_By_SecID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[NumberOfLetter_By_SecID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NumberOfTemplate_By_TemplateGroupID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[NumberOfTemplate_By_TemplateGroupID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Org_hasChild]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Org_hasChild]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Org_is_Secretariat]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Org_is_Secretariat]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Recommite_Report]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Recommite_Report]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Recommite_has_JpgFile]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Recommite_has_JpgFile]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Report_UserTable]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Report_UserTable]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SaveAs_Accesses]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SaveAs_Accesses]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SelectInfo]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SelectInfo]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SelectLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SelectLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_ExactCopy]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_ExactCopy]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_LetterReCommite]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_LetterReCommite]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Select_recommites_byLetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Select_recommites_byLetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_LetterDataID_By_UniqueID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_LetterDataID_By_UniqueID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_LetterData_By_LetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_LetterData_By_LetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_LetterFieldValueID_By_UniqueID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_LetterFieldValueID_By_UniqueID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_LetterFieldValue_By_LetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_LetterFieldValue_By_LetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_Letter_By_LetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_Letter_By_LetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_Letterdata_By_LetterDataID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_Letterdata_By_LetterDataID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_Letterid_By_UniqueID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_Letterid_By_UniqueID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_OrgID_By_UniqueID_and_Title]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_OrgID_By_UniqueID_and_Title]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_RecommiteID_By_UniqueID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_RecommiteID_By_UniqueID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_Recommites_By_LetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_Recommites_By_LetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_SentLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_SentLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Get_ShareLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Get_ShareLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Insert_SentLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Insert_SentLetter]
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_Sent_RelatedSecs]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_Sent_RelatedSecs]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_insert_LetterFieldValue]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_insert_LetterFieldValue]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Transfer_insert_ReCommites]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Transfer_insert_ReCommites]
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Trunsfer_update_Letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Trunsfer_update_Letter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Trunsfer_update_LetterFieldValue]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Trunsfer_update_LetterFieldValue]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Trunsfer_update_ReCommites]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Trunsfer_update_ReCommites]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Update_all_recommites]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Update_all_recommites]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[UserChange_pass]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[UserChange_pass]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[UserLog_Report]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[UserLog_Report]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Ysp_create_Temp_Database]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Ysp_create_Temp_Database]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_Accesses]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_Accesses]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_Actions_ByFormID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_Actions_ByFormID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_ArchiveFolder]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_ArchiveFolder]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_Extention]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_Extention]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_Letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_Letter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_LetterArchiveFolder]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_LetterArchiveFolder]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_LetterData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_LetterData]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_LetterWord]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_LetterWord]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_ReCommites]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_ReCommites]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_letterImage]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_letterImage]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_ArchiveFolder_byUserID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_ArchiveFolder_byUserID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_ArchiveFolder_byUserID_and_Letterid]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_ArchiveFolder_byUserID_and_Letterid]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_ArchiveFolder_byUserID_and_Place]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_ArchiveFolder_byUserID_and_Place]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_ArchiveFolder_byUserID_and_Title]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_ArchiveFolder_byUserID_and_Title]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_DayID_InWeek]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_DayID_InWeek]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_DestinationOrgID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_DestinationOrgID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_FromOrganizationsTitle_byID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_FromOrganizationsTitle_byID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_InnerOrganizations]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_InnerOrganizations]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_LastIndicatorID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_LastIndicatorID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_LetterID_ByInCommingNo]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_LetterID_ByInCommingNo]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_LetterID_ByIndicatorid]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_LetterID_ByIndicatorid]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_LetterID_ByRetroActionNo]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_LetterID_ByRetroActionNo]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_LetterMemo_ByID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_LetterMemo_ByID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_Letter_ByIndicator]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_Letter_ByIndicator]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_MaxPage_ByLetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_MaxPage_ByLetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_MaxReferenceDataID_By_TableID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_MaxReferenceDataID_By_TableID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_NewOrgID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_NewOrgID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_NowTime]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_NowTime]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_Nowdate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_Nowdate]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_OrgPreCodeByID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_OrgPreCodeByID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_OrgTitleByID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_OrgTitleByID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_ReferenceTable]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_ReferenceTable]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_ReferenceTableData_by_tableID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_ReferenceTableData_by_tableID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_RelatedSecretariats]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_RelatedSecretariats]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_UserExtention_by_UserID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_UserExtention_by_UserID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_indicatorID_BySentLetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_indicatorID_BySentLetterID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_userTable]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_userTable]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_userfields_by_tableID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_userfields_by_tableID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[hassame_orgtitle]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[hassame_orgtitle]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insertReCommites_autoID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insertReCommites_autoID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_Actions]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_Actions]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_All_ReCommites]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_All_ReCommites]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_ArchiveFolder]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_ArchiveFolder]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_Extention]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_Extention]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_Letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_Letter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_LetterArchiveFolder]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_LetterArchiveFolder]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_LetterData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_LetterData]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_LetterText]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_LetterText]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_Letter_all]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_Letter_all]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_ReCommites]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_ReCommites]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_ReciveLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_ReciveLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_ToOrganizations]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_ToOrganizations]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_UserLog]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_UserLog]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_UserLoginLogout]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_UserLoginLogout]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_newActionsAccess]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_newActionsAccess]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[letterContainText]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[letterContainText]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[min_page]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[min_page]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[org_hasLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[org_hasLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[selectAddedInfo]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[selectAddedInfo]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[select_CiticalLetterFields]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[select_CiticalLetterFields]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[select_Letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[select_Letter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[select_ReceivedLetters]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[select_ReceivedLetters]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[select_fromorganization]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[select_fromorganization]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[select_sentLetters]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[select_sentLetters]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[select_userLoginLogout]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[select_userLoginLogout]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[shrink_Files]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[shrink_Files]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Add_GroupRecommite]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_Add_GroupRecommite]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_CompleteFieldBook]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_CompleteFieldBook]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DelayedLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_DelayedLetter]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_FieldByTableCode]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_FieldByTableCode]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GetFromHelp]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_GetFromHelp]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_GetTermCode]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_GetTermCode]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Letter_Numbers]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_Letter_Numbers]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Recommites_Number]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_Recommites_Number]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_ReindexTables]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_ReindexTables]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_SetForeinKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_SetForeinKey]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_Statistic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_Statistic]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_board]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_board]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_checkusernotes]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_checkusernotes]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_dailyRep]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_dailyRep]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_delphi_Proc]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_delphi_Proc]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_distinctDate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_distinctDate]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_duplicateOrg]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_duplicateOrg]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_inbox]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_inbox]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_makeRecommited]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_makeRecommited]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[update_ArchiveFolder]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[update_ArchiveFolder]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[update_FromOrganizations_Title]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[update_FromOrganizations_Title]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[update_LetterText]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[update_LetterText]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[update_Letter_Finalized]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[update_Letter_Finalized]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[update_Letter_Indicator]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[update_Letter_Indicator]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[update_ReCommites_proceed]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[update_ReCommites_proceed]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[update_ReCommites_viewDate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[update_ReCommites_viewDate]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[update_UserLoginLogout]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[update_UserLoginLogout]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[update_letter_sendstatusID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[update_letter_sendstatusID]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ysp_Backup]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[ysp_Backup]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ysp_DELETE_Temp_Database]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[ysp_DELETE_Temp_Database]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ysp_exists_Temp_Database]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[ysp_exists_Temp_Database]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ysp_shrink]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[ysp_shrink]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Update_Archived_letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Update_Archived_letter]
GO

Create PROCEDURE [dbo].[Report_UserLog]
@Secretariatid int,
@myear tinyint,
@where nvarchar(2000)
as 
declare @sqlCommand nvarchar(4000)

set @sqlCommand='
SELECT     top 1000
 ApplicationForms.Title AS FormTitle,
 Users.Title AS UserTitle,
 Actions.Title AS ActionTitle,
 Letter.IndicatorID,
 LetterTypes.Title AS LetterType,
 Letter.IncommingNO,
 Letter.Incommingdate,
 Letter.RegistrationDate,
 Letter.Memo,
 dbo.Shamsi(UserLog.Time1) AS Date,
 right(cast(UserLog.Time1 as varchar(50)),7) as Time

FROM       UserLog
INNER JOIN Users            ON Users.Id = UserLog.UserID
INNER JOIN Actions          ON UserLog.ActionID = Actions.ID 
INNER JOIN ApplicationForms ON ApplicationForms.ID = Actions.FormTag
LEFT  JOIN Letter           ON UserLog.LetterID = Letter.LetterID
LEFT  JOIN LetterTypes      ON Letter.Letter_Type = LetterTypes.ID '


set @where=isnull(ltrim(rtrim(@where)),'')
if @where <>'' set @where =' and '+@where

if @Secretariatid<>0
  set @where=@where+' and (Secretariatid = '+Cast(@Secretariatid as varchar(5))+')'

if @Myear<>0
  set @where=@where+' and (myear = '+Cast(@myear as varchar(5))+')'

if substring(@where,1,4)=' and' set @where=' where '+substring(@where,5,4000)

 set @sqlCommand=@sqlCommand+@where + ' order by time1  '
exec(@sqlCommand)


go

Create procedure [dbo].[Check_duplicate_UserName]
@UserName nvarchar(50),@result bit  output
as
if exists (SELECT *
  FROM  Users where ltrim(rtrim(username))=ltrim(rtrim(@UserName)))
set @result=1
else
set @result=0
GO

CREATE  FUNCTION Recommite_DeadLine(@RecommiteID int,@today char(10))
RETURNS int AS
BEGIN
declare @letterid int, @deadlinedate char(10),@parentID int,@proceeded bit

select @parentID=id ,@letterid=letterid,@proceeded=proceeded,@deadlinedate=deadlinedate from recommites where  RecommiteID=@RecommiteID

if @proceeded=1
select @deadlinedate=min(deadlinedate)
from recommites
where letterid=@LetterID and Parentid=@ParentID and proceeded=0

if isnull(@deadlinedate,'')='' return(null)

return(dbo.ShamsiDatediff(@today,@deadlinedate))
END

GO

Create  procedure [dbo].[Folder_hasRecommite](@Folderid int,@hasLetter bit output)
as
if exists (SELECT     *
FROM         LetterArchiveFolder
where  ArchiveFolderID = @Folderid) set @hasLetter=1
else
set @hasLetter=0
GO

Create Proc [has_PDF]
@LetterID int,@result bit output
AS

if exists(
SELECT     PageNumber
FROM         LetterData
WHERE     LetterID=@LetterID and extention=4)
set @result=1
else
set @result=0
GO

create  procedure [dbo].[Get_FieldValue_by_LetterID_FieldID]
@LetterID int,@FieldID int ,@fieldValue nvarchar(2000) output
as
SELECT  @fieldValue=LetterFieldValue.FieldValue
FROM         LetterFieldValue
WHERE letterid=@LetterID
 and FieldID=@FieldID

set @fieldValue=isnull(@fieldValue,'')


GO

create Procedure [dbo].[Select_Fields_by_TableID]
@LetterID int
as

SELECT     ID,Description
FROM      Fields
WHERE   TableID in ( SELECT UserTableID2  FROM   Letter WHERE LetterID =@LetterID)
or     TableID in ( SELECT UserTableID   FROM   Letter WHERE LetterID =@LetterID)

GO

CREATE Proc Select_UserSign
@UserID int
as

SELECT [UserID]
      ,UserSign
  FROM userSign
where UserID=@UserID
GO


Create Procedure Select_FieldAccess_by_TableID
@UserID int ,@TableID int
as

SELECT     *
FROM         FieldAccess
WHERE     (UserID = @UserID) AND (FieldID in ( SELECT  ID FROM   Fields WHERE TableID =@TableID))


GO
CREATE procedure [dbo].[insert_FieldAccess]
as

INSERT INTO FieldAccess ([FieldID] ,[UserID] ,[AccessTypeID])
SELECT fields.id,users.id,3
FROM Fields,Users
where tableid in (SELECT TableID FROM Tables WHERE TableType = 3)
and str(fields.id)+'m'+str(users.id) not in (select str(fieldid)+'m'+str(userid) from FieldAccess)

GO

CREATE Procedure [dbo].[Web_Access](@userid int,@Result varchar(100) output)
as
set @result=''
SELECT    @result=@result+case when hasaccess=1 then
case ActionID
when 1001 then 'Incomming'
when 1002 then 'Outgoing'
when 1026 then 'Draft'
when 1060 then 'Inner'
when 1058 then 'Drop_Attach'
end+';'
else '' end
FROM         ActionsAccess INNER JOIN
                      Users ON ActionsAccess.AccessID = Users.AccessID
WHERE     (Users.Id = @userid) AND (ActionsAccess.ActionID IN (1001, 1002, 1026, 1058, 1060))
Go



CREATE PROCEDURE [dbo].[web_ArchiveRecommite]
	(@RecommiteID 	[int],
	 @ArchiveFolderID 	[int],
	 @ArchiveDate 	[char](10),
	 @Page 	[int],
	 @ArchiveNotes 	[nvarchar](50),
	 @StaffMemo 	[nvarchar](255),
	 @LetterArchiveID 	[int] output)

AS

declare @LetterId int

select @LetterId=LetterId from Recommites where RecommiteId=@RecommiteId

INSERT INTO [dbo].[LetterArchiveFolder]
	 (
	 [ArchiveFolderID],
	 [LetterID],
	 [ArchiveDate],
	 [Page],
	 [ArchiveNotes])

VALUES
	(
	 @ArchiveFolderID,
	 @LetterID,
	 @ArchiveDate,
	 @Page,
	 @ArchiveNotes)

Update Recommites Set Proceeded=1, staffMemo=@StaffMemo where RecommiteId=@RecommiteId

set @LetterArchiveID=@@identity



GO

CREATE PROCEDURE [dbo].[web_GetLetterArchiveHistory]
(
	@letterId int,
	@userId int
)
AS

SELECT     dbo.LetterArchiveFolder.ArchiveDate, dbo.ArchiveFolder.*
FROM         dbo.ArchiveFolder INNER JOIN
                      dbo.LetterArchiveFolder ON dbo.ArchiveFolder.FolderID = dbo.LetterArchiveFolder.ArchiveFolderID
Where LetterId = @letterId and ArchiveFolder.UserId=@userId

GO

create Procedure [dbo].[web_GetLetterAttachment]
@letterID int 
as

SELECT     LetterData.*, Extention.ExtentionTitle, Extention.Extention
FROM       LetterData 
INNER JOIN  Extention ON LetterData.extention = Extention.ExtentionID
WHERE LetterID=@LetterID






GO

CREATE PROCEDURE [dbo].[web_GetRecommiteById]
(@recommiteId int )
AS

SELECT R.*,f.title+' - '+r.OrgStaff RecommiterTitle,IsInnerOrg

FROM ReCommites R  

inner join FromOrganizations f on f.ID=r.OrgID

Where r.RecommiteId=@recommiteId

GO




Create proc [dbo].[web_Get_LetterData_by_LetterDataID]
(@LetterDataID int )
as
SELECT     LetterData.*, Extention.ExtentionTitle, Extention.Extention
FROM       LetterData 
INNER JOIN  Extention ON LetterData.extention = Extention.ExtentionID
WHERE     (LetterDataID = @LetterDataID)







GO

create PROCEDURE [dbo].[web_Insert_LetterData]
	(@LetterDataID 	[int] output,
	 @LetterID 	[int],
	 @PageNumber 	[tinyint],
	 @extention 	[tinyint],
	 @description [nvarchar](200)='',
	 @image [image] = null)

AS INSERT INTO [dbo].[LetterData] 
	 (  [LetterID],
	 [PageNumber],
	 [extention],
	 [image],
	 [description]) 
 
VALUES 
	( @LetterID,
	 @PageNumber,
	 @extention,
	 @image,
	 @description)

set  @LetterDataID=@@identity




GO

CREATE PROCEDURE [dbo].[web_ProceedRecommite]
	
	(
		@recommiteId int
	)

AS
	Update Recommites Set Proceeded=1 where recommiteId=@recommiteId 
	/* SET NOCOUNT ON */


GO

CREATE PROCEDURE [dbo].[web_Select_LetterReCommite]


(@letterID 	[int],@type tinyint)  AS 

SELECT R.*,f.title+' - '+isnull(r.OrgStaff,'') orgtitle,IsInnerOrg 

FROM ReCommites R  

inner join FromOrganizations f on f.ID=r.OrgID 

where Letterid=@letterID and type=@type





GO
CREATE PROCEDURE [dbo].[web_insert_AnswerLetter]
	(
     @LetterID 	[int] output,
     @Indicator 	[int] output,
     @RecommiteId [int] output,
	 @ToOrgTitle 	nvarchar(100),
	 @Signerid 	[nvarchar](50),
	 @ClassificationID 	[tinyint],
	 @UrgencyID 	[smallint],
	 @Memo 	[nvarchar](500),
	 @UserID 	[int],
	 @RetroactionNo 	[nvarchar](50),
	 @UserMemo 	[nvarchar](255),
	 @FollowLetterNo 	[nvarchar](50),
	 @ToStaffer 	[nvarchar](50),
	 @fromstaffer 	[nvarchar](50),
	 @LetterFromOrgID int,
     @receivedLetterID int )

AS 
declare @ToOrgID int,@IndicatorID int ,@FromOrgID 	int,  @MYear tinyint,@SecretariatID tinyint,
        @RegistrationDate 	[char](10),	@RegistrationTime 	[varchar](5)


if not exists (select * from fromorganizations where replace(title,' ','')=replace(@toorgtitle,' ',''))
insert into Fromorganizations(Title,parentid,isinnerorg) values(@toorgtitle,3,0)

select top 1 @ToOrgID=Id from fromorganizations where replace(title,' ','')=replace(@toorgtitle,' ','')

select @RegistrationTime=case when datepart(hour,getdate())<10 then '0'+convert(char(1),datepart(hour,getdate()))
   else convert(char(2),datepart(hour,getdate())) end +':' + convert(char(2),datepart(minute,getdate()))

set @RegistrationDate=dbo.shamsi(getdate())

set @myear=cast (substring(@RegistrationDate,3,2) as tinyint)

SELECT     @SecretariatID=DefualtSecretariatID, @FromOrgID=FromOrgID
FROM         Users
where id=@userid

set @IndicatorID=dbo.newIndicatorid(2,2,@myear,@SecretariatID)

INSERT INTO [Letter] 
	 ( [IndicatorID],
	 [MYear],
	 [SecretariatID],
	 [Letter_Type],
	 [letterformat],
	 [FromOrgID],
	 [ToOrgID],
	 [Signerid],
	 [ClassificationID],
	 [UrgencyID],
	 [Memo],
	 [UserID],
	 [RetroactionNo],
	 [UserMemo],
	 [RegistrationDate],
	 [RegistrationTime],
	 [FollowLetterNo],
	 [ToStaffer],
	 [fromstaffer],
	 [Finalized]) 
 
VALUES 
	( 
	 @IndicatorID,
	 @MYear,
	 @SecretariatID,
	 2,--Letter_Type
	 2,--letterformat
	 @LetterFromOrgID,
	 @ToOrgID,
	 @Signerid,
	 @ClassificationID,
	 @UrgencyID,
	 @Memo,
	 @UserID,
	 @RetroactionNo,
	 @UserMemo,
	 @RegistrationDate,
	 @RegistrationTime,
	 @FollowLetterNo,
	 @ToStaffer,
	 @fromstaffer,
	 0 --Finalized
       )

select @letterid=max(letterid) from letter
select @Indicator = @IndicatorId

exec web_insert_NewReCommite @LetterID,3,0,@FromOrgID,'À»  ÅÌ‘ ‰ÊÌ” ÃÊ«» ‰«„Â',@registrationdate,@UserID,0,0,@RecommiteId output
update letter
set SentLetterID=@letterid
where letterid=@receivedLetterID


GO

CREATE PROCEDURE [dbo].[web_insert_DraftLetter]
	(@Indicator 	[int] output,
	 @LetterId int output,
	 @RecommiteId int output,
	 @ToOrgTitle 	nvarchar(100),
	 @Signerid 	[nvarchar](50),
	 @ClassificationID 	[tinyint],
	 @UrgencyID 	[smallint],
	 @Memo 	[nvarchar](500),
	 @UserID 	[int],
	 @RetroactionNo 	[nvarchar](50),
	 @UserMemo 	[nvarchar](255),
	 @FollowLetterNo 	[nvarchar](50),
	 @ToStaffer 	[nvarchar](50),
	 @fromstaffer 	[nvarchar](50))

AS 
declare @ToOrgID int,@IndicatorID int ,@FromOrgID 	int,  @MYear tinyint,@SecretariatID tinyint,
        @RegistrationDate 	[char](10),	@RegistrationTime 	[varchar](5)


if not exists (select * from fromorganizations where replace(title,' ','')=replace(@toorgtitle,' ',''))
insert into Fromorganizations(Title,parentid,isinnerorg) values(@toorgtitle,3,0)

select top 1 @ToOrgID=Id from fromorganizations where replace(title,' ','')=replace(@toorgtitle,' ','')

select @RegistrationTime=case when datepart(hour,getdate())<10 then '0'+convert(char(1),datepart(hour,getdate()))
   else convert(char(2),datepart(hour,getdate())) end +':' + convert(char(2),datepart(minute,getdate()))

set @RegistrationDate=dbo.shamsi(getdate())

set @myear=cast (substring(@RegistrationDate,3,2) as tinyint)

SELECT     @SecretariatID=DefualtSecretariatID, @FromOrgID=FromOrgID
FROM         Users
where id=@userid

set @IndicatorID=dbo.newIndicatorid(2,2,@myear,@SecretariatID)

INSERT INTO [Letter] 
	 ( [IndicatorID],
	 [MYear],
	 [SecretariatID],
	 [Letter_Type],
	 [letterformat],
	 [FromOrgID],
	 [ToOrgID],
	 [Signerid],
	 [ClassificationID],
	 [UrgencyID],
	 [Memo],
	 [UserID],
	 [RetroactionNo],
	 [UserMemo],
	 [RegistrationDate],
	 [RegistrationTime],
	 [FollowLetterNo],
	 [ToStaffer],
	 [fromstaffer],
	 [Finalized]) 
 
VALUES 
	( 
	 @IndicatorID,
	 @MYear,
	 @SecretariatID,
	 2,--Letter_Type
	 2,--letterformat
	 @FromOrgID,
	 @ToOrgID,
	 @Signerid,
	 @ClassificationID,
	 @UrgencyID,
	 @Memo,
	 @UserID,
	 @RetroactionNo,
	 @UserMemo,
	 @RegistrationDate,
	 @RegistrationTime,
	 @FollowLetterNo,
	 @ToStaffer,
	 @fromstaffer,
	 0 --Finalized
       )

select @letterid=max(letterid) from letter
select @Indicator = @IndicatorID

exec web_insert_NewReCommite @LetterID,3,0,@FromOrgID,'À»  ‰«„Â ÅÌ‘ ‰ÊÌ”',@registrationdate,@UserID,0,0,@RecommiteId output
							 
select @RecommiteId

GO

CREATE PROCEDURE [dbo].[web_insert_NewReCommite]
	(@LetterID 	[int],
	 @Type 	[tinyint],
	 @ParentId 	[smallint],
	 @OrgID 	[int],
	 @Paraph 	[nvarchar](500),
	 @RecommiteDate 	[varchar](10),
	 @UserID 	[tinyint],
	 @IsCopy 	[bit],
	 @Proceeded 	[bit],
	 @RecommiteId [int] output)
AS
declare @OrgStaff nvarchar(50),@NewID int

select top 1 @OrgStaff=ResponsibleStaffer       

from dbo.FromOrganizations 

WHERE             id         = @OrgID
SELECT     @NewID=ISNULL(MAX(ID), 0) + 1   FROM ReCommites WHERE LetterID=@letterID and type=@type
INSERT INTO [dbo].[ReCommites] 
             (
             [LetterID],
             [ID],
             [Type],
             [ParentId],
             [OrgID],
             [Paraph],
             [RecommiteDate],
             [UserID],
             [IsCopy],
             [Proceeded],
			 OrgStaff) 
VALUES
            ( 
             @LetterID,
             @NewID,
             @Type,
             @ParentId,
             @OrgID,
             @Paraph,
             @RecommiteDate,
             @UserID,
             @IsCopy,
             @Proceeded,
			 @OrgStaff )

select @RecommiteId = @@identity


GO

Create PROCEDURE [dbo].[web_insert_ReceivedLetter]
	(@Indicator 	[int] output,
	 @LetterID 	[int] output,
	 @RecommiteId int output,
	 @ToOrgTitle 	nvarchar(100),
	 @Signerid 	[nvarchar](50),
	 @ClassificationID 	[tinyint],
	 @UrgencyID 	[smallint],
	 @Memo 	[nvarchar](500),
	 @UserID 	[int],
	 @RetroactionNo 	[nvarchar](50),
	 @UserMemo 	[nvarchar](255),
	 @FollowLetterNo 	[nvarchar](50),
	 @ToStaffer 	[nvarchar](50),
	 @fromstaffer 	[nvarchar](50),
	 @IncommingNO 	[nvarchar](50),
	 @Incommingdate 	[nvarchar](10),
	 @CenterNo 	[nvarchar](50),
	 @CenterDate 	[char](10),
	 @FromOrgID 	[int],
	 @NumberOfPage 	[tinyint],
	 @ReceiveTypeID 	[tinyint])
AS 
declare @ToOrgID int,@IndicatorID int ,@UserFromOrgID 	int,  @MYear tinyint,@SecretariatID tinyint,
        @RegistrationDate 	[char](10),	@RegistrationTime 	[varchar](5)


if not exists (select * from fromorganizations where replace(title,' ','')=replace(@toorgtitle,' ',''))
insert into Fromorganizations(Title,parentid,isinnerorg) values(@toorgtitle,3,0)

select top 1 @ToOrgID=Id from fromorganizations where replace(title,' ','')=replace(@toorgtitle,' ','')

select @RegistrationTime=case when datepart(hour,getdate())<10 then '0'+convert(char(1),datepart(hour,getdate()))
   else convert(char(2),datepart(hour,getdate())) end +':' + convert(char(2),datepart(minute,getdate()))

set @RegistrationDate=dbo.shamsi(getdate())

set @myear=cast (substring(@RegistrationDate,3,2) as tinyint)

SELECT     @SecretariatID=DefualtSecretariatID, @UserFromOrgID=FromOrgID
FROM         Users
where id=@userid

set @IndicatorID=dbo.newIndicatorid(2,2,@myear,@SecretariatID)

INSERT INTO [Letter] 
	 ( [IndicatorID],	 [MYear],	 [SecretariatID],	 [Letter_Type],	 [letterformat],	 [FromOrgID],	 [ToOrgID],
	 [Signerid],	 [ClassificationID],	 [UrgencyID],	 [Memo],	 [UserID],	 [RetroactionNo],	 [UserMemo],
	 [RegistrationDate],	 [RegistrationTime],	 [FollowLetterNo],	 [ToStaffer],	 [fromstaffer],	 [Finalized],IncommingNO ,
     Incommingdate,CenterNo,CenterDate,NumberOfPage ,ReceiveTypeID) 
 
VALUES 
	( 
	 @IndicatorID,	 @MYear,	 @SecretariatID,
	 1,--Letter_Type
	 1,--letterformat
	 @FromOrgID,
	 @ToOrgID,
	 @Signerid,
	 @ClassificationID,
	 @UrgencyID,
	 @Memo,
	 @UserID,
	 @RetroactionNo,
	 @UserMemo,
	 @RegistrationDate,
	 @RegistrationTime,
	 @FollowLetterNo,
	 @ToStaffer,
	 @fromstaffer,
	 0, --Finalized
      @IncommingNO , @Incommingdate,@CenterNo,@CenterDate ,@NumberOfPage ,@ReceiveTypeID)

select @letterid=max(letterid) from letter

exec web_insert_NewReCommite @LetterID,3,0,@FromOrgID,'À»  ‰«„Â',@registrationdate,@UserID,0,0,@RecommiteId output

select @Indicator = @IndicatorID

select @RecommiteId


GO


CREATE PROCEDURE [dbo].[web_insert_innerLetter]
	(@LetterID 	[int] output,
	 @Memo 	[nvarchar](500),
	 @UserID 	[int],
	 @UserMemo 	[nvarchar](255))

AS 
declare @IndicatorID int ,@FromOrgID 	int,  @MYear tinyint,@SecretariatID tinyint,
        @RegistrationDate 	[char](10),	@RegistrationTime 	[varchar](5)



select @RegistrationTime=case when datepart(hour,getdate())<10 then '0'+convert(char(1),datepart(hour,getdate()))
   else convert(char(2),datepart(hour,getdate())) end +':' + convert(char(2),datepart(minute,getdate()))

set @RegistrationDate=dbo.shamsi(getdate())

set @myear=cast (substring(@RegistrationDate,3,2) as tinyint)

SELECT     @SecretariatID=DefualtSecretariatID, @FromOrgID=FromOrgID
FROM         Users
where id=@userid

set @IndicatorID=dbo.newIndicatorid(3,1,@myear,@SecretariatID)

INSERT INTO [Letter] 
	 ( [IndicatorID],
	 [MYear],
	 [SecretariatID],
	 [Letter_Type],
	 [letterformat],
	 [FromOrgID],
	 [ToOrgID],
	 [Memo],
	 [UserID],
	 [UserMemo],
	 [RegistrationDate],
	 [RegistrationTime],
	 [Finalized]) 
 
VALUES 
	( 
	 @IndicatorID,
	 @MYear,
	 @SecretariatID,
	 3,--Letter_Type
	 1,--letterformat
	 @FromOrgID,
	 3,--@ToOrgID,
	 @Memo,
	 @UserID,
	 @UserMemo,
	 @RegistrationDate,
	 @RegistrationTime,
	 1 --Finalized
       )

select @letterid=max(letterid) from letter

declare @recommiteId int
exec web_insert_NewReCommite @LetterID,3,0,@FromOrgID,'‰«„Â œ«Œ·Ì',@registrationdate,@UserID,0,0,@recommiteId output


GO

CREATE PROCEDURE [dbo].[web_insert_sentLetter]
	(@Indicator 	[int] output,
	 @LetterID 	[int] output,
	 @RecommiteId int output,
	 @ToOrgTitle 	nvarchar(100),
	 @Signerid 	[nvarchar](50),
	 @ClassificationID 	[tinyint],
	 @UrgencyID 	[smallint],
	 @Memo 	[nvarchar](500),
	 @UserID 	[int],
	 @RetroactionNo 	[nvarchar](50),
	 @UserMemo 	[nvarchar](255),
	 @FollowLetterNo 	[nvarchar](50),
	 @ToStaffer 	[nvarchar](50),
	 @fromstaffer 	[nvarchar](50),
	 @FromOrgID 	[int],
	 @NumberOfPage 	[tinyint],
	 @ReceiveTypeID 	[tinyint])
AS 
declare @ToOrgID int,@IndicatorID int ,@UserFromOrgID 	int,  @MYear tinyint,@SecretariatID tinyint,
        @RegistrationDate 	[char](10),	@RegistrationTime 	[varchar](5)


if not exists (select * from fromorganizations where replace(title,' ','')=replace(@toorgtitle,' ',''))
insert into Fromorganizations(Title,parentid,isinnerorg) values(@toorgtitle,3,0)

select top 1 @ToOrgID=Id from fromorganizations where replace(title,' ','')=replace(@toorgtitle,' ','')

select @RegistrationTime=case when datepart(hour,getdate())<10 then '0'+convert(char(1),datepart(hour,getdate()))
   else convert(char(2),datepart(hour,getdate())) end +':' + convert(char(2),datepart(minute,getdate()))

set @RegistrationDate=dbo.shamsi(getdate())

set @myear=cast (substring(@RegistrationDate,3,2) as tinyint)

SELECT     @SecretariatID=DefualtSecretariatID, @UserFromOrgID=FromOrgID
FROM         Users
where id=@userid

set @IndicatorID=dbo.newIndicatorid(2,2,@myear,@SecretariatID)

INSERT INTO [Letter] 
	 ( [IndicatorID],	 [MYear],	 [SecretariatID],	 [Letter_Type],	 [letterformat],	 [FromOrgID],	 [ToOrgID],
	 [Signerid],	 [ClassificationID],	 [UrgencyID],	 [Memo],	 [UserID],	 [RetroactionNo],	 [UserMemo],
	 [RegistrationDate],	 [RegistrationTime],	 [FollowLetterNo],	 [ToStaffer],	 [fromstaffer],	 [Finalized],
	 NumberOfPage ,ReceiveTypeID) 
 
VALUES 
	( 
	 @IndicatorID,	 @MYear,	 @SecretariatID,
	 2,--Letter_Type
	 1,--letterformat
	 @FromOrgID,
	 @ToOrgID,
	 @Signerid,
	 @ClassificationID,
	 @UrgencyID,
	 @Memo,
	 @UserID,
	 @RetroactionNo,
	 @UserMemo,
	 @RegistrationDate,
	 @RegistrationTime,
	 @FollowLetterNo,
	 @ToStaffer,
	 @fromstaffer,
	 0, --Finalized
     @NumberOfPage ,@ReceiveTypeID)

select @letterid=max(letterid) from letter

exec web_insert_NewReCommite @LetterID,3,0,@FromOrgID,'À»  ‰«„Â',@registrationdate,@UserID,0,0,@RecommiteId output

select @Indicator = @IndicatorID

select @RecommiteId


GO


Create Procedure [dbo].[Insert_ParaphTemplate]
@UserID int,@Title nvarchar(50),@Paraph nvarchar(500)
as
declare @OrderID tinyint

select @OrderID=max(OrderID)+1 from ParaphTemplate where UserID=@Userid

if @OrderID is null set @OrderID=1

INSERT INTO ParaphTemplate (UserID ,OrderID ,Title,Paraph)
VALUES (@UserID,@OrderID,@Title,@Paraph)

GO
Create Procedure Select_AlternativeInfo_ByUserID
@UserID int
as
SELECT [Id]
      ,[AlternativeUserID]
      ,[AlternativebeginDate]
      ,[AlternativeEndDate]
  FROM [ydabir].[dbo].[Users]
where id=@userID
GO

CREATE Procedure Select_UserOrgid
@UserID int,@today char(10)
as
create  table #Org (Orgid int,Comment nvarchar(255))
insert into #Org
SELECT  	[FromOrgID],case when id=@userid then '”„  «’·Ì' else 'Ã«‰‘Ì‰'  end
FROM [Users]
where @userID=id or (AlternativeUserID=@userid and @today between AlternativebeginDate and AlternativeEndDate )


insert into #Org
SELECT [SecondOrgID],case when id=@userid then '”„  œÊ„' else 'Ã«‰‘Ì‰'  end
FROM [Users]
where [SecondOrgID] is not null and  (@userID=id or (AlternativeUserID=@userid and @today between AlternativebeginDate and AlternativeEndDate ))

update #Org
set comment=comment+':'+title
from #Org
inner join fromorganizations on fromorganizations.id=#Org.orgid


select *
from #Org

GO

CREATE  procedure  [dbo].[sp_delphi_proceByName](@spN varchar(50) )
as

declare @ALL VARCHAR(4000),@line1 varchar(1000),@line2 varchar(4000),@id int, @count int ,@spname varchar(100),@spType varchar(50),@colname varchar(100)

  SELECT    identity(int,1,1) id, name  into #m
  FROM         sysobjects
  WHERE     (xtype = 'p') AND (status >= 0)
         and (isnull(@spn,'')='' or name like @spn)


select @count=max(id)
from #m



set @id=1

while @id<=@count
 begin
   select @spname=name from #m where id=@id
   declare spcol cursor for
    select substring(syscolumns.name,2,100),max(dbo.delphiType(systypes.name))
    FROM    syscolumns INNER JOIN
            sysobjects ON syscolumns.id = sysobjects.id INNER JOIN
            systypes ON syscolumns.xtype = systypes.xtype
    WHERE     (sysobjects.xtype = 'p') AND (sysobjects.name = @spname)
    group by substring(syscolumns.name,2,100)
    open  spcol
    fetch next from spcol into @colname,@spType
    set @line1='Procedure  Open_'+@spname+'(';
    set @line2='';


    while @@Fetch_Status=0
     begin
      if @colname='type' set @colname='_Type'
      set @line1=@line1+@colname+':'+@spType+';'
      set @line2=@line2+'ParamByName(''@'+ @colname+''').value:='+@colName+';
'
    fetch next from spcol into @colname,@spType
     end

    SET @ALL= @line1+');
'+@line1+');
  begin
  with Dm.' + @spname +',parameters do
   begin
    Close;
    ' + @LINE2+'    Open;
   end;
end;'


PRINT Replace(REPLACE(@all,';;',';'),';)',')')

  close spcol
  deallocate spcol
  set @id=@id+1
 end
select  'object '+name+': TADOStoredProc
  Connection = YeganehConnection
  CursorType = ctStatic
  ProcedureName = '''+name+'''
end','
object D'+name+': TDataSource
  DataSet = '+name+'
end'
  FROM         sysobjects
  WHERE     (xtype = 'p') AND (status >= 0)
         and (isnull(@spn,'')='' or name like @spn)



GO
Create procedure [dbo].[Next_page](@LetterID int,@CurrentPage tinyint,@Next bit ,@newPage tinyint output)
as
if @next=1
 begin

SELECT     @newPage=MIN(PageNumber)
FROM         LetterData
 WHERE     (LetterID = @LetterID and extention=1 and PageNumber>@CurrentPage)

if @newPage is null
SELECT     @newPage=MIN(PageNumber)
FROM         LetterData
 WHERE     (LetterID = @LetterID and extention=1 )

end
else
 begin

SELECT     @newPage=max(PageNumber)
FROM         LetterData
 WHERE     (LetterID = @LetterID and extention=1 and PageNumber<@CurrentPage)

if @newPage is null
SELECT     @newPage=max(PageNumber)
FROM         LetterData
 WHERE     (LetterID = @LetterID and extention=1 )

end

GO

CREATE Procedure [dbo].[Move_ParaphTemplate]
@ParaphTemplateID int,@Step smallint
as
declare @swapParaphTemplateID int,@OrderId tinyint,@Userid int


select @OrderID=Orderid,@Userid=Userid from ParaphTemplate Where ParaphTemplateID=@ParaphTemplateID


SELECT @swapParaphTemplateID=ParaphTemplateID
FROM ParaphTemplate
Where UserID=@UserID and OrderID=@OrderID+@Step

if @swapParaphTemplateID is not null
  begin
   update ParaphTemplate set OrderId=@OrderID+@Step where ParaphTemplateID=@ParaphTemplateID
   update ParaphTemplate set OrderId=@OrderID      where  ParaphTemplateID=@SwapParaphTemplateID
  end
GO
Create Procedure [dbo].[SELECT_ParaphTemplate]
@UserID int
as

SELECT *
FROM ParaphTemplate
Where Userid=@UserID
order by OrderID
GO
Create Procedure [dbo].[Update_ParaphTemplate]
@ParaphTemplateID int,@Title nvarchar(50) ,@Paraph nvarchar(500)
as

UPDATE [ydabir].[dbo].[ParaphTemplate]
   SET [Title] = @Title
      ,[Paraph] = @Paraph
 WHERE ParaphTemplateID=@ParaphTemplateID
GO

Create Procedure [dbo].[delete_ParaphTemplate]
@ParaphTemplateID int
as
declare @OrderId tinyint,@Userid int


select @OrderID=Orderid,@Userid=Userid from ParaphTemplate Where ParaphTemplateID=@ParaphTemplateID

delete  ParaphTemplate Where ParaphTemplateID=@ParaphTemplateID


   update ParaphTemplate set OrderId=OrderID-1      where  Userid=@Userid and Orderid>@orderid

GO

create  Procedure Report_Scan
@where nvarchar(1000),@Extention tinyint
as
set @extention=2
declare @sqlCommand nvarchar(4000)
set @sqlCommand='select
  LetterFormats.Title AS FormatTitle, LetterTypes.Title LetterTypeTitle, Count(*) All_cnt ,sum(case when ld.letterid is null then 1 else 0 end  ) Scanned
from Letter as L
  left join (Select distinct letterid from letterdata where extention in (1,2)) ld on ld.letterid=l.letterid
  Left JOIN LetterFormats ON L.letterformat = LetterFormats.Code
 left JOIN LetterTypes ON l.Letter_type = LetterTypes.ID'
set @where=isnull(ltrim(rtrim(@where)),'')
if @where<>''
 set @sqlCommand=@sqlCommand+' where '+@where
 set @sqlCommand=@sqlCommand+' group by LetterFormats.Title, LetterTypes.Title '

exec sp_executesql @sqlCommand
GO
CREATE Procedure Select_letter_details
@letterid int ,
@IndicatorID varchar(10) output ,
@RegistrationDate char(10) output,
@Memo nvarchar(500) output,
@LetterRecommites nvarchar(500) output,
@latestParaph nvarchar(500) output

as
Select
@IndicatorID=cast (IndicatorID as varchar(10)),
@RegistrationDate=RegistrationDate,
@Memo=memo,
@LetterRecommites=LetterRecommites
from Letter
where letterid=@letterid

Select top 1 @latestParaph=isnull(Paraph,'')
from Recommites
where letterid=@letterid order by id desc
GO

CREATE Procedure Get_DatabaseName_By_Year
@myear tinyint,@dbName varchar(50) output
as
set @dbName='Nothing'
if @myear>=86   set @dbName='ydabir' else  set @dbName='ahwaz'

GO

CREATE PROCEDURE [dbo].[Get_DraftReceivedLetter_count]
@Myear tinyint,@secretariatid int ,@count int output

AS
select @count=count(*)
from letter
where Myear=@Myear and letter_type=1 and letterformat=2 and secretariatid=@secretariatid

set @count=isnull(@Count,0)
GO

CREATE Procedure [dbo].[delete_UserTable]
 @TableID int
as


UPDATE    Letter
SET      UserTableID = NULL
from letter
inner join  LetterFieldValue on LetterFieldValue.letterid=letter.LetterID
inner join  Fields on Fields.id=LetterFieldValue.FieldID
WHERE TableID = @tableid

delete    LetterFieldValue
from LetterFieldValue
inner join  Fields on Fields.id=LetterFieldValue.FieldID
WHERE TableID = @tableid



DELETE FROM Fields
WHERE     (TableID = @tableid)


delete tables
WHERE     (TableID = @tableid)
GO

CREATE PROCEDURE Get_LetterAction_By_LetterID
	@LetterID int
AS
BEGIN
	SET NOCOUNT ON;
SELECT     LetterID, LatestActionTypeID, LatestActionReason
FROM         Letter
WHERE     (LetterID = @LetterID)
END

GO

CREATE Procedure Get_LifeTip_byUserid(@Userid int,@lifeTip nvarchar(255) output)

as
declare @DayofYear int,@dw int, @n int,@u int,@j int,@k int,@lifeTipID int


exec get_DayID_InWeek @dw output
if @dw=6
 begin
  set @lifeTip=''
  return
 end


set @DayofYear=6*(datepart(dy,getdate())/7)+@dw

select @n=count(*) from LifeTips
select @u=10--count(*) from users
select @j=count(*) from users where id<=@userid

set @k=@n/@u
set @lifeTipID= (((@DayofYear+@j)%(@k+1))*@u+@DayofYear%@u+1)%@n+1

select  @lifeTip=Title from Lifetips where id=@lifeTipID
GO

CREATE Procedure [dbo].[Select_FolllowUp_ByLetterID](@LetterID int, @userID int ,@StartFollowUpID int output)
as

  select top 1 @StartFollowUpID=StartFollowUpID
  from followup
  where letterid=@letterid and userid=@userID
set  @StartFollowUpID=isnull( @StartFollowUpID ,0)



GO

CREATE Procedure [dbo].[Get_FollowUP_Count](@UserID int ,@BDate char(10), @Edate char(10),
@DonStatusID int,@Count int output)
as

SELECT     @Count=Count(*)
FROM  FollowUp
WHERE
    (@UserID = 0 or FollowUp.UserID = @UserID) AND
    (FollowUp.ToDoDate between  @BDate and @Edate)
and (@DonStatusID=0 or FollowUp.DoneStatusID = @DonStatusID)

set @Count=isnull(@Count,0)
GO
CREATE Procedure [dbo].[Select_FollowUP_By_Date](@UserID int ,@BDate char(10), @Edate char(10),
@DonStatusID int)
as
declare @today char(10)
set @today=dbo.shamsi(getdate())

SELECT     FollowUPID,Letter.Letterid, FollowUp.StartFollowUpID, FollowUp.FollowUPTypeID, FollowUp.DoneStatusID,
 substring(ToDoDate,6,5) ToDoDate, HasAlarm,isnull(cast(Indicatorid as varchar(5))+' - '+Memo,Comment) Comment,
 FollowUPTypeTitle, DoneStatustitle, case when ToDoDate=@today then 0  when ToDoDate>@today then 1 else -1 end DelayStatus
FROM  FollowUp
left JOIN   Letter ON FollowUp.LetterID = Letter.LetterID
left JOIN   FollowUPType ON FollowUp.FollowUPTypeID = FollowUPType.FollowUPTypeID
left JOIN   DoneStatus ON FollowUp.DoneStatusID = DoneStatus.DoneStatusID
WHERE     (@UserID = 0 or FollowUp.UserID = @UserID) AND (FollowUp.ToDoDate between  @BDate and @Edate)
and (@DonStatusID=0 or FollowUp.DoneStatusID = @DonStatusID)
order by  ToDoDate
GO

CREATE  PROCEDURE [dbo].[sp_recommite_report]
@SecretariatID int,@myear tinyint,@where nvarchar(1000)

as
declare @sql nvarchar (4000),@rw nvarchar(2000),@Today char(10)

select @today=dbo.shamsi(getdate())

set @RW=' 
 WHERE  not (l.letter_type=2 and l.letterformat=1 ) and  (l.LetterFormat <3) AND  L.myear='+cast(@myear as varchar(10))
if @SecretariatID>0 
set @rw=@rw+'
 AND (SecretariatID = '+cast(@SecretariatID as varchar(10))+')'


set @sql=' SELECT top 1000 L.LetterID, L.IndicatorID,L.IncommingDate, L.Memo, L.RetroactionNo,
 L.RegistrationDate, L.FollowLetterNo, L.ToStaffer,sender.Title AS SenderTitle,
 Deliver.Title AS DeliverTitle,LetterTypes.Title LetterTypeTitle,LetterRecommites, RC.Paraph,
 RC.RecommiteDate,  RC.Proceeded, RC.ProceedDate, RecommiteTypes.Title RecommitTypeTitle,
isnull(PFO.Title,SENDER.title) RecommiterTitle,Fo.Title Recommited, RC.ViewDate, RC.StaffMemo,
dbo.shamsidatediff(prc.DeadLineDate,isnull(Rc.Proceeddate,'''+@today+''')) DeadlineDays,
dbo.shamsidatediff(rc.Recommitedate,isnull(Rc.Proceeddate,'''+@today+''')) ProgressDays,
prc.DeadLineDate,ActionTypeTitle 
FROM ReCommites RC 
left JOIN ReCommites PRC ON RC.LetterID = PRC.LetterID AND PRC.ID = RC.ParentId  AND PRC.type = RC.type 
INNER JOIN Letter L ON RC.LetterID = L.LetterID
INNER JOIN Secretariats  ON Secretariats.Secid = L.SecretariatID
left JOIN FromOrganizations FO ON FO.ID = RC.OrgID 
left JOIN FromOrganizations PFO ON PFO.ID = PRC.OrgID 
left JOIN  FromOrganizations sender ON l.ToOrgID = sender.ID
left JOIN  FromOrganizations Deliver ON l.FromOrgID = Deliver.ID 
Left join LetterTypes on LetterTypes.ID=l.Letter_type 
left JOIN RecommiteTypes ON RC.Type = RecommiteTypes.ID 
left JOIN ActionType  ON ActionType.ActionTypeID = RC.ActionTypeID'

set @sql=@sql+@rW

set @where=isnull(ltrim(rtrim(@where)),'')
 if (@where<>'') 
   select @sql=@sql+' and '+@where

set @sql=@sql+' order by rc.recommitedate desc,l.indicatorid desc'
exec sp_executesql  @sql
PRINT @sql

GO

CREATE  PROCEDURE [dbo].[sp_recommite_statistic] 
@SecretariatID int,@myear tinyint,@where nvarchar(1000)

as
declare @sql nvarchar (4000),@rw nvarchar(2000),@Today char(10)

select @today=dbo.shamsi(getdate())

set @RW=' 
 WHERE  not (l.letter_type=2 and l.letterformat=1 ) and  (l.LetterFormat <3) AND  L.myear='+cast(@myear as varchar(10))
if @SecretariatID>0 
set @rw=@rw+'
 AND (SecretariatID = '+cast(@SecretariatID as varchar(10))+')'


set @sql=' SELECT top 1000   Fo.Title Recommited, 
min(dbo.Recommite_DeadLine(rc.Recommiteid,isnull(Rc.Proceeddate,'''+@today+'''))) MinDeadlineDays,
max(dbo.Recommite_DeadLine(rc.Recommiteid,isnull(Rc.Proceeddate,'''+@today+'''))) MaxDeadlineDays,
avg(dbo.Recommite_DeadLine(rc.Recommiteid,isnull(Rc.Proceeddate,'''+@today+'''))) AvgDeadlineDays,
min(dbo.shamsidatediff(rc.Recommitedate,isnull(Rc.Proceeddate,'''+@today+'''))) MinProgressDays,
max(dbo.shamsidatediff(rc.Recommitedate,isnull(Rc.Proceeddate,'''+@today+'''))) MaxProgressDays,
avg(dbo.shamsidatediff(rc.Recommitedate,isnull(Rc.Proceeddate,'''+@today+'''))) AvgProgressDays

FROM ReCommites RC 
INNER JOIN Letter L ON RC.LetterID = L.LetterID
INNER JOIN Secretariats  ON Secretariats.Secid = L.SecretariatID
left JOIN FromOrganizations FO ON FO.ID = RC.OrgID '

set @sql=@sql+@rW

set @where=isnull(ltrim(rtrim(@where)),'')
 if (@where<>'') 
   select @sql=@sql+' and '+@where

set @sql=@sql+'
 group by  Fo.Title
 order by Fo.Title '
exec sp_executesql  @sql
PRINT @sql



GO


CREATE Procedure Select_FollowUp_ByStart(@StartFollowUpID int)
as

select *
from followup
where StartFollowUpID=@StartFollowUpID

GO
CREATE proc SendLetter_To_Other_sec
 @NewSecID int ,@letterid int 
as 

declare @newLetterId int

insert into letter(IndicatorID,MYear,SecretariatID,Letter_Type,letterformat,IncommingNO,Incommingdate,FromOrgID,ToOrgID
,Signerid,ClassificationID,UrgencyID,Memo,AttachTitle,NumberOfAttachPages,NumberOfPage,ReceiveTypeID,UserID,
RetroactionNo,UserMemo,RegistrationDate,RegistrationTime,FollowLetterNo,ToStaffer,SentLetterID,TemplateID,HeaderID,
LetterRecommites,FromStaffer,Finalized,SendStatusid)
select dbo.newIndicatorid(1,2,myear,@NewSecID) IndicatorID,
MYear,
@NewSecID SecretariatID,1 Letter_Type,2 letterformat,
cast(indicatorid as varchar(5))+isnull('/'+Secretariats.PreCode,'') IncommingNO,
registrationdate Incommingdate,FromOrgID,ToOrgID,Signerid,ClassificationID,UrgencyID,Memo,AttachTitle,
NumberOfAttachPages,NumberOfPage,ReceiveTypeID,UserID,RetroactionNo,UserMemo,RegistrationDate,RegistrationTime,
FollowLetterNo,ToStaffer,SentLetterID,TemplateID,HeaderID,LetterRecommites,FromStaffer,Finalized,2
from letter
inner join Secretariats on Secretariats.secid=letter.SecretariatID
where letterid =@letterid and sendstatusid=1

set @newLetterId=@@identity

insert into letterdata(LetterID,PageNumber,Image,extention,Description )
select @newLetterId,PageNumber,Image,extention,Description 
from letterdata
where letterid=@letterid

insert into recommites(LetterID,ID,Type,ParentId,OrgID,Paraph,RecommiteDate,UserID,IsCopy,Proceeded,ProceedDate,
staffmemo,viewdate,OrgStaff,DeadLineDate)
select @newLetterId,ID,Type,ParentId,OrgID,Paraph,RecommiteDate,UserID,IsCopy,Proceeded,ProceedDate,staffmemo,viewdate,OrgStaff,DeadLineDate
from recommites
where letterid=@letterid


insert into LetterText(LetterID, TypeText, LetterFormat)
SELECT   @newLetterId  , TypeText, LetterFormat
FROM         LetterText
where LetterID=@LetterID



declare @mainLetterid int,@newOrd tinyint
if exists (select * from LetterRelation where subletterid =@letterid)
  begin
    select @newOrd=max(ord)+1 from  LetterRelation where subletterid =@letterid
    select @mainLetterid=mainLetterid from LetterRelation where subletterid =@letterid
    INSERT INTO LetterRelation(MainLetterID,SubLetterID,Ord) values (@mainLetterid,@newLetterId,@newOrd)
  end
else
  begin
    select @mainLetterid=@letterid
    INSERT INTO LetterRelation(MainLetterID,SubLetterID,Ord) values (@mainLetterid,@letterid,1)
    INSERT INTO LetterRelation(MainLetterID,SubLetterID,Ord) values (@mainLetterid,@newLetterId,2)
  end



update letter
set SendStatusid=3
where letterid=@letterid




GO

CREATE procedure Get_letterHistory_by_LetterID(@LetterID int )
as 
declare @MainLetterID int

select @MainLetterID=MainLetterID
from letterRelation
where SubLetterid=@letterid

select 
     Letter.LetterID, Secretariats.secTitle,Letter.IndicatorID,  Letter.IncommingNO,Letter.IncommingDate,  Letter.Memo, sender.Title AS SenderTitle, 
                      Deliver.Title AS DeliverTitle,LetterTypes.Title LetterTypeTitle,LetterRecommites,registrationdate,CenterNo,CenterDate
from letterRelation   
 inner join letter on letter.letterid=letterRelation.subletterid
 left  JOIN           FromOrganizations sender ON Letter.ToOrgID = sender.ID
left JOIN     FromOrganizations Deliver ON Letter.FromOrgID = Deliver.ID 
Left join LetterTypes on LetterTypes.ID=Letter.Letter_type 
inner join Secretariats on Secretariats.Secid=Letter.SecretariatID
where MainLetterID=@MainLetterID


GO

Create Procedure dbo.GetRecommiteById
( @recommiteId int)
AS

select R.*,isnull(FO.Title,Lfo.title) RecommiterTitle
 from Recommites R 
inner join letter L on R.LetterID = L.LetterID 
left join Recommites PR on R.LetterId=PR.LetterId and R.ParentId=PR.ID 
left join dbo.FromOrganizations FO on PR.OrgID=FO.ID --where recommiteId=
left join dbo.FromOrganizations LFO on L.ToOrgID=LFO.ID 
where R.recommiteId=@recommiteId

GO

CREATE Procedure Get_LetterAttachment
@letterID int 
as

SELECT     LetterData.LetterDataID, Extention.ExtentionTitle, Extention.Extention, LetterData.PageNumber, LetterData.Description
FROM       LetterData 
INNER JOIN  Extention ON LetterData.extention = Extention.ExtentionID
WHERE LetterID=@LetterID




GO

CREATE procedure Get_LetterdataExtention(@LetterID int,@result tinyint output)
as 
set @result=0
SELECT     top 1 @result=extention
FROM         LetterData
WHERE     LetterID=@LetterID and extention in (1,2)
GO
CREATE PROCEDURE sp_ArchivePlaces  
@LetterID int,@UserID  tinyint, @result  nvarchar(1000) output
as
set @result=''
SELECT   @result=@result +' , '+isnull(Place,'') +'-'+Title
FROM         LetterArchiveFolder 
INNER JOIN          ArchiveFolder ON LetterArchiveFolder.ArchiveFolderID = ArchiveFolder.FolderID
where  ArchiveFolder.UserID=@userid and Letterid =@LetterID
if @result<>'' set  @result=substring(@result,4,1000)






GO

CREATE PROCEDURE Activate_Letter(@receivedMode bit,@indicatorID int ,@myear int, @secID int)
as
    if @receivedMode=1 
 update ReceievedLetters
                 set letter_type=1
                 where IndicatorID=@indicatorID
                 and  MYear=@myear
                 and  SecretariatID=@secID  
else
 update SentLetters
                 set letter_type=1
                 where IndicatorID=@indicatorID
                 and  MYear=@myear
                 and  SecretariatID=@secID

  delete from LetterFile
                 where LetterIndicatorID=@indicatorID
                 and  LetterMYear=@myear
                 and  SecID=@secid  

GO

CREATE procedure  Activate_Recommite(
               @RecommiteID  int)
 AS
update  [dbo].[ReCommites] 
set proceeded=0,ActionTypeID=1
WHERE
	( RecommiteID	 = @RecommiteID)


GO


CREATE Procedure AnswerLetter( @LetterID int,@AnswerLetterID int,@Today char(10))
as

UPDATE Letter SET SentLetterID = @AnswerLetterID
 WHERE   LetterID=@LetterID
DECLARE @Letterformat int

select @letterFormat=letterFormat from letter
 WHERE   LetterID=@LetterID


if @letterFormat=1
begin
 UPDATE ReCommites
 SET Proceeded=1, ProceedDate = @today
 WHERE (Proceeded=0) AND (LetterID=@LetterID)

 UPDATE ReCommites SET ActionTypeID=5 WHERE  (LetterID=@LetterID)
 update letter set LatestActionTypeID=5 where letterid=@letterid

end

GO

create proc AnswerNote
@recommiteID int
as
update Recommites
set Staffmemo='ÅÌ‘ ‰ÊÌ” ’«œ—Â ¬„«œÂ ‘œ ',actiontypeid=4
where recommiteid=@recommiteID


GO





create procedure Delete_All_Secretariats_Of_User(@userid int)
as
DELETE FROM UserSecretariats
WHERE     (UserId = @UserID)


 
GO


create procedure Delete_All_TemplateGroup_Of_User(@userid int)
as
DELETE FROM UserTemplateGroup
WHERE     (UserId = @UserID)



 
GO



CREATE proc Delete_Exported_LetterData(@SecretariatID int, @myear tinyint)
as
delete     LetterData
FROM         LetterData 
INNER JOIN       Letter ON LetterData.LetterID = Letter.LetterID
WHERE     (Letter.SecretariatID = @SecretariatID) AND (Letter.MYear = @myear)






GO











CREATE PROCEDURE Delete_Table(@tableID int)
as

declare @Tablename varchar(50)

select @tablename=Tablename
 from tables
where tableid=@tableid


  delete from tables
  where tableid=@tableid
  
  delete from Fields
  where tableid=@tableid

  exec('drop table '+@tablename)




 
GO










create PROCEDURE [Deleted_to_Letter] 
@LetterID int,@newInd int,@today char(10)
AS
   UPDATE   Letter
   SET        registrationdate=@today,      IndicatorID = @newInd,  LetterFormat = 1
 WHERE     (LetterID = @LetterID)










GO










CREATE PROCEDURE [Draft_to_SentLetter]
@LetterID int,@newInd int,@today char(10)
AS
declare @Letter_Type int
select @Letter_Type=Letter_type
from letter
WHERE     (LetterID = @LetterID)

  UPDATE   Letter
   SET        registrationdate=@today,      IndicatorID = @newInd,  LetterFormat = 1
  WHERE     (LetterID = @LetterID)

  if @Letter_Type<>1 
   update recommites
    set proceeded=1 where letterid=@LetterID

declare @receivedLetter int

select top 1 @receivedLetter=Letterid
from letter where sentletterid=@LetterID

if @receivedLetter is not null
 begin
  update recommites
  set proceeded=1,ActionTypeid=5 where letterid=@receivedLetter
  update  letter set LatestActionTypeID=5 where letterid=@receivedLetter
 end


if not exists (select * from recommites where letterid=@LetterID)
 INSERT INTO dbo.ReCommites ( LetterID, ID, Type, ParentId, OrgID, Paraph, RecommiteDate, UserID, IsCopy, Proceeded) 
select LetterID,1,3,0,fromorgid,'',registrationdate,userid,0,0 
from letter
where letterid=@LetterID

GO












CREATE proc Export_LetterData(@LetterdataID int)
as
if not exists (select * from yeganeh_tmp_db.dbo.sysobjects where name='LetterData')
begin
CREATE TABLE yeganeh_tmp_db.dbo.LetterData (
	LetterDataID int  NOT NULL ,
	LetterID int NOT NULL ,
	PageNumber tinyint NOT NULL ,
	Image image NULL ,
	extention tinyint NOT NULL,
	[Description] [nvarchar] (200)  NULL )
end
insert INTO yeganeh_tmp_db.DBO.LetterData (LetterDataID,LetterID,PageNumber,Image,extention)
SELECT     LetterDataID,LetterID,PageNumber,Image,extention
FROM         LetterData
WHERE     (LetterdataID = @LetterdataID)




 
GO











CREATE PROCEDURE [Folder_hasChild]
	(@userid int ,@ParentID 	[int],@hasChild bit output)
AS 
if exists( SELECT     *
FROM         ArchiveFolder
WHERE     (ParentFolderID = @ParentID) and (UserID = @userid))
set @haschild=1
else
set @haschild=0







GO







create procedure Folder_hasLetter(@Folderid int,@hasLetter bit output)
as
if exists (SELECT     *
FROM         LetterArchiveFolder
inner join letter on letter.letterid= LetterArchiveFolder.letterid
WHERE     letterformat<=2 and (ArchiveFolderID = @Folderid)) set @hasLetter=1
else
set @hasLetter=0






GO


CREATE proc GetLetterTemplate_HeaderID
@letterid int
as
select LetterID,TemplateId,headerid,FromOrgID,fromorganizations.PreCode
from letter
inner join fromorganizations on fromorganizations.id=letter.fromorgid
where letterid=@letterid








GO






CREATE PROCEDURE GetList(@ListID int)
 AS

SELECT     KeyValue, Title, Notes
FROM         ListItems
where ListID=@ListID
 
GO




CREATE PROCEDURE [GetUserLogout_status]
	( @UserID 	[int] , @logout bit output, @isSafeLogout 	bit output)
AS

declare @LogoutTime datetime
set @logout=0
set @isSafeLogout=0
select top 1 @LogoutTime=LogoutTime,@isSafeLogout=isSafeLogout
from UserLoginLogout
where userid=@UserID
order by UserLoginLogoutID desc
if @LogoutTime is null set @logout=1
if @isSafeLogout=1
 set @logout=1
else
 if DATEDIFF(second, @LogoutTime,getdate())>60
 set @logout=1






GO





CREATE  procedure Get_ActiveUser
as

SELECT     Users.UserName, 
max(case when datepart(hh, LoginTime)<10 then '0'+cast(datepart(hh, LoginTime) as char(1)) else cast(datepart(hh, LoginTime) as char(2)) end +':'+
case when datepart(mi, LoginTime)<10 then '0'+cast(datepart(mi, LoginTime) as char(1)) else cast(datepart(mi, LoginTime) as char(2)) end ) as logintime
FROM         UserLoginLogout 
INNER JOIN   Users ON UserID = Users.Id
where isSafeLogout=0 and dbo.Shamsi(LoginTime)=dbo.Shamsi(getdate())
and datediff(mi,LogoutTime,getdate())<5
group by Users.UserName






GO




CREATE PROCEDURE Get_All_Letter

@Secretariatid int,
@myear tinyint,
@Letter_Type int,
@LetterFormat int,
@where nvarchar(2000),
@top smallint ,
@archiveFolderID int,
@ArchiveStatus tinyint -- 0 ,1 and 2(= all)
as
declare @sqlCommand nvarchar(4000)
DECLARE @InnerNo NVARCHAR(500);
declare @Delimeter char(1)
set @Delimeter=dbo.GetSystemValue(44)
set @InnerNo=case  dbo.GetSystemValue(35)
                   when 0 then ''
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+

             case  dbo.GetSystemValue(36)
                   when 0 then ''
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+

             case  dbo.GetSystemValue(37)
                   when 0 then ''
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+

             case  dbo.GetSystemValue(38)
                   when 0 then ''
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+

             case  dbo.GetSystemValue(39)
                   when 0 then ''
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+

             case  dbo.GetSystemValue(40)
                   when 0 then ''
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end

IF len(@InnerNo)>5
if substring(@InnerNo,len(@InnerNo)-4,5)='+'''+@Delimeter+'''+'
   set @InnerNo=substring(@InnerNo,1,len(@InnerNo)-5)

if @innerno<>''
set @InnerNo='replace(replace(ltrim(rtrim('+@InnerNo+')),'''+@Delimeter+@Delimeter+''','''+@Delimeter+'''),'''+@Delimeter+@Delimeter+''','''+@Delimeter+''')'
else
set @innerno='cast(indicatorid as nvarchar(500))'

set @sqlCommand='SELECT top  '+Cast(@top as varchar(5)) +'     Letter.LetterID, Letter.IndicatorID, Letter.MYear, Letter.SecretariatID,
                      Letter.Letter_Type, Letter.letterformat, Letter.IncommingNO, Letter.FromOrgID,Letter.IncommingDate,
                      Letter.ToOrgID, Letter.UrgencyID, Letter.Memo, Letter.RetroactionNo, Letter.RegistrationDate, Letter.FollowLetterNo,
                      Letter.ToStaffer, Letter.SentLetterID, Letter.TemplateID, Letter.UserMemo,Letter.DeadLineDate, sender.Title AS SenderTitle,
                      Deliver.Title AS DeliverTitle,dbo.has_Page(Letter.letterid) has_Page,
dbo.has_WordPage(Letter.letterid) has_WordPage,dbo.has_file(letter.letterID) has_file,
LetterTypes.Title LetterTypeTitle,LetterRecommites,sendstatusTitle,'+@innerno+'  InnerNo,Letter.Archived
,ActionTypeTitle
FROM         Letter left  JOIN
                      FromOrganizations sender ON Letter.ToOrgID = sender.ID left JOIN
                      FromOrganizations Deliver ON Letter.FromOrgID = Deliver.ID
Left join LetterTypes on LetterTypes.ID=Letter.Letter_type
inner join sendstatus on sendstatus.sendstatusID=Letter.sendstatusID
inner join Secretariats on Secretariats.Secid=Letter.SecretariatID
left JOIN ActionType  ON ActionType.ActionTypeID = Letter.LatestActionTypeID'


if @archiveFolderID>0
set @sqlCommand=@sqlCommand+'
Left join LetterArchiveFolder on LetterArchiveFolder.Letterid=Letter.LetterID '

set @sqlCommand=@sqlCommand+' where letter.Finalized=1 '



set @where=isnull(ltrim(rtrim(@where)),'')
if @where <>'' set @where =' and '+@where

if @Letter_Type<>0
  set @where=@where+' and (Letter_Type = '+Cast(@Letter_Type as varchar(5))+')'

if @Secretariatid<>0
  set @where=@where+' and (Secretariatid = '+Cast(@Secretariatid as varchar(5))+')'

if @Myear<>0
  set @where=@where+' and (myear = '+Cast(@myear as varchar(5))+')'



if @LetterFormat<>0
  set @where=@where+' and (LetterFormat = '+Cast(@LetterFormat as varchar(5))+')'

if @archiveFolderID>0

  set @where=@where+' and (archiveFolderID = '+Cast(@archiveFolderID as varchar(5))+')'

if @ArchiveStatus=0
 set @where=@where+' and archived=0'

if @ArchiveStatus=1
 set @where=@where+' and archived=1'

if @ArchiveStatus=2
 begin
   set @where=@where+' and
       not exists (SELECT  * FROM   LetterArchiveFolder,ArchiveFolder Where
       LetterArchiveFolder.ArchiveFolderID = ArchiveFolder.FolderID
       and  (ArchiveFolder.UserID=0 or ArchiveFolder.UserID>=10000)  and Letterid =Letter.LetterID)  and archived=1'
end


set @sqlCommand=@sqlCommand+@where + ' order by indicatorid desc '

exec sp_executesql   @sqlCommand

go




CREATE procedure Get_FieldValues_by_LetterID
@LetterID int,@UserID int,@FormOrder tinyint
as
SELECT  LetterFieldValue.*,Fields.[order],
Fields.[Description],Fields.FieldTypeID,Fields.ReferenceTableID,
isnull(FieldAccess.AccessTypeID,1) AccessTypeID
FROM         LetterFieldValue
left join  Fields on Fields.ID = LetterFieldValue.FieldID
left join   FieldAccess on FieldAccess.FieldID=Fields.ID
WHERE    FormOrder = @FormOrder and LetterFieldValue.letterid=@LetterID
 and FieldAccess.UserID=@userID
ORDER BY Fields.[order]










GO





CREATE PROCEDURE Get_FromOrganizations_ByCode @Code nvarchar(10),@ID int output , @ResponsibleStaffer nvarchar(50) output
AS

select top 1 @ID= ID,@ResponsibleStaffer=ResponsibleStaffer
from dbo.FromOrganizations
WHERE 	Code	 = @Code and isactive=1

set @id=isnull(@id,0)
set @ResponsibleStaffer=isnull(@ResponsibleStaffer,'')

GO
CREATE PROCEDURE Get_FromOrganizationsID_ByCode @Code nvarchar(10),@ID int output 
AS

select top 1 @ID= ID
from dbo.FromOrganizations
WHERE 	Code	 = @Code and isactive=1

set @id=isnull(@id,0)
GO
Create Procedure Duplicate_UserShortCut
@UserID int,
@altKey char(1),
@result bit output
as
if exists (SELECT *   FROM UserShortCut where UserID=@UserID and altKey=@altKey)
set @result=1
else
set @result=0

GO

create proc Get_LastUserId(@id int output)
as
SELECT     @id=MAX(Id)
FROM         Users



GO



CREATE PROCEDURE [Get_LetterAbstract]
	@LetterID int

AS
SELECT     IndicatorID, IncommingNO, Incommingdate, RegistrationDate, Memo
FROM         Letter
WHERE 
	LetterID=@LetterID





GO



CREATE proc Get_LetterDataIDs(@SecretariatID int, @myear tinyint)
as
SELECT     LetterData.LetterDataID  
FROM         LetterData 
INNER JOIN       Letter ON LetterData.LetterID = Letter.LetterID
WHERE     (Letter.SecretariatID = @SecretariatID) AND (Letter.MYear = @myear)








GO




create proc Get_LetterData_by_LetterDataID(@LetterDataID int )
as
SELECT     LetterDataID, Image
FROM        LetterData
WHERE     (LetterDataID = @LetterDataID)





GO




CREATE proc Get_LetterData_by_LetterID(@LetterID int)

as
SELECT      letterid,LetterDataID, LetterData.Extention, description
FROM LetterData INNER JOIN
      Extention ON LetterData.extention = Extention.ExtentionID
WHERE     (Extention.IsSystem = 0) AND (LetterData.LetterID = @LetterID)




GO






create procedure Get_LetterJpgFile(@LetterID int,@pagenumber int)
as
select *
from letterdata
where LetterID=@LetterID and PageNumber= @pagenumber
and Extention=1



go






create procedure Get_LetterTifFile(@LetterID int)
as
select *
from letterdata
where LetterID=@LetterID
and Extention=2



GO


CREATE PROCEDURE Get_LetterWordFile(@LetterID int) AS

SELECT     *
FROM         LetterData
WHERE     (extention = 3) AND (LetterID = @LetterID)




 
GO







create procedure Get_Letter_PDF(@LetterID int)
as
select top 1 *
from  letterdata
where LetterID=@LetterID  
and Extention=5




 
GO









create procedure Get_RecommiteJpgFile(@RecommiteID  int)
as
select top 1 *
from Recommitedata
where RecommiteID=@RecommiteID
and Extention=1




 
GO





CREATE Procedure Get_Related_Letters(@LetterID int )
as
CREATE TABLE #RelatedLetters (
	[Id]int identity(1,1)  NOT NULL ,
	[ParentID] [int] NOT NULL ,
	[LetterID] [int] NOT NULL ,
        LetterType tinyint ,
        RetroactionNo nvarchar(50),
        FollowLetterNo nvarchar(50), 
        Done tinyint 
) ON [PRIMARY]

insert into #RelatedLetters(ParentID,LetterID,LetterType,FollowLetterNo,RetroactionNo,Done)
select 0,LetterID,Letter_type,isnull(ltrim(FollowLetterNo),''),isnull(ltrim(RetroactionNo),''),0
from letter
where letterid=@letterid

while exists (select * from #RelatedLetters where done=0)
 begin
update #RelatedLetters
set done=2
where done=0

insert into #RelatedLetters
select id ,letter.letterid,letter.letter_type,isnull(ltrim(FollowLetterNo),''),isnull(ltrim(RetroactionNo),''),0
from letter,#RelatedLetters r
where done=2 and   
r.letter_type=1 and letter.letter_type=1 and 
 letter.incommingno=r.FollowLetterNo

insert into #RelatedLetters
select id ,letter.letterid,letter.letter_type,isnull(ltrim(FollowLetterNo),''),isnull(ltrim(RetroactionNo),''),0
from letter,#RelatedLetters r
where done=2 and   
r.letter_type=2 and letter.letter_type=2 and 
 letter.indicatorid=r.FollowLetterNo



insert into #RelatedLetters
select id ,letter.letterid,letter.letter_type,isnull(ltrim(FollowLetterNo),''),isnull(ltrim(RetroactionNo),''),0
from letter,#RelatedLetters r
where done=2 and   
r.letter_type=1 and letter.letter_type=2 and 
 letter.indicatorid=r.RetroactionNo



insert into #RelatedLetters
select id ,letter.letterid,letter.letter_type,isnull(ltrim(FollowLetterNo),''),isnull(ltrim(RetroactionNo),''),0
from letter,#RelatedLetters r
where done=2 and   
r.letter_type=2 and letter.letter_type=1 and 
 letter.incommingno=r.RetroactionNo

update #RelatedLetters
set done=1
where done=2
end

SELECT     r.*,IndicatorID, MYear,  IncommingNO, Incommingdate, Memo,  
                      Letter.LetterRecommites, t.Title AS FromorgTitle, FromOrganizations.Title AS ToOrgTitle into tempp
FROM       #RelatedLetters r 
inner join Letter            on letter.letterid=r.letterid 
INNER JOIN FromOrganizations ON Letter.FromOrgID = FromOrganizations.ID 
INNER JOIN FromOrganizations t ON Letter.ToOrgID = t.ID


 
GO






CREATE proc Get_UserSecretariat_Tree
@userid int,@myear int 
as
select secid id ,secid+0 secid,0 parentid ,0 Lettertype ,SecTitle title,1 letterformat,-- »—«Ì Ã·ÊêÌ—Ì «“ identity ‘œ‰ ” Ê‰ secid
cast(0 as bit) Proceed  into #m
from secretariats
where secid in (SELECT SecId FROM UserSecretariats WHERE  UserId = @userid)

insert into #m(secid,parentid , Lettertype,title, letterformat, Proceed)
select secid,secid parentid ,0,'ò«— «»·' title,1 letterformat,0 Proceed
from secretariats
where secid in (SELECT SecId FROM UserSecretariats WHERE  UserId = @userid)


insert into #m(secid,parentid , Lettertype,title, letterformat, Proceed)
select secid,secid parentid ,0,'«—Ã«⁄  ‘œÂ' title,0 letterformat,1 Proceed
from secretariats
where secid in (SELECT SecId FROM UserSecretariats WHERE  UserId = @userid)

insert into #m(secid,parentid , Lettertype,title, letterformat, Proceed)
select secid,secid parentid ,0,'ÅÌ‘ ‰ÊÌ”' title,2 letterformat,0 Proceed
from secretariats
where secid in (SELECT SecId FROM UserSecretariats WHERE  UserId = @userid)

insert into #m(secid,parentid , Lettertype,title, letterformat, Proceed)
select secid,secid parentid ,3,'‰«„Â œ«Œ·Ì' title,1 letterformat,0 Proceed
from secretariats
where secid in (SELECT SecId FROM UserSecretariats WHERE  UserId = @userid)

set  identity_insert #m on
insert into #m(id, secid,parentid ,Lettertype,title, letterformat, Proceed) values(0,0,-1,0,'Â„Â ‰«„Â Â« ',1,0)
set  identity_insert #m off

declare @OrgID int
select @OrgID=fromorgid from users where id=@userid

/*update #m
set title=title+'('+cast(dbo.Number_Of_Inbox(secID , case when parentid<1 then 0 else letterformat end,@OrgID,
Proceed,@myear,Lettertype) as varchar(5))+')'
where Proceed=0 and (id<>secid or secid=0)
  */
select *
from #m
order by id



GO




CREATE Procedure Get_innerLetterMemo
@Letterid int,@memo nvarchar(500) output ,@is_Inner bit output
as
SELECT     @is_Inner= case when Letter_Type=3 then 1 else 0 end, @Memo=Memo
FROM         Letter
WHERE     (LetterID = @Letterid)


 
GO






create PROCEDURE [Get_sys_AppMessage]
	(@ID 	[int])

AS select * from  [dbo].[sys_AppMessage] 

WHERE 
	( [ID]	 = @ID)



 
GO











CREATE proc Get_tmp_LetterDataIDs
as
SELECT     LetterDataID  
FROM         yeganeh_tmp_db.dbo.LetterData


GO



CREATE proc Import_LetterData(@LetterDataID int)
as

set identity_insert letterdata on
insert into letterdata(LetterDataID,LetterID,PageNumber,Image,extention)
SELECT    LetterDataID,LetterID,PageNumber,Image,extention
FROM         yeganeh_tmp_db.DBO.LetterData
where  LetterDataID=@LetterDataID
and not exists (select letterdataid from letterdata where letterdataid=@LetterDataID)
set identity_insert letterdata off


GO



CREATE procedure Make_FieldValues_by_LetterID
@LetterID int,@FormOrder tinyint
as

declare @tableID int, @tableID2 int,@TableID0 int
 
select @TableID=UserTableID,@tableID2=UsertableID2
from letter
where letterid=@LetterID




if @tableID is not null or @tableID2 is not null
 begin

delete LetterFieldValue
from LetterFieldValue
inner join  Fields on Fields.id=LetterFieldValue.fieldid
where Letterid =@letterid and  
(
(tableid<>@TableID and formorder=1) or 
(tableid<>@TableID2 and formorder=2)
)

if @FormOrder=1 
set @TableID0=@tableID
else
set @TableID0=@tableID2 

insert into  LetterFieldValue(letterid,FieldID,formOrder)
 select @letterID,ID, @FormOrder
 from Fields
 where tableid=@TableID0 and
 id not in (select FieldID from LetterFieldValue where Letterid=@LetterID and formOrder=@formOrder)

INSERT INTO FieldAccess ([FieldID] ,[UserID] ,[AccessTypeID])
SELECT fields.id,users.id,3
FROM Fields,Users
where tableid=@TableID0
and str(fields.id)+'m'+str(users.id) not in 
(select str(fieldid)+'m'+str(userid) from FieldAccess)

end
GO

CREATE PROCEDURE NewRecommiteID(@letterID int,@type int,@NewID int output)
AS

SELECT     @NewID=ISNULL(MAX(ID), 0) + 1   FROM ReCommites WHERE LetterID=@letterID and type=@type

GO





create PROCEDURE [NextTag]
@formtag tinyint
AS
if @formtag>0 
SELECT     MAX(ID)+1
FROM         Actions
WHERE     (FormTag =@formtag)
else
SELECT     MAX(FormTag)+1
FROM         Actions


GO









CREATE PROCEDURE [NumberOfLetter_By_SecID]
@secID int,@Number_OF_Letter int output
 AS
select @Number_OF_Letter =count(*) from letter where secretariatid=@secid





 
GO








CREATE PROCEDURE [NumberOfTemplate_By_TemplateGroupID]
@TemplateGroupID int,@Number_OF_Template int output
 AS
select @Number_OF_Template =count(*) from LetterTemplate where TemplateGroupid=@TemplateGroupid



 
GO






CREATE PROCEDURE [Org_hasChild]
	(@ParentID 	[int],@hasChild bit output)
AS 
if exists( select * from  FromOrganizations
 WHERE  [ParentID]	 = @ParentID)
set @haschild=1
else
set @haschild=0





GO





CREATE PROCEDURE Org_is_Secretariat
@orgid int ,@IsSecretariat bit output
as
set @IsSecretariat=0


Select  @IsSecretariat=cast(case when r.DestinationOrgID_inSource is null then 0 else 1 end as bit)  
 from fromorganizations LEFT JOIN RelatedSecretariats R ON FromOrganizations.ID = R.DestinationOrgID_inSource
where id=@orgid


 
GO








create proc Recommite_Report
 @begindate char(10),@enddate char(10),@secid int ,@letter_type int 
as

select Recommiteid,orgid,dbo.ShamsiDateDiff(recommitedate,isnull(Proceeddate,'1385/06/08'))delay ,proceeded into #abs
from recommites
inner join letter on letter.letterid=recommites.letterid
where recommitedate between @begindate  and @enddate
and letter.Secretariatid=@secid
and (@letter_type=0) or (Letter_type=@letter_type)


select *
from #abs
inner join fromorganizations on Fromorganizations.id=orgid


 
GO





CREATE  procedure Recommite_has_JpgFile(@RecommiteID  int,@hasJpg bit output)
as
if exists(select  *
from Recommitedata
where RecommiteID=@RecommiteID
and Extention=1  and image is not null)  set @hasJpg=1 else set @hasJpg=0




GO



Create procedure dbo.Report_UserTable
@tableID int,@LetterWhere nvarchar(2000),@UserTableWhere nvarchar(2000)
as

declare @sql nvarchar(4000)

set @sql= 'select LetterID into ##Uletters from Letter '

if @UserTableWhere<>'' 
 set @sql=@sql+' where  '+@UserTableWhere

exec(@SQL)


set @sql='Select l.LetterID into ##r from Letter l
 inner join ##Uletters on ##Uletters.LetterID=l.LetterID
 where UserTableID='+cast(@tableID as varchar(5))+' and '+@LetterWhere

exec(@Sql)
 
set @sql= 'create  table ##m (LetterID int '

SELECT     top 60 identity(int,1,1) id , Fields.Description,cast (fields.id as int ) fieldid into #m
FROM      Fields
WHERE     (tableid = @tableID)
order by [order]


SELECT     @sql=@sql+' ,['+isnull(Description,'')+'_'+
Cast((select count(*) from #m where isnull(Description,'')=isnull(m.Description,'') and id <=m.id) as varchar(3))+
'] nvarchar(2000)'
FROM      #m m

set @sql= @sql+')'

print @sql 
exec(@sql)
declare @insert  varchar(8000)


set @insert= 'insert into ##m select LetterID'


SELECT    @insert=@insert+',(select FieldValue from LetterFieldValue where FieldId='+cast(fieldid as varchar(10))+' and letterid=r.LetterID)'
FROM       #m

set @insert= @insert+' from ##r r '

exec(@insert)


select ##m.*,IndicatorID,IncommingNO,IncommingDate,CenterNo,CenterDate
,Memo,RetroactionNo,UserMemo,RegistrationDate,FollowLetterNo,LetterRecommites
,sender.Title AS SenderTitle ,Deliver.Title AS DeliverTitle,LetterTypes.Title LetterTypeTitle,ActionTypeTitle
FROM  ##m
inner join Letter on ##m.Letterid=Letter.Letterid 
left  JOIN FromOrganizations sender ON Letter.ToOrgID = sender.ID 
left JOIN  FromOrganizations Deliver ON Letter.FromOrgID = Deliver.ID 
Left join LetterTypes on LetterTypes.ID=Letter.Letter_type 
left join Secretariats on Secretariats.Secid=Letter.SecretariatID
left JOIN ActionType  ON ActionType.ActionTypeID = Letter.LatestActionTypeID

drop table ##m  
drop table ##Uletters
drop table ##r

GO


CREATE  PROCEDURE [SaveAs_Accesses]
	( @Title nvarchar(50),@oldaccessID int ,@newID int output)

AS
 INSERT INTO [dbo].[Accesses] 
	 ( [Title]) 
 
VALUES ( @Title)

select @newID=max(ID)
from accesses


insert into ActionsAccess(accessid,ActionID, FormTag, HasAccess)
SELECT     @newid,ActionID, FormTag, HasAccess
FROM         ActionsAccess
where accessid=@oldaccessID

insert into ActionsAccess(accessid,ActionID, FormTag, HasAccess)
SELECT     Accesses.ID AS accessid, Actions.ID AS actionid, Actions.FormTag, 0 AS hasaccess
FROM         Actions , Accesses
where str(Accesses.ID)+str(Actions.ID) not in (select str(accessid)+str(ActionID) from ActionsAccess)








GO



CREATE  PROCEDURE SelectInfo
@where nvarchar(1900)
as 
declare @mainTable varchar(50), @PrimaryCode varchar(50)
select @mainTable=value
from settings
where userid=-1 and variableid=24

select @PrimaryCode=value
from settings
where userid=-1 and variableid=26

declare @sqlCommand nvarchar(4000)
set @sqlcommand='select l.*,dbo.innerno(l.LetterID) innerno,
ReceiveTypes.Title AS ReciveTitle,Classifications.Title AS ClassificatioTitle,Urgenceis.Title AS UrgencyTitle,Users.Title AS UserTitle,
LetterFormats.Title AS FormatTitle,ToOrganizations.Title AS ToOrgTitle,LetterTemplate.Title AS TemplateTitle, 
FromOrganizations.Title AS FromTitle,f.title SignerTitle,dbo.ArchivePlaces(l.letterID,0) ArchivePlaces,FromOrganizations.PreCode, isnull(FromOrganizations.PreCode,FromOrganizations.Code) 
Org_PreCode,  ai.*
FROM  Letter l
LEFT JOIN '+@mainTable+'  AI  on l.UserMemo=cast (ltrim(ai.'+@PrimaryCode+' ) as nvarchar(255) )
LEFT JOIN fromorganizations f on f.id=l.signerid
LEFT JOIN ReceiveTypes ReceiveTypes ON ReceiveTypes.ID = L.ReceiveTypeID
LEFT JOIN Classifications Classifications ON L.ClassificationID = Classifications.ID 
LEFT JOIN Urgenceis Urgenceis ON L.UrgencyID = Urgenceis.ID
LEFT JOIN Users Users ON L.UserID = Users.Id
LEFT JOIN FromOrganizations FromOrganizations ON L.FromOrgID = FromOrganizations.ID 
LEFT JOIN fromorganizations ToOrganizations  ON L.ToOrgID = ToOrganizations.ID 
LEFT JOIN LetterFormats LetterFormats ON L.letterformat = LetterFormats.Code
LEFT JOIN LetterTemplate LetterTemplate ON l.TemplateID = LetterTemplate.ID '

if @where<>'' set @sqlCommand=@sqlCommand+' where '+@where

exec sp_executesql @sqlCommand




GO

CREATE  PROCEDURE SelectLetter
@where nvarchar(2000) 
as 
declare @sqlCommand nvarchar(4000)
set @sqlCommand='select l.*, 
 ReceiveTypes.Title AS ReciveTitle, Classifications.Title AS ClassificatioTitle, Urgenceis.Title AS UrgencyTitle, Users.Title AS UserTitle, 
 LetterFormats.Title AS FormatTitle, ToOrg.Title AS ToOrgTitle, LetterTemplate.Title AS TemplateTitle,  
 FromOrganizations.Title AS FromTitle,LetterTypes.Title LetterTypeTitle, AnswerLetter.MYear AnswerMYear , AnswerLetter.IndicatorID  AnswerIndicatorID
from Letter as L
 Left JOIN ReceiveTypes ON ReceiveTypes.ID = L.ReceiveTypeID
 Left JOIN Classifications ON L.ClassificationID = Classifications.ID 
 Left JOIN Urgenceis ON L.UrgencyID = Urgenceis.ID
 Left JOIN Users ON L.UserID = Users.Id
 Left JOIN FromOrganizations ON L.FromOrgID = FromOrganizations.ID 
 Left JOIN fromOrganizations ToOrg ON L.ToOrgID = ToOrg.ID
 Left JOIN LetterFormats ON L.letterformat = LetterFormats.Code
 left JOIN LetterTemplate ON l.TemplateID = LetterTemplate.ID
 left JOIN LetterTypes ON l.Letter_type = LetterTypes.ID
 LEFT JOIN     Letter AnswerLetter ON L.SentLetterID = AnswerLetter.LetterID ' 
set @where=isnull(ltrim(rtrim(@where)),'')
if @where<>'' 
 set @sqlCommand=@sqlCommand+' where '+@where
 set @sqlCommand=@sqlCommand+' order by l.indicatorid desc '

exec sp_executesql @sqlCommand






GO
























CREATE PROCEDURE Select_ExactCopy(@LetterID int) AS

Select recommites.*,org.title,org.IsInnerOrg
From recommites inner join fromorganizations org on org.id=orgid
where LetterID=@LetterID
 and type=1























GO

GO
 
GO


GO
 
GO











CREATE PROCEDURE [Select_LetterReCommite]	

(@letterID 	[int],@type tinyint)  AS 

SELECT R.*,f.title+' - '+r.OrgStaff orgtitle,IsInnerOrg 

FROM ReCommites R  

inner join FromOrganizations f on f.ID=r.OrgID 

where Letterid=@letterID and type=@type










GO

GO

GO


GO
 
GO


CREATE procedure Select_recommites_byLetterID
@letterId int
as

SELECT     FromOrganizations.Title AS [«—Ã«⁄ ‘Ê‰œÂ], FromOrganizations_1.Title AS [«—Ã«⁄ œÂ‰œÂ], FromOrganizations_1.ResponsibleStaffer AS [‰«„ «—Ã«⁄ œÂ‰œÂ], 
                      FromOrganizations.ResponsibleStaffer AS [‰«„ «—Ã«⁄ êÌ—‰œÂ], Users.Title AS [ò«—»— À»  ò‰‰œÂ], ReCommites.Paraph AS [„÷„Ê‰ «—Ã«⁄], 
                      ReCommites.RecommiteDate AS [ «—ÌŒ «—Ã«⁄], ReCommites.IsCopy AS [òÅÌø], ReCommites.Proceeded AS [«ﬁœ«„ ‘œÂø], 
                      ReCommites.ProceedDate AS [ «—ÌŒ «ﬁœ«„ Ì« «—Ã«⁄], ReCommites.staffmemo AS [„·«ÕŸ«  »«Ìê«‰Ì], ReCommites.viewdate AS [ «—ÌŒ „‘«ÂœÂ], 
                      ReCommites.OrgStaff AS [‰«„ «—Ã«⁄ ‘Ê‰œÂ ], ReCommites.DeadLineDate AS [„Â·  «ﬁœ«„], RecommiteTypes.Title AS [‰Ê⁄ «—Ã«⁄]
FROM       ReCommites
left join  RecommiteTypes ON RecommiteTypes.ID = ReCommites.Type
left JOIN  Users ON ReCommites.UserID = Users.Id 
left JOIN  FromOrganizations ON ReCommites.OrgID = FromOrganizations.ID 
left JOIN  ReCommites ReCommites_1 ON ReCommites.LetterID = ReCommites_1.LetterID AND   ReCommites.ParentId = ReCommites_1.ID
LEFT JOIN  FromOrganizations FromOrganizations_1 on  FromOrganizations_1.ID = ReCommites_1.OrgID 
WHERE    recommites.type=3 and (ReCommites.LetterID = @letterId)



GO





CREATE Procedure Transfer_Get_LetterData_By_LetterID(@LetterID int,@maxSize int )

as
select LetterDataID,LastUpdate,Extention
from letterdata
where letterid=@LetterID
and pagenumber<=dbo.NumberOfPage_ByMaxSize(@letterID,@maxSize)

 
GO









CREATE procedure Transfer_Get_LetterFieldValue_By_LetterID(@LetterID int )
as
select * 
from LetterFieldValue 
where letterid=@LetterID


GO


create procedure Transfer_Get_Letter_By_LetterID(@Letterid int output)
as

SELECT     Letter.*, org.Title AS OrgTitle
FROM         Letter INNER JOIN
                      FromOrganizations org ON Letter.ToOrgID = org.ID
WHERE     (Letter.LetterID =@Letterid)


GO





CREATE PROCEDURE Transfer_Get_Letterdata_By_LetterDataID
@LetterDataID int
AS
select *
from LetterData
where LetterDataID=@LetterDataID



GO





CREATE procedure Transfer_Get_Recommites_By_LetterID(@LetterID int )
as
select Recommites.*,org.Title AS OrgTitle
from Recommites
 INNER JOIN   FromOrganizations org ON Recommites.OrgID = org.ID
where letterid=@LetterID

GO



CREATE procedure Transfer_Get_SentLetter
@RelatedSecretariatID int,
@FromDate char(10)
as


declare @ToSecID int,@DestinationOrgID_inSource int


select @ToSecID=DestinationSecID,@DestinationOrgID_inSource=DestinationOrgID_inSource
from RelatedSecretariats
where  RelatedSecretariatID=@RelatedSecretariatID



SELECT     top 100 l.*
FROM       Letter l
WHERE     letterformat=1 
      and letter_type                               = 2
      and sendstatusid                              = 2
      and Registrationdate                          >= @FromDate  
      and l.ToOrgID                                  = @DestinationOrgID_inSource
and exists(select * from letterdata where letterid=l.letterid)

GO






CREATE PROCEDURE Transfer_Insert_SentLetter
	(@IndicatorID 	[int],
	 @MYear 	[tinyint],
	 @SecretariatID 	[tinyint],
	 @Letter_Type 	[tinyint],
	 @letterformat 	[tinyint],
	 @IncommingNO 	[nvarchar](50),
	 @Incommingdate 	[nvarchar](10),
	 @CenterNo 	[nvarchar](50),
	 @CenterDate 	[char](10),
	 @FromOrgID 	[int],
	 @ToOrgID 	[int],
	 @Signerid 	[nvarchar](50),
	 @ClassificationID 	[tinyint],
	 @UrgencyID 	[smallint],
	 @Memo 	[nvarchar](500),
	 @AttachTitle 	[nvarchar](50),
	 @NumberOfAttachPages 	[smallint],
	 @NumberOfPage 	[tinyint],
	 @ReceiveTypeID 	[tinyint],
	 @UserID 	[int],
	 @RetroactionNo 	[nvarchar](50),
	 @UserMemo 	[nvarchar](255),
	 @RegistrationDate 	[char](10),
	 @RegistrationTime 	[varchar](5),
	 @FollowLetterNo 	[nvarchar](50),
	 @ToStaffer 	[nvarchar](50),
	 @SentLetterID 	[int],
	 @TemplateID 	[int],
	 @HeaderID 	[int],
	 @LetterRecommites 	[nvarchar](500),
	 @FromStaffer 	[nvarchar](50),
	 @Finalized 	[bit],
	 @SendStatusID 	[tinyint],
@LetterID int output)

AS INSERT INTO  [Letter] 
	 ( [IndicatorID],	 [MYear],	 [SecretariatID],	 [Letter_Type],
	 [letterformat],	 [IncommingNO],	 [Incommingdate],	 [CenterNo],
	 [CenterDate],
	 [FromOrgID],
	 [ToOrgID],
	 [Signerid],
	 [ClassificationID],
	 [UrgencyID],
	 [Memo],
	 [AttachTitle],
	 [NumberOfAttachPages],
	 [NumberOfPage],
	 [ReceiveTypeID],
	 [UserID],
	 [RetroactionNo],
	 [UserMemo],
	 [RegistrationDate],
	 [RegistrationTime],
	 [FollowLetterNo],
	 [ToStaffer],
	 [SentLetterID],
	 [TemplateID],
	 [HeaderID],
	 [LetterRecommites],
	 [FromStaffer],
	 [Finalized],
	 [SendStatusID]) 

VALUES 
	( @IndicatorID,
	 @MYear,
	 @SecretariatID,
	 @Letter_Type,
	 @letterformat,
	 @IncommingNO,
	 @Incommingdate,
	 @CenterNo,
	 @CenterDate,
	 @FromOrgID,
	 @ToOrgID,
	 @Signerid,
	 @ClassificationID,
	 @UrgencyID,
	 @Memo,
	 @AttachTitle,
	 @NumberOfAttachPages,
	 @NumberOfPage,
	 @ReceiveTypeID,
	 @UserID,
	 @RetroactionNo,
	 @UserMemo,
	 @RegistrationDate,
	 @RegistrationTime,
	 @FollowLetterNo,
	 @ToStaffer,
	 @SentLetterID,
	 @TemplateID,
	 @HeaderID,
	 @LetterRecommites,
	 @FromStaffer,
	 @Finalized,
	 @SendStatusID)
select @letterID=@@identity

GO


create  procedure Transfer_Sent_RelatedSecs
as


SELECT     *,dbo.get_Number_Of_Letter_RelatedSecretariatID(RelatedSecretariatID) Number_of_letters
FROM         RelatedSecretariats 



GO


CREATE PROCEDURE [Transfer_insert_LetterFieldValue]
	(@LetterID 	[int],
	 @FieldID 	[int],
	 @FieldValue 	[nvarchar](2000),
	 @LastUpdate	[datetime],
         @LetterFieldValueID 	[int] output)

AS INSERT INTO[LetterFieldValue] 
	 ( 
	 [LetterID],
	 [FieldID],
	 [FieldValue],
	 LastUpdate)

VALUES
	(
	 @LetterID,
	 @FieldID,
	 @FieldValue,
	 @LastUpdate) 
set @LetterFieldValueID=@@identity




GO


CREATE PROCEDURE [Transfer_insert_ReCommites]
	(
	 @LetterID 	[int],
	 @ID 	[smallint],
	 @Type 	[tinyint],
	 @ParentId 	[smallint],
	 @OrgID 	[int],
	 @Paraph 	[nvarchar](500),
	 @RecommiteDate 	[varchar](10),
	 @UserID 	[tinyint],
	 @IsCopy 	[bit],
	 @Proceeded 	[bit],
	 @ProceedDate 	[varchar](10),
	 @staffmemo 	[nvarchar](255),
	 @viewdate 	[char](10),
	 @OrgStaff 	[nvarchar](50),
	 @DeadLineDate 	[char](10),
	 @LastUpdate 	[datetime],
         @RecommiteID 	 int output )

AS INSERT INTO  [ReCommites] 
	 ( 
	 [LetterID],
	 [ID],
	 [Type],
	 [ParentId],
	 [OrgID],
	 [Paraph],
	 [RecommiteDate],
	 [UserID],
	 [IsCopy],
	 [Proceeded],
	 [ProceedDate],
	 [staffmemo],
	 [viewdate],
	 [OrgStaff],
	 [DeadLineDate],
	 [LastUpdate])

VALUES 
	( 
	 @LetterID,
	 @ID,
	 @Type,
	 @ParentId,
	 @OrgID,
	 @Paraph,
	 @RecommiteDate,
	 @UserID,
	 @IsCopy,
	 @Proceeded,
	 @ProceedDate,
	 @staffmemo,
	 @viewdate,
	 @OrgStaff,
	 @DeadLineDate,
	 @LastUpdate)

set @RecommiteID=@@identity

exec Transfer_Get_LetterData_By_LetterID 5242, 1000


GO






CREATE  PROCEDURE [Trunsfer_update_Letter]
	(@LetterID 	[int],
	 @IncommingNO 	[nvarchar](50),
	 @Incommingdate 	[nvarchar](10),
	 @CenterNo 	[nvarchar](50),
	 @CenterDate 	[char](10),
	 @ClassificationID 	[tinyint],
	 @UrgencyID 	[smallint],
	 @Memo 	[nvarchar](500),
	 @AttachTitle 	[nvarchar](50),
	 @NumberOfAttachPages 	[smallint],
	 @NumberOfPage 	[tinyint],
	 @ReceiveTypeID 	[tinyint],
	 @RetroactionNo 	[nvarchar](50),
	 @UserMemo 	[nvarchar](255),
	 @FollowLetterNo 	[nvarchar](50),
	 @ToStaffer 	[nvarchar](50),
	 @LetterRecommites 	[nvarchar](500),
	 @FromStaffer 	[nvarchar](50),
	 @Finalized 	[bit],
	 @UserTableID 	[int],
	 @LastUpdate	[datetime])

AS UPDATE  [Letter] 

SET      [IncommingNO]	 = @IncommingNO,
	 [Incommingdate]	 = @Incommingdate,
	 [CenterNo]	 = @CenterNo,
	 [CenterDate]	 = @CenterDate,
	 [ClassificationID]	 = @ClassificationID,
	 [UrgencyID]	 = @UrgencyID,
	 [Memo]	 = @Memo,
	 [AttachTitle]	 = @AttachTitle,
	 [NumberOfAttachPages]	 = @NumberOfAttachPages,
	 [NumberOfPage]	 = @NumberOfPage,
	 [ReceiveTypeID]	 = @ReceiveTypeID,
	 [RetroactionNo]	 = @RetroactionNo,
	 [UserMemo]	 = @UserMemo,
	 [FollowLetterNo]	 = @FollowLetterNo,
	 [ToStaffer]	 = @ToStaffer,
	 [LetterRecommites]	 = @LetterRecommites,
	 [FromStaffer]	 = @FromStaffer,
	 [Finalized]	 = @Finalized,
	 [LastUpdate]	 = @LastUpdate,
	 [UserTableID]	 = @UserTableID


WHERE 
	( [LetterID]	 = @LetterID)



GO




CREATE  PROCEDURE [Trunsfer_update_LetterFieldValue]
	(@LetterFieldValueID 	[int],
	 @FieldValue 	[nvarchar](2000),
	 @LastUpdate	[datetime])

AS UPDATE  [LetterFieldValue] 

SET  [FieldValue]	 = @FieldValue,
	 [LastUpdate]	 = @LastUpdate

WHERE 
	( [LetterFieldValueID]	 = @LetterFieldValueID)



GO



CREATE  PROCEDURE [Trunsfer_update_ReCommites]
	(@RecommiteID 	[int],
	 @Paraph 	[nvarchar](500),
	 @IsCopy 	[bit],
	 @Proceeded 	[bit],
	 @ProceedDate 	[varchar](10),
	 @DeadLineDate 	[char](10),
	 @LastUpdate	[datetime])

AS UPDATE  [ReCommites] 

SET 	 [Paraph]	 = @Paraph,
	 [IsCopy]	 = @IsCopy,
	 [Proceeded]	 = @Proceeded,
	 [ProceedDate]	 = @ProceedDate,
	 [DeadLineDate]	 = @DeadLineDate ,
	 [LastUpdate]	 = @LastUpdate
WHERE 
	( [RecommiteID]	 = @RecommiteID)



GO




CREATE PROCEDURE Update_all_recommites AS
declare @i int
set @i=1
update letter
set letterRecommites=FromOrganizations.Title+'  '+recommitedate
from letter inner join recommites on recommites.letterid=letter.letterid
inner join fromorganizations on fromorganizations.id=recommites.orgid
where recommites.id=1 and type=3


while @i<16
 begin
set @i=@i+1
update letter
set letterRecommites=letterRecommites+','+FromOrganizations.Title+'  '+recommitedate
from letter inner join recommites on recommites.letterid=letter.letterid
inner join fromorganizations on fromorganizations.id=recommites.orgid
where recommites.id=@i  and type=3


update letter
set letterRecommites=letterRecommites+','+FromOrganizations.Title+'  '+recommitedate
from letter inner join recommites on recommites.letterid=letter.letterid
inner join fromorganizations on fromorganizations.id=recommites.orgid
where recommites.id=@i-1 and type=2

update letter
set letterRecommites=letterRecommites+','+FromOrganizations.Title+'  '+recommitedate
from letter inner join recommites on recommites.letterid=letter.letterid
inner join fromorganizations on fromorganizations.id=recommites.orgid
where recommites.id=@i-1 and type=1
end







GO




CREATE PROCEDURE [UserChange_pass] (@userID int,@oldPass nvarchar(100),@newPass nvarchar(100),@result bit=1 output )
AS

if exists(select *
 from users where id=@userID and password=@oldPass ) 
 begin
update users
set password=@newPass
where id=@userid
set @result=1
end
else
set @result=0






GO



CREATE PROCEDURE UserLog_Report 
AS
SELECT     Users.Title AS usertitle, Actions.Title AS actiontitle, UserLog.Time1 AS Time, Letter.IndicatorID, LetterTypes.Title AS Letter_type
FROM         UserLog INNER JOIN
                      Users ON UserLog.UserID = Users.Id INNER JOIN
                      Actions ON UserLog.ActionID = Actions.ID LEFT OUTER JOIN
                      Letter ON UserLog.LetterID = Letter.LetterID LEFT OUTER JOIN
                      LetterTypes ON Letter.Letter_Type = LetterTypes.ID
ORDER BY LetterTypes.Title




GO





create proc Ysp_create_Temp_Database(@Path nvarchar(255))
as
declare @sql nvarchar(1000)
set @sql=
'CREATE DATABASE [yeganeh_tmp_db]  ON PRIMARY (NAME = N''yeganeh_tmp_db_Data'', FILENAME = N'''+@Path+'yeganeh_tmp_db_Data.MDF'' ,
 SIZE = 1, FILEGROWTH = 10%)
 LOG ON (NAME = N''yeganeh_tmp_db_Log'', FILENAME = N'''+@Path+'yeganeh_tmp_db_Log.LDF'' , SIZE = 1, FILEGROWTH = 10%)'

exec master..sp_executesql  @sql



GO





CREATE PROCEDURE [delete_Accesses]
	(@AccessID 	[tinyint])

AS DELETE [dbo].[Accesses] 

WHERE 
	( [ID]	 = @AccessID)






GO




CREATE PROCEDURE [delete_Actions_ByFormID]
	(@FormTag 	[tinyint])

AS DELETE [dbo].[Actions] 

WHERE (
	 [FormTag]	 = @FormTag)






GO




CREATE PROCEDURE [delete_ArchiveFolder]
	(@FolderID 	[int])

AS

delete LetterArchiveFolder where   [ArchiveFolderID]	 = @FolderID

DELETE [dbo].[ArchiveFolder]

WHERE 
	( [FolderID]	 = @FolderID)





GO


CREATE PROCEDURE delete_Extention
@ExtentionID int 
AS
delete UserExtention where ExtentionID=@ExtentionID
delete Extention where ExtentionID=@ExtentionID




GO


CREATE PROCEDURE [delete_Letter]
@LetterID int,@newInd int
AS


declare @letterformat tinyint

select   @letterformat=letterformat
from letter
where letterid=@LetterID

if @letterformat=1 
  UPDATE    Letter
  SET        LetterFormat = 3 ,memo=memo +'('+cast(indicatorid as varchar(6)), indicatorid=@newind
 WHERE     (LetterID = @LetterID)

if @letterformat in (2,3)
begin
  delete from Letter WHERE     (LetterID = @LetterID)
  DELETE [ReCommites]  WHERE     (LetterID = @LetterID)
  DELETE [LetterText]  WHERE     (LetterID = @LetterID)
  DELETE [LetterData]  WHERE     (LetterID = @LetterID)
end



GO




CREATE PROCEDURE [delete_LetterArchiveFolder]
	(@LetterArchiveID 	[int])

AS
declare @letterid int

select @letterid =letterid
from[LetterArchiveFolder]
where [LetterArchiveID]	 = @LetterArchiveID


DELETE [dbo].[LetterArchiveFolder]

WHERE
	( [LetterArchiveID]	 = @LetterArchiveID)

if not exists (select * from [LetterArchiveID] where letterid=@letterid) 
update letter
set Archived=0
where letterid=@letterid




GO


create proc delete_LetterData (@LetterDataID int )
as
delete       LetterData
WHERE     (LetterDataID = @LetterDataID)





GO


CREATE PROCEDURE [delete_LetterWord]
	(@LetterID 	[int])

AS DELETE [dbo].[LetterData] 

WHERE 
	( [LetterID]	 = @LetterID AND
	 [extention]	 = 3)







GO




CREATE PROCEDURE [delete_ReCommites]
	(@RecommiteID 	[int])

AS DELETE [dbo].[ReCommites] 

WHERE 
	( [RecommiteID]	 = @RecommiteID)





GO


create proc delete_letterImage
@Letterdataid int
as
declare @pageNumber int,@Letterid int

select @pageNumber=pageNumber,@Letterid=Letterid from letterdata
WHERE     (Letterdataid = @Letterdataid)

DELETE FROM letterdata
WHERE     (Letterdataid = @Letterdataid)

update letterdata
set pageNumber=pageNumber-1
where @Letterid=Letterid and pageNumber>@pageNumber






GO





CREATE PROCEDURE get_ArchiveFolder_byUserID
@userID int
AS

SELECT      *
FROM         ArchiveFolder
WHERE     (UserID = @userID)



GO




CREATE PROCEDURE get_ArchiveFolder_byUserID_and_Letterid
@Letterid int,@userid int
AS
SELECT     LetterArchiveFolder.*, ArchiveFolder.Title, ArchiveFolder.Place,users.Title usertitle
FROM         LetterArchiveFolder 
INNER JOIN   ArchiveFolder ON LetterArchiveFolder.ArchiveFolderID = ArchiveFolder.FolderID
left join users on users.id=LetterArchiveFolder.userID
WHERE     (LetterArchiveFolder.LetterID = @Letterid) and archivefolder.userid=@userid



 
GO





CREATE  PROCEDURE get_ArchiveFolder_byUserID_and_Place
@userID int,@Place nvarchar(100),@FolderID int output
AS

SELECT      top 1 @FolderID=FolderID
FROM         ArchiveFolder
WHERE     (UserID = @userID)  and (Place=@Place)












GO



CREATE  PROCEDURE get_ArchiveFolder_byUserID_and_Title
@userID int,@like nvarchar(100)
AS

SELECT      *
FROM         ArchiveFolder
WHERE     (UserID = @userID)  and ( title like '%'+@like+'%' or place like  '%'+@like+'%' )




GO





CREATE PROCEDURE [get_DayID_InWeek]
	(@DayID tinyint output)
AS 
SET DATEFIRST 6
select @DayID=datepart(dw,getdate())-1

GO



CREATE procedure get_DestinationOrgID(@DestinationServerIP varchar(30),@DestinationServerDB varchar(50),@DestinationSecID int,@DestinationOrgID int output)
as

SELECT     @DestinationOrgID=DestinationOrgID_inSource
FROM         RelatedSecretariats
WHERE     (DestinationServerIP = @DestinationServerIP) AND (DestinationServerDB = @DestinationServerDB) and DestinationSecID=@DestinationSecID


GO


CREATE PROCEDURE [get_FromOrganizationsTitle_byID]
	(@ID  	[int],
	 @Title  	[nvarchar](100) output,
	 @ResponsibleStaffer 	[nvarchar](50) output ,@code nvarchar(10) output )

AS select  @Title	 = Title,
	@ResponsibleStaffer	 = ResponsibleStaffer,
@code=code  from [dbo].[FromOrganizations] 

WHERE 
	( [ID]	 = @ID)

GO


CREATE procedure get_InnerOrganizations
as

SELECT * FROM FromOrganizations
where IsInnerOrg=1 and isactive=1
order by isactive desc

GO

CREATE procedure get_LastIndicatorID(@letter_type tinyint ,@SecretariatID int,@Myear int,
@LetterFormat tinyint,@newIndicatorid int output)
as
declare @RecivedInd int ,@SentInd  int,@innerind int,@Docind int
Select @RecivedInd=isnull(max(indicatorID),0)+1 from Letter where myear=@myear and LetterFormat=@LetterFormat
 and SecretariatID=@SecretariatID and letter_type=1 

Select @SentInd=isnull(max(indicatorID),0)+1 from Letter where myear=@myear and LetterFormat=@LetterFormat
 and SecretariatID=@SecretariatID and letter_type=2 


 Select @innerind=isnull(max(indicatorID),0)+1 from Letter where myear=@myear and LetterFormat=@LetterFormat
 and SecretariatID=@SecretariatID and letter_type=3

 Select @Docind=isnull(max(indicatorID),0)+1 from Letter where myear=@myear and LetterFormat=@LetterFormat
 and SecretariatID=@SecretariatID and letter_type=4

  if @RecivedInd<dbo.GetSystemValue(3) 
    set  @RecivedInd=dbo.GetSystemValue(3)


  if @SentInd<dbo.GetSystemValue(3) 
    set  @SentInd=dbo.GetSystemValue(3)

  if @innerind<dbo.GetSystemValue(3) 
    set  @innerind=dbo.GetSystemValue(3)


if @letter_type=3 
 begin
  set @newIndicatorid=@innerind
  return
 end
if @letter_type=4 
 begin
  set @newIndicatorid=@docind
  return
 end


 if dbo.GetSystemValue(5)=0
  begin
     if @SentInd>@RecivedInd
        set @newIndicatorid=@SentInd
       else
        set @newIndicatorid=@RecivedInd

  end

 if dbo.GetSystemValue(5)=1
   begin
    if @letter_type=1
     set @newIndicatorid=@RecivedInd
    if @letter_type=2
     set @newIndicatorid=@SentInd
   end

 if dbo.GetSystemValue(5)=2
  begin
   if @letter_type=2
      set @newIndicatorid=2*(1+(@SentInd-1)/2)

   if @letter_type=1
      set @newIndicatorid=2*(1+(@RecivedInd-1)/2)+1
  end

 if dbo.GetSystemValue(5)=3
  begin
   if @letter_type=1
      set @newIndicatorid=2*(1+(@RecivedInd-1)/2)

   if @letter_type=2
      set @newIndicatorid=2*(1+(@SentInd -1)/2)+1
  end

GO










CREATE PROCEDURE [get_LetterID_ByInCommingNo]
	(@InCommingNo nvarchar(50),@Myear tinyint,@LetterFormat tinyint,@SecretariatID smallint,@LetterID  int output)
AS 
set @letterid=0

SELECT     top 1 @LetterID=LetterID
FROM         Letter
WHERE     (replace(InCommingNo,' ','') =Replace(@InCommingNo,' ',''))
 and LetterFormat=@LetterFormat  and( Myear in (@Myear,@myear-1) ) and 
( SecretariatID=@SecretariatID or @SecretariatID=0)
order by Myear desc

 
GO







CREATE PROCEDURE [get_LetterID_ByIndicatorid]
	(@indicatrid int,@Myear tinyint,@LetterFormat tinyint,@letter_type tinyint,@SecretariatID smallint,@LetterID  int output)
AS 
set @letterID=0
SELECT    top 1 @LetterID=LetterID
from letter
where  
(indicatorid=@indicatrid  or @indicatrid=0) and 
(LetterFormat=@LetterFormat or @letterFormat=0)  and 
(letter_type=@letter_type  or @letter_type=0) and 
( SecretariatID=@SecretariatID or @secretariatid=0)
and(Myear=@Myear or Myear=@myear-1 or @myear=0)
order by Myear desc




GO











CREATE PROCEDURE [get_LetterID_ByRetroActionNo]
	(@RetroActionNo nvarchar(50),@Myear tinyint,@LetterFormat tinyint,@SecretariatID smallint,@LetterID  int output)
AS 
set @letterid=0
SELECT     top 1 @LetterID=LetterID
FROM         Letter
WHERE     (RetroActionNo =@RetroActionNo)
 and myear=@Myear  and LetterFormat=@LetterFormat  and 
( SecretariatID=@SecretariatID or @SecretariatID=0)


GO











CREATE PROCEDURE [get_LetterMemo_ByID]
	(@LetterID  int,@memo nvarchar(500) output)
AS 
SELECT     @memo=Memo
FROM         Letter
WHERE     (LetterID =@LetterID)



 
GO









CREATE PROCEDURE [get_Letter_ByIndicator]
	(@IndicatorID 	[int],
	 @MYear 	[tinyint],
	 @SecretariatID 	[tinyint],
	 @Letter_Type 	[tinyint],
	 @letterformat 	[tinyint])

AS 
SELECT     FromOrganizations.Title AS FromorgTitle, FromOrganizations_1.Title AS ToorgTitle,
 Letter.LetterID, Letter.IncommingNO, Letter.Incommingdate,Letter.Memo, Letter.RegistrationDate
FROM         Letter INNER JOIN
                      FromOrganizations ON Letter.FromOrgID = FromOrganizations.ID INNER JOIN
                      FromOrganizations FromOrganizations_1 ON Letter.ToOrgID = FromOrganizations_1.ID
WHERE 
	( [IndicatorID]	 = @IndicatorID AND
	 [MYear]	 = @MYear AND
	 [SecretariatID]	 = @SecretariatID AND
	 [Letter_Type]	 = @Letter_Type AND
	 [letterformat]	 = @letterformat)




 
GO










CREATE procedure get_MaxPage_ByLetterID(@extention tinyint,@letterid int,@PageNumber int output)
as

SELECT    @PageNumber=isnull(max(PageNumber),0)
FROM         LetterData
WHERE     (extention = @extention) AND (LetterID = @LetterID)



 
GO



create proc get_MaxReferenceDataID_By_TableID
@tableID int,@maxDataID int output
as
SELECT     @maxDataID=isnull(MAX(DataID)+1,1)
FROM         ReferenceTableData
WHERE     (TableID = @tableID)


 
GO




CREATE PROCEDURE [get_NewOrgID]
	(@isInner bit, @NewID [int] output)
AS 
 select @NewID=isnull(max(CAST(CODE AS float)),0)+1  from  FromOrganizations
WHERE ISNUMERIC(CODE)=1
 and replace(code,' ','') not in ('.','-')


GO


CREATE procedure get_NowTime (@time char(5)output)
as
select @time=case when datepart(hour,getdate())<10 then '0'+convert(char(1),datepart(hour,getdate()))
   else convert(char(2),datepart(hour,getdate())) end +':' + convert(char(2),datepart(minute,getdate()))






 
GO






CREATE procedure get_Nowdate(@date datetime output )
as
select @date=getdate()





go

CREATE PROCEDURE [get_OrgPreCodeByID]
	(@ID 	[int],@PreCode nvarchar(50) output)

AS 
select @PreCode=PreCode
 from FromOrganizations
 WHERE ( [ID]	 = @ID)



 
GO










CREATE PROCEDURE [get_OrgTitleByID]
	(@ID 	[int],@title nvarchar(250) output)

AS 
select @title=title
 from FromOrganizations
 WHERE ( [ID]	 = @ID)


 
GO




create procedure get_ReferenceTable
@like  nvarchar(100)
as
SELECT     Tables.*
FROM         Tables
WHERE     (TableType = 4) and description like '%'+@like+'%'




GO


create  procedure get_ReferenceTableData_by_tableID
@tableID int
as
SELECT     *
FROM         ReferenceTableData
WHERE     (TableID = @tableID)




GO


CREATE procedure get_UserExtention_by_UserID (@userID int )
as

SELECT UserExtention.*
FROM   UserExtention
WHERE (UserId = @UserId)
      and extentionid in (SELECT ExtentionID FROM Extention WHERE IsSystem = 0)







GO









CREATE procedure get_indicatorID_BySentLetterID(@SentLetterID int,@indicatorID int output)
as
select top 1 @indicatorID=indicatorID from letter where 
SentLetterID =@SentLetterID
 set @indicatorID=isnull(@indicatorID,-1)











GO



create procedure get_userTable
@like  nvarchar(100)
as
SELECT     Tables.*
FROM         Tables
WHERE     (TableType = 3) and description like '%'+@like+'%'

 
GO



CREATE procedure get_userfields_by_tableID
@tableID int
as
SELECT     Fields.*
FROM         Fields
WHERE     (Fields.TableID = @tableID)



 
GO







create procedure hassame_orgtitle(@title nvarchar(255),@id int output)
as
set @id=-1
select @id=id
from fromorganizations
where replace(title,' ','')=replace(@title,' ','')


GO



create  PROCEDURE [insertReCommites_autoID]
	(@LetterID 	[int],
	 @Type 	[tinyint],
	 @ParentId 	[smallint],
	 @OrgID 	[int],
	 @Paraph 	[nvarchar](500),
	 @RecommiteDate 	[varchar](10),
	 @UserID 	[tinyint],
	 @IsCopy 	[bit])

AS 
declare	 @ID int,@orgstaff nvarchar (50)

select @id=max(id)+1
from recommites
where Letterid=@LetterID

select @orgstaff=ResponsibleStaffer
from fromorganizations
where id=@OrgID

INSERT INTO [ReCommites] 
	 ( [LetterID],
	 [ID],
	 [Type],
	 [ParentId],
	 [OrgID],
	 [Paraph],
	 [RecommiteDate],
	 [UserID],
	 [IsCopy],orgstaff) 
 
VALUES 
	( @LetterID,
	 @ID,
	 @Type,
	 @ParentId,
	 @OrgID,
	 @Paraph,
	 @RecommiteDate,
	 @UserID,
	 @IsCopy,@orgstaff)



 
GO




CREATE PROCEDURE [insert_Actions]
	(@FormTag 	[tinyint],
	 @ID 	[int],
	 @Title 	[nvarchar](50))

AS INSERT INTO [dbo].[Actions] 
	 ( [FormTag],
	 [ID],
	 [Title]) 
 
VALUES 
	( @FormTag,
	 @ID,
	 @Title)





 
GO





CREATE PROCEDURE [insert_All_ReCommites]
AS INSERT INTO [dbo].[ReCommites] 
	 (
	 [LetterID],
	 [ID],
	 [Type],
	 [ParentId],
	 [OrgID],
	 [Paraph],
	 [RecommiteDate],
	 [UserID],
	 [IsCopy],
	 [Proceeded]) 
select letterid,1,3,0,fromorgid,'',registrationdate,userid,0,0 
from letter
where letterid not in (select distinct letterid from recommites)



GO








CREATE PROCEDURE [insert_ArchiveFolder]
	(@FolderID 	[int] output,
	 @ParentFolderID 	[int],
	 @Title 	[nvarchar](100),
	 @UserID 	[int],
	 @Notes 	[nvarchar](500),
              @Place nvarchar(100))

AS INSERT INTO [dbo].[ArchiveFolder] 
	 ( 
	 [ParentFolderID],
	 [Title],
	 [UserID],
	 [Notes],
                Place) 
 
VALUES 
	(
	 @ParentFolderID,
	 @Title,
	 @UserID,
	 @Notes,
@Place )

select @folderid= @@identity






GO

CREATE PROCEDURE insert_Extention
@ExtentionID int 
 AS


delete UserExtention where ExtentionID=@ExtentionID
INSERT INTO UserExtention (UserId, ExtentionID) select id,@ExtentionID from users




GO




CREATE PROCEDURE [insert_Letter]
	(@IndicatorID 	[int],
	 @MYear 	[tinyint],
	 @SecretariatID 	[tinyint],
	 @Letter_Type 	[tinyint],
	 @letterformat 	[tinyint],
	 @IncommingNO 	[nvarchar](50),
	 @Incommingdate 	[nvarchar](10),
	 @CenterNo 	[nvarchar](50),
	 @CenterDate 	[char](10),
	 @FromOrgID 	[int],
	 @ToOrgID 	[int],
	 @Signerid 	[nvarchar](50),
	 @ClassificationID 	[tinyint],
	 @UrgencyID 	[smallint],
	 @Memo 	[nvarchar](500),
	 @AttachTitle 	[nvarchar](50),
	 @NumberOfAttachPages 	[smallint],
	 @NumberOfPage 	[tinyint],
	 @ReceiveTypeID 	[tinyint],
	 @UserID 	[int],
	 @RetroactionNo 	[nvarchar](50),
	 @UserMemo 	[nvarchar](255),
	 @RegistrationDate 	[char](10),
	 @RegistrationTime 	[varchar](5),
	 @FollowLetterNo 	[nvarchar](50),
	 @ToStaffer 	[nvarchar](50),
	 @SentLetterID 	[int],
	 @TemplateID 	[int],
	 @HeaderID 	[int],
	 @LetterRecommites 	[nvarchar](500),
	 @FromStaffer 	[nvarchar](50),
	 @Finalized 	[bit],
	 @SendStatusID 	[tinyint],
@Exists bit output)


AS 
if exists (select *
from letter WHERE
	[IndicatorID]	 = @IndicatorID AND
	 [MYear]	 = @MYear AND
	 [SecretariatID] = @SecretariatID AND
	 [Letter_Type]	 = @Letter_Type AND
	 [letterformat]	 = @letterformat)
  set @Exists=1
 else
  set @Exists=0


if @Exists=0 
INSERT INTO [dbo].[Letter] 
	([IndicatorID],	 [MYear],	         [SecretariatID],[Letter_Type],	 [letterformat],
 	 [IncommingNO],	 [Incommingdate],	 [CenterNo],	 [CenterDate],	 [FromOrgID],	 [ToOrgID],
	 [Signerid],	 [ClassificationID],	 [UrgencyID],	 [Memo],	 [AttachTitle],	 [NumberOfAttachPages],
	 [NumberOfPage], [ReceiveTypeID],	 [UserID],	 [RetroactionNo],[UserMemo],
	 [RegistrationDate],[RegistrationTime],	 [FollowLetterNo],[ToStaffer],	 [SentLetterID],
	 [TemplateID],	 [HeaderID],	 [LetterRecommites],	 [FromStaffer],	 [Finalized],	 [SendStatusID]) 
 
VALUES 
	(@IndicatorID,	 @MYear,	         @SecretariatID, @Letter_Type,	 @letterformat,
	 @IncommingNO,	 @Incommingdate,	 @CenterNo,	 @CenterDate,	 @FromOrgID,	 @ToOrgID,
	 @Signerid,	 @ClassificationID,	 @UrgencyID,	 @Memo,	 @AttachTitle,	 @NumberOfAttachPages,
	 @NumberOfPage,	 @ReceiveTypeID,	 @UserID,	 @RetroactionNo,	 @UserMemo,
	 @RegistrationDate,	 @RegistrationTime,	 @FollowLetterNo,	 @ToStaffer,	 @SentLetterID,
	 @TemplateID,	 @HeaderID,	 @LetterRecommites,	 @FromStaffer,	 @Finalized,	 @SendStatusID)




GO


CREATE PROCEDURE [insert_LetterArchiveFolder]
(@LetterArchiveID 	[int] output,
	 @ArchiveFolderID 	[int],
	 @LetterID 	[int],
	 @ArchiveDate 	[char](10),
	 @Page 	[int],
	 @ArchiveNotes 	[nvarchar](50),@UserID int)

AS INSERT INTO [dbo].[LetterArchiveFolder]
	 ( 
	 [ArchiveFolderID],
	 [LetterID],
	 [ArchiveDate],
	 [Page],
	 [ArchiveNotes],UserID) 
 
VALUES 
	(
	 @ArchiveFolderID,
	 @LetterID,
	 @ArchiveDate,
	 @Page,
	 @ArchiveNotes,@UserID)

set @LetterArchiveID=@@identity


GO

CREATE PROCEDURE [insert_LetterData]
	(@LetterDataID 	[int] output,
	 @LetterID 	[int],
	 @PageNumber 	[tinyint],
	 @extention 	[tinyint])

AS INSERT INTO [dbo].[LetterData] 
	 (  [LetterID],
	 [PageNumber],
	 [extention]) 
 
VALUES 
	( @LetterID,
	 @PageNumber,
	 @extention)

set  @LetterDataID=@@identity


GO



CREATE PROCEDURE [insert_LetterText]
	(@LetterID int,
	 @TypeText   	ntext)
AS 
if exists(select * from [dbo].[LetterText] 
 WHERE     (LetterID = @LetterID))
update LetterText 
set TypeText=@TypeText
 WHERE     (LetterID = @LetterID)
else
INSERT INTO [dbo].[LetterText] 
	 ( [LetterID],
	 [TypeText]) 
 
VALUES 
	( @LetterID,
	 @TypeText  )





GO



CREATE PROCEDURE [insert_Letter_all]
	(@IndicatorID 	[int],	 @MYear 	[tinyint],	 @SecretariatID 	[tinyint],
	 @Letter_Type 	[tinyint],	 @letterformat 	[tinyint],	 @IncommingNO 	[nvarchar](50),
	 @Incommingdate 	[nvarchar](10),	 @CenterNo 	[nvarchar](50),	 @CenterDate 	[char](10),
	 @FromOrgID 	[int],	 @ToOrgID 	[int],	 @Signerid 	[nvarchar](50),
	 @ClassificationID 	[tinyint],	 @UrgencyID 	[smallint],	 @Memo 	[nvarchar](500),
	 @AttachTitle 	[nvarchar](50),	 @NumberOfAttachPages 	[smallint],	 @NumberOfPage 	[tinyint],
	 @ReceiveTypeID 	[tinyint],	 @UserID 	[int],	 @RetroactionNo 	[nvarchar](50),
	 @UserMemo 	[nvarchar](255),	 @RegistrationDate 	[char](10), @RegistrationTime 	[varchar](5),
	 @FollowLetterNo 	[nvarchar](50),	 @ToStaffer 	[nvarchar](50),	 @SentLetterID 	[int],
	 @TemplateID 	[int],	 @HeaderID 	[int],	 @LetterRecommites 	[nvarchar](500),
	 @FromStaffer 	[nvarchar](50),	 @Finalized 	[bit],	 @SendStatusID 	[tinyint],
@Exists bit output,
@LetterID int output)


AS 
if exists (select *
from letter WHERE 
	[IndicatorID]	 = @IndicatorID AND
	 [MYear]	 = @MYear AND
	 [SecretariatID] = @SecretariatID AND
	 [Letter_Type]	 = @Letter_Type AND
	 [letterformat]	 = @letterformat)
  set @Exists=1
 else
  set @Exists=0


if @Exists=0 
INSERT INTO .[dbo].[Letter] 
	([IndicatorID],	 [MYear],	         [SecretariatID],[Letter_Type],	 [letterformat],
 	 [IncommingNO],	 [Incommingdate],	 [CenterNo],	 [CenterDate],	 [FromOrgID],	 [ToOrgID],
	 [Signerid],	 [ClassificationID],	 [UrgencyID],	 [Memo],	 [AttachTitle],	 [NumberOfAttachPages],
	 [NumberOfPage], [ReceiveTypeID],	 [UserID],	 [RetroactionNo],[UserMemo],
	 [RegistrationDate],[RegistrationTime],	 [FollowLetterNo],[ToStaffer],	 [SentLetterID],
	 [TemplateID],	 [HeaderID],	 [LetterRecommites],	 [FromStaffer],	 [Finalized],	 [SendStatusID])
 
VALUES 
	(@IndicatorID,	 @MYear,	         @SecretariatID, @Letter_Type,	 @letterformat,
	 @IncommingNO,	 @Incommingdate,	 @CenterNo,	 @CenterDate,	 @FromOrgID,	 @ToOrgID,
	 @Signerid,	 @ClassificationID,	 @UrgencyID,	 @Memo,	 @AttachTitle,	 @NumberOfAttachPages,
	 @NumberOfPage,	 @ReceiveTypeID,	 @UserID,	 @RetroactionNo,	 @UserMemo,
	 @RegistrationDate,	 @RegistrationTime,	 @FollowLetterNo,	 @ToStaffer,	 @SentLetterID,
	 @TemplateID,	 @HeaderID,	 @LetterRecommites,	 @FromStaffer,	 @Finalized,	 @SendStatusID)

select @LetterID=Letterid 
from letter WHERE 
	[IndicatorID]	 = @IndicatorID AND
	 [MYear]	 = @MYear AND
	 [SecretariatID] = @SecretariatID AND
	 [Letter_Type]	 = @Letter_Type AND
	 [letterformat]	 = @letterformat


GO


CREATE PROCEDURE [dbo].[insert_ReCommites]
	(@LetterID 	[int],
	 @ID 	[smallint],
	 @Type 	[tinyint],
	 @ParentId 	[smallint],
	 @OrgID 	[int],
	 @Paraph 	[nvarchar](500),
	 @RecommiteDate 	[varchar](10),
	 @UserID 	[tinyint],
	 @IsCopy 	[bit],
	 @Proceeded 	[bit],
@RecommiteID int output)

AS

declare @OrgStaff nvarchar(50)
select top 1 @OrgStaff=ResponsibleStaffer	
from dbo.FromOrganizations 
WHERE 	id	 = @OrgID

 INSERT INTO [dbo].[ReCommites] 
	 (
	 [LetterID],
	 [ID],
	 [Type],
	 [ParentId],
	 [OrgID],
	 [Paraph],
	 [RecommiteDate],
	 [UserID],
	 [IsCopy],
	 [Proceeded],
OrgStaff) 
 
VALUES 
	( 
	 @LetterID,
	 @ID,
	 @Type,
	 @ParentId,
	 @OrgID,
	 @Paraph,
	 @RecommiteDate,
	 @UserID,
	 @IsCopy,
	 @Proceeded,
@OrgStaff )

set @RecommiteID=@@identity



GO




CREATE PROCEDURE [insert_ReciveLetter]
	(@letterID integer output,
  @IndicatorID 	int,
	 @MYear 	tinyint,
	 @SecretariatID 	tinyint,
	 @Letter_Type 	tinyint,
	 @letterformat 	tinyint,
	 @Memo 	nvarchar(500),
	 @UserID 	int,
	 @RegistrationDate 	char(10),
	 @RegistrationTime 	varchar(5),
  @OrgID int)
AS

declare @OrgStaff nvarchar(50)
select @OrgStaff=ResponsibleStaffer
from dbo.FromOrganizations
where id=@orgid


 INSERT INTO dbo.Letter 
(IndicatorID,	 MYear,	 SecretariatID,	 Letter_Type,	 letterformat,	 Memo,	 UserID,	 RegistrationDate,	 RegistrationTime,  FromOrgID) 
VALUES 
(@IndicatorID,	 @MYear,	 @SecretariatID,	 @Letter_Type,	 @letterformat,	 @Memo,	 @UserID,	 @RegistrationDate,	 @RegistrationTime,  @OrgID)

SET @LetterID=@@Identity


INSERT INTO dbo.ReCommites   (LetterID,	ID,	Type,	 ParentId,	 OrgID,	 Paraph,	 RecommiteDate,	 UserID,	 IsCopy,	 Proceeded,OrgStaff) 

values(@letterid,1,3,0,@orgid,'',@registrationdate,@userid,0,0,@OrgStaff)






GO


create PROCEDURE [insert_ToOrganizations]
	(@Title [nvarchar](100),@id int output)

AS 
declare @code varchar(50)
select @code =max(id)+1
from FromOrganizations

INSERT INTO [FromOrganizations] 
	 ( [Title],	 [ParentID],	 [IsActive],	 [IsInnerOrg],	 [Code]) 
VALUES 	( @Title,	 4,	 1,	 0,	 @code)

set @id=@@identity


GO









CREATE PROCEDURE [insert_UserLog]
	(@UserID 	[tinyint],
	 @ActionID 	[int],
	 @LetterID	[int])

AS INSERT INTO [dbo].[UserLog] 
	 ( [UserID],
	 [ActionID],
	 [LetterID]) 
 
VALUES
	( @UserID,
	 @ActionID,
	 @LetterID)








GO






CREATE PROCEDURE [insert_UserLoginLogout]
	( @UserID 	[int],
	 @IPAddress 	[char](15),
@UserLoginLogoutID int output)

AS 

INSERT INTO [dbo].[UserLoginLogout] 
	 ( [UserID],
	 [IPAddress]) 
 
VALUES 
	(
	 @UserID,
	 @IPAddress)
set @UserLoginLogoutID=@@identity



GO



CREATE PROCEDURE [insert_newActionsAccess]
AS 

delete from ActionsAccess where str(formtag)+str(ActionID) not in (select str(formtag)+str(ID) from 
actions)

INSERT INTO [dbo].[ActionsAccess] 
	 ( [AccessID],
	 [ActionID],
	 [FormTag],
	 [HasAccess]) 

SELECT     Accesses.ID,  Actions.ID,Actions.FormTag,1 
FROM         Accesses,Actions 
where str(accesses.id)+Str(actions.id) not in 
 (select str(accesses.id)+Str(actionid)  from dbo.ActionsAccess)


GO




CREATE PROCEDURE letterContainText
 @secID tinyint,@where nvarchar(500)
AS

 declare @sqlCommand nvarchar(4000)
set @where=ltrim(rtrim(isnull(@where,'')))

 set  @sqlcommand='SELECT    distinct Letter.LetterID, indicatorid, RegistrationDate, 
Memo, FromOrganizations.Title AS FromTitle, ToOrganizations.Title AS ToTitle
FROM         LetterText 
INNER JOIN   Letter on letter.letterid=LetterText.letterid
INNER JOIN     FromOrganizations ON FromOrgID = FromOrganizations.ID
INNER JOIN  FromOrganizations ToOrganizations ON ToOrgID = ToOrganizations.ID  where (Letter.SecretariatID='+cast(@secId as varchar(3)) +' or '+cast(@SeCID as varchar(3))+' = 0)'

if @where<>'' set @sqlcommand=@sqlcommand+' and '+@where
exec sp_executesql @sqlcommand


 
GO



























CREATE procedure min_page(@LetterID int,@haspage bit output,@minpage tinyint output)
as

SELECT     @minpage=MIN(PageNumber)
FROM         LetterData
 WHERE     (LetterID = @LetterID and extention=1)

if @minpage is null set @haspage=0 else set @haspage=1
set @minpage=isnull(@minpage,1)






GO







CREATE procedure org_hasLetter(@orgid int,@count int output)
as
set @count=0
select @count=count(1)
from recommites
where orgid=@orgid



 
GO











CREATE PROCEDURE selectAddedInfo
@where nvarchar(2000) 
as
declare @sqlCommand nvarchar(4000)
set @sqlcommand='SELECT *  FROM vw_AddedInfo AI '

if @where<>'' set @sqlCommand=@sqlCommand+'  where  '+@where
exec sp_executesql @sqlCommand





GO






CREATE PROCEDURE [select_CiticalLetterFields]
	@LetterID int

AS
select   LetterID, IndicatorID, MYear, SecretariatID, Letter_Type, letterformat
from Letter
WHERE LetterID=@LetterID




GO










CREATE PROCEDURE [select_Letter]
	@LetterID int

AS
select Letter.*,title senderTitle  from 
   Letter left JOIN
                      FromOrganizations ON Letter.ToOrgID = FromOrganizations.ID
WHERE 
	LetterID=@LetterID


 
GO









CREATE PROCEDURE [select_ReceivedLetters]
	@IndicatorID 	int,
	 @MYear 	tinyint,
	 @LetterFormat tinyint,@Secretariatid int

AS
SELECT     ReceivedLetters.*, FromOrgANIZATIONS.Title
FROM         ReceivedLetters 
INNER JOIN  FromOrgANIZATIONS ON ReceivedLetters.tOOrgID = FromOrgANIZATIONS.ID
WHERE 
	IndicatorID	 = @IndicatorID AND
	 MYear = @MYear and
              (LetterFormat=@LetterFormat or @letterformat=0) and
              Secretariatid=@Secretariatid



GO















create PROCEDURE select_fromorganization AS
SELECT    FromOrganizations.ID,  FromOrganizations_1.Title AS parent,FromOrganizations.ResponsibleStaffer,
FromOrganizations.Title
FROM         FromOrganizations INNER JOIN
                      FromOrganizations FromOrganizations_1 ON FromOrganizations.ParentID = FromOrganizations_1.ID
WHERE     (FromOrganizations.ParentID <> 1000001)
and FromOrganizations.id not like '9%'
ORDER BY cast(FromOrganizations.id as varchar(10))



GO













CREATE PROCEDURE [select_sentLetters]
	@IndicatorID 	int,
	 @MYear 	tinyint,
	 @LetterFormat tinyint,
              @Secretariatid tinyint

	 

AS
SELECT     SentLetters.*, FromOrgANIZATIONS.Title
FROM         SentLetters
INNER JOIN  FromOrgANIZATIONS ON SentLetters.ToOrgID = FromOrgANIZATIONS.ID
WHERE 
	IndicatorID	 = @IndicatorID AND
	 MYear = @MYear and
              (LetterFormat=@LetterFormat or @letterformat=0) and
              Secretariatid=@Secretariatid





GO












CREATE procedure select_userLoginLogout(@bdate char(10), @edate char(10), @userid int)
as
SELECT     Users.UserName, IPAddress, 
dbo.Shamsi(LoginTime) LoginDate,cast(datepart(hh, LoginTime) as varchar(2))+':'+cast (datepart(mi, LoginTime) as varchar(2)) LoginTime,
 dbo.Shamsi(LogoutTime) LogoutDate,cast(datepart(hh, LogoutTime) as varchar(2))+':'+cast (datepart(mi, LogoutTime) as varchar(2)) LogoutTime,
                      isSafeLogout
FROM         UserLoginLogout INNER JOIN
                      Users ON UserID = Users.Id
where dbo.Shamsi(LoginTime)  between @bdate and @edate







 
GO












create procedure shrink_Files(@number int,@dbanme nvarchar(50),@logPath nvarchar(255))
as
declare @i int
set @i=1 
while @i<=@number 
 begin
  dbcc shrinkfile(1,1)
  dbcc shrinkfile(2,1)
  exec(N'backup log '+@dbanme+' to disk='''+@logPath+'''')
  set @i=@i+1
  print 'stage '+cast(@i as varchar(3)) +' completetd. '
 end




GO









CREATE procedure sp_Add_GroupRecommite( @letterid int,@Type tinyint,@OrgID int,@Paraph nvarchar(500),@RecommiteDate char(10),
@UserID int ,@IsCopy bit ,@Proceeded bit,@OrgStaff nvarchar(100))
as


declare @id int

select  @id=max(id)
from recommites
where letterid=@letterid and type=@type

set @id=isnull(@id,0)

update recommites
set Proceeded=@Proceeded
where letterid=@letterid and id=@id and type=@type

INSERT INTO ReCommites
                      (LetterID, id,Type, ParentId,OrgID, Paraph, RecommiteDate, UserID, IsCopy, Proceeded, OrgStaff)
VALUES                (@letterid ,@id+1,@Type ,@Id,@OrgID ,@Paraph ,@RecommiteDate ,@UserID ,@IsCopy,0,@OrgStaff)



 
GO



CREATE PROCEDURE sp_CompleteFieldBook(@tableName varchar(50),@description varchar(50) ,
@tableid int output)
as
if @tablename is null return
if not exists( select *
from tables where  replace(
replace(tableName,'[',''),']','')= replace(replace(@tableName,'[',''),']',''))
begin
 select @tableid=max(tableid)+1 from tables
 insert into tables (tableid,tablename,description)
 values(@tableid,@tablename,@description)
end
else
if (select description from tables where  replace(
replace(tableName,'[',''),']','')= replace(replace(@tableName,'[',''),']','')) is null

update tablename
set description=@description
where    replace(replace(tableName,'[',''),']','')= replace(replace(@tableName,'[',''),']','')
 
select @tableid=tableid from tables where replace(replace(tableName,'[',''),']','')= replace(replace(@tableName,'[',''),']','')


insert into Fields(TableID, FieldName, Description,islike,isstring,everylike)
SELECT  @tableid,syscolumns_f.name,isnull((select cast(value as varchar(50)) from sysproperties where id = syscolumns_f.id AND smallid = syscolumns_f.colid and
 name='MS_Description'),syscolumns_f.name) Description,dbo.islike(systypes.name),
dbo.isstring(systypes.name),dbo.everylike(systypes.name,syscolumns_f.length)
FROM  sysobjects sysobjects_f
INNER JOIN syscolumns syscolumns_f ON sysobjects_f.id = syscolumns_f.id
inner join systypes on syscolumns_f.xtype=systypes.xtype
where replace(replace(sysobjects_f.name,'[',''),']','')=replace(replace(@tablename,'[',''),']','')
and  syscolumns_f.name not in (SELECT     FieldName
FROM         Fields
WHERE     (TableID = @tableid))
return @tableid


 
GO




CREATE PROCEDURE [sp_DelayedLetter]
@SecretariatID int,@myear tinyint,@DeadLine int, @userID int
as

declare
@sql nvarchar (4000),
@rw nvarchar(500),
@Today char(10),
@deadlineDate char(10),
@OrgID int,
@todayToint varchar(10)

select @today=dbo.shamsi(getdate())
set @todayToint=cast(dbo.ShamsiToInt(@today) as varchar(10))




SELECT     @OrgID=FromOrgID
FROM         Users
WHERE     Id = @userID

set @RW='WHERE (Rc.deadlinedate is not null or ChildRecommite.Deadlinedate is not null) and ( L.myear='+cast(@myear as varchar(10))+') AND (Rc.OrgID = '+
cast(@OrgID as varchar(10))+') '


if @SecretariatID>0
set @rw=@rw+' AND (SecretariatID = '+cast(@SecretariatID as varchar(10))+')'
else
set @rw=@rw+' AND (SecretariatID in (SELECT SecId FROM UserSecretariats WHERE UserId = '+cast(@userid as varchar(5))+'))'

 set @rw=@rw+' AND (case when Rc.Proceeded=1 and ChildRecommite.Proceeded=0 then ChildRecommite.DeadLineToint
     when Rc.Proceeded=0  then RC.DeadLineToint else  '''+@todayToint+''' end-'+@todayToint+' )< '+cast(@DeadLine as varchar(5))




set @sql=' SELECT count( *)
FROM ReCommites RC
INNER JOIN Letter L ON RC.LetterID = L.LetterID
left JOIN ReCommites ChildRecommite ON RC.LetterID = ChildRecommite.LetterID AND
RC.ID = ChildRecommite.ParentId  AND ChildRecommite.type = RC.type '

set @sql=@sql+@rW



exec sp_executesql  @sql

GO


create PROCEDURE sp_FieldByTableCode
 @tableid int
as
select *
from fields
where tableid=@tableid




GO



CREATE PROCEDURE sp_GetFromHelp 
@Formtag int
as
select htmlHelp
from FormsHelp
where formTag=@formtag







GO


CREATE PROCEDURE sp_GetTermCode(@today char(10)) 
AS
declare @Code char(3)
select top 1 @code=code
from behdasht..lt53 
where  @today between bdate and edate
order by 1 desc


if @code is null
select top 1 @code=code
from behdasht..lt53 
order by 1 desc

 
GO







CREATE procedure sp_Letter_Numbers
@bdate char(10),@edate Char(10),
@receivedNum int output,
@SentNum int output,
@recommitesNum int output,
@SecID int
as
set @receivedNum=0
set @SentNum=0
set @recommitesNum=0

select @receivedNum=count(*) from Letter where registrationdate between @bdate and @edate and (secretariatid=@SecID or @SecID=0) and Letter_type=1
select @SentNum=count(*) from Letter where registrationdate between @bdate and @edate and (secretariatid=@SecID or @SecID=0) and Letter_type=2
select @recommitesNum=count(*)-@SentNum-@receivedNum from ReCommites
inner join letter on letter.letterid=ReCommites.LetterId where ReCommitedate between @bdate and @edate and (secretariatid=@SecID or @SecID=0)




GO








create procedure sp_Recommites_Number
@bdate char(10),@edate Char(10) as
SELECT     Title,
 sum(case when Proceeded=1 then 1 else 0 end) as Proceed,
sum(case when Proceeded=0 then 1 else 0 end) as NotProceed, 
sum(case when Proceeded=1 then dbo.ShamsiDateDiff(RecommiteDate, ProceedDate) else 0 end) SumProceed into #m
FROM         ReCommites INNER JOIN
                      FromOrganizations ON ReCommites.OrgID = FromOrganizations.ID
WHERE     (RecommiteDate BETWEEN @bdate AND @edate)
group by title

SELECT     *,case when Proceed>0 then  round(cast(SumProceed as float)/Proceed,2)  else 0 end as avgProceed
FROM         #m



 
GO





CREATE PROCEDURE [sp_ReindexTables]
as
declare  @Name varchar(50)
declare  @SQL nvarchar(100)
declare Main_Cursor cursor for  
           select name from sysobjects
           where type='U' order by name
 open  Main_Cursor 
 fetch next from Main_Cursor into @Name

 while @@Fetch_Status=0 
  begin
    set @sql='dbcc dbreindex( ['+@name+'] )'
    print @sql+'...'
    exec sp_executesql @SQL        
   fetch next from Main_Cursor into @Name
  end 

 close Main_Cursor
 deallocate Main_Cursor



GO








CREATE PROCEDURE [sp_SetForeinKey]
 @inp bit
as
declare  @SQL nvarchar(4000)
set @sql=''
if @inp=0
 select   @sql= @sql+'
        alter table '+name+' nocheck constraint all'
 from sysobjects     where type='U' 
else
 select   @sql= @sql+'
        alter table '+name+' check constraint all'
 from sysobjects     where type='U' 


    exec sp_executesql @SQL



 
GO










CREATE  procedure sp_Statistic
@Secretariatid int,@myear tinyint,@Letter_Type int,@LetterFormat int, @where nvarchar(2000),@archiveFolderID int,@GroupBy int
as 

set @where= case when isnull(ltrim(rtrim(@where)),'')<>'' then
                          'where len(registrationdate)=10 and '+@where else ' where len(registrationdate)=10' end

if @Letter_Type<>0 
  set @where=@where+' and (Letter_Type = '+Cast(@Letter_Type as varchar(5))+')'

if @Secretariatid<>0 
  set @where=@where+' and (Secretariatid = '+Cast(@Secretariatid as varchar(5))+')'

if @Myear<>0 
  set @where=@where+' and (myear = '+Cast(@myear as varchar(5))+')'

if @LetterFormat<>0 
  set @where=@where+' and (LetterFormat = '+Cast(@LetterFormat as varchar(5))+')'



declare @sql nvarchar(4000),@select  varchar(500),@joins varchar(500)



set @joins =case when @groupby<8         then ' '
                             when @groupby=8 then ' left JOIN Classifications ON Letter.ClassificationID = Classifications.ID '                     
                             when @groupby=9 then ' left JOIN Urgenceis ON Letter.UrgencyID = Urgenceis.ID '                     
                             when @groupby=10 then ' left JOIN  Fromorganizations  ToOrganizations ON Letter.ToOrgID = ToOrganizations.ID '
                             when @groupby=11 then ' left JOIN  Fromorganizations   ON Letter.FromOrgID = Fromorganizations.ID '   
                             when @groupby=12 then ' left JOIN  users   ON Letter.userid = users.ID '   end

           


declare @Field varchar(100)
set @field= case @groupby 
                         when 1  then 'registrationdate '
                          when 2  then 'dbo.ShamsiDayOfWeek(registrationdate) '
                          when 3  then 'substring(registrationdate,6,2) '
                          when 4  then 'dbo.fasl(registrationdate) '
                          when 5  then 'substring(registrationdate,1,4) '
                          when 6  then 'substring(registrationTime,1,2) '
                          when 7  then 'dbo.pm(registrationtime) '
                          when 8  then 'Classifications.Title '
                          when 9  then 'Urgenceis.Title '
                          when 10 then 'ToOrganizations.title ' 
                          when 11 then 'FromOrganizations.title ' 
                          when 12 then 'users.title ' end

set @select ='select '+@field+' ,count(1)  from letter '

create table ##s(id int identity(1,1),title nvarchar(255),number int)


set @sql=' insert  into ##s(title,number) '+@select+  @joins+@where+
+'group by '+@field +' order by 2 desc '

exec(@sql)

if @groupby in (1,10,11)
 begin
   declare @c int,@d int
   select  @d=number from ##s where id=50 
   set @d=isnull(@d,0)
   select @c=sum(number) from ##s where number<=@d
   delete from ##s where number<=@d
   set  IDENTITY_INSERT ##s On
   insert into ##s(id,title,number) values(50,'”«Ì— ',@c)
 end
  
 
create table #s(id int identity(1,1),title nvarchar(255),number int)

insert into #s(title,number)
select title,number from ##s order by title

select cast(id as int) id ,title,number
from #s
order by title

drop table ##s

 

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


 
GO






CREATE    PROCEDURE [sp_board] 
@OrgID int,@myear tinyint,@date char(10)
as
if isnull(@date,'')='' set @date='0'

SELECT SL.IndicatorID, SL.MYear, SL.SecretariatID, SL.Letter_type, SL.LetterFormat, 
SL.FromOrgID, SL.ToOrgID,  SL.UrgencyID,  SL.Memo, SL.AttachTitle,
 SL.RegistrationDate, SL.RegistrationTime, SL.FollowLetterNo, SL.ToStaffer,
  RC.Paraph, RC.RecommiteDate, '' no1
FROM ReCommites RC 
INNER JOIN SentLetters SL ON RC.LetterIndicatorID = SL.IndicatorID AND RC.LetterMyear = SL.MYear AND
 RC.SecretariatID = SL.SecretariatID AND RC.LetterFormat = SL.LetterFormat 
INNER JOIN RecommiteTypes ON RC.Type = RecommiteTypes.ID
WHERE    (Rc.OrgID = @OrgID)and RecommiteTypes.InnerOrganize=1 
and sl.myear=@myear and (RC.RecommiteDate=@date or @date='0')
 and RecommiteTypes.ReceiveMode=0
union
SELECT RL.IndicatorID, RL.MYear, RL.SecretariatID, RL.Letter_type, RL.LetterFormat, 
RL.FromOrgID, RL.ToOrgID,  RL.UrgencyID,  RL.Memo, RL.AttachTitle,
 RL.RegistrationDate, RL.RegistrationTime, RL.FollowLetterNo, RL.ToStaffer,
  RC.Paraph, RC.RecommiteDate,  no1
FROM ReCommites RC 
INNER JOIN ReceivedLetters RL ON RC.LetterIndicatorID = RL.IndicatorID AND RC.LetterMyear = RL.MYear AND 
 RC.SecretariatID = RL.SecretariatID AND RC.LetterFormat = RL.LetterFormat 
INNER JOIN RecommiteTypes ON RC.Type = RecommiteTypes.ID
WHERE  (Rc.OrgID = @OrgID) and RecommiteTypes.ReceiveMode=1 and RecommiteTypes.InnerOrganize=1 
and rl.myear=@myear  and (RC.RecommiteDate=@date or @date='0')
order by 1 desc

GO









CREATE proc sp_checkusernotes
@USERID INT ,@DateID int ,@where nvarchar(1000)
AS
 declare @sql nvarchar (4000)

set @sql=' SELECT top 10000 *,substring(note,1,100)+'' ...'' as Abstract  from UserNote where userid='+cast(@USERID as varchar(5))
set @where =ltrim(rtrim(isnull(@where ,'')))
if @where <>'' 
set @sql=@sql+' and '+@where 

if @DateID<>0
begin
 declare @today char(10),@dw tinyint,@bdate char(10),@edate char(10)
 set @today=dbo.shamsi(getdate())
 set @dw=datepart(dw,getdate())
 select @bdate=begindate,@edate=Enddate from HistoryDateList(@today ,@dw) where id=@DateID
 set @sql=@sql+' AND CreateDate between '''+@bdate+''' and '''+@edate+''''
end

exec sp_executesql @sql


GO


CREATE     PROCEDURE [sp_dailyRep] 
@myear tinyint,@bdate char(10),@edate char(10),@where nvarchar(1000)
as
 declare @sql nvarchar (4000)

declare @rw nvarchar(255)

set @RW='WHERE l.myear=l.myear'--+cast(@myear as varchar(10))


set @rw=@rw+' AND (L.RegistrationDaTE between '''+@bdate+''' and '''+@edate+''')'

set @sql='select distinct l.LetterID, IndicatorID, Memo, AttachTitle,RegistrationDate,  ToStaffer, FollowLetterNo, 
UserMemo, RetroactionNo, NumberOfPage, NumberOfAttachPages, CenterDate, CenterNo,IncommingDate,
lettertypes.title ReceiveMode ,SentLetterID, Incommingno,
lETTERrecommites rECOMMITES,TTO.title toorgtitle
FROM ReCommites RC 
INNER JOIN Letter L ON RC.LetterID = l.LetterID 
left JOIN ReCommites PRC ON RC.LetterID = PRC.LetterID AND PRC.ID = RC.ParentId 
left JOIN FromOrganizations FO ON FO.ID = PRC.OrgID 
left JOIN fromOrganizations TTO ON TTO.ID = l.ToOrgID 
LEFT JOIN LETTERTYPES on lettertypes.id=l.letter_type
left JOIN RecommiteTypes ON RC.Type = RecommiteTypes.ID '+@rW



set @where=isnull(ltrim(rtrim(@where)),'')
if @where<>''
select @sql=@sql+' and  '+@where

set @sql=@sql+' order by 1 desc'
exec(@sql)








GO




CREATE  procedure  sp_delphi_Proc (@spN varchar(50) )
as

declare @line1 varchar(1000),@line2 varchar(8000),@id int, @count int ,@spname varchar(100),@spType varchar(50),@colname varchar(100),
@isoutparam bit,@temp int,@length int,@isFunction bit ,@Rtype nvarchar(100),@Rpname nvarchar(100)

  SELECT    identity(int,1,1) id, name  into #m
  FROM         sysobjects
  WHERE     (xtype = 'p') AND (status >= 0)
         and (isnull(@spn,'')='' or name like '%'+@spn) 


select @count=max(id)
from #m

set @id=1

while @id<=@count 
 begin
   select @spname=name from #m where id=@id
   declare spcol cursor for
    select substring(syscolumns.name,2,100),max(dbo.delphiType(systypes.name)),max(colid),max( isoutparam),max(syscolumns.length)
    FROM    syscolumns INNER JOIN
            sysobjects ON syscolumns.id = sysobjects.id INNER JOIN
            systypes ON syscolumns.xtype = systypes.xtype
    WHERE     (sysobjects.xtype = 'p') AND (sysobjects.name = @spname)
    group by substring(syscolumns.name,2,100)
   order by 3

if (    select count(syscolumns.name)
    FROM    syscolumns INNER JOIN
            sysobjects ON syscolumns.id = sysobjects.id 
    WHERE      (sysobjects.name =@spname) and syscolumns.isoutparam=1)=1 
set @isFunction =1
else 
set @isFunction=0

    open  spcol
    fetch next from spcol into @colname,@spType,@temp,@isoutparam,@length
    set @line1=case when @isfunction=0 then 'Procedure  ' else 'function ' end+'Exec_'+@spname+'('
    set @line2='';

    while @@Fetch_Status=0 
     begin
      if @colname='type' set @colname='_Type'
      set @line1=@line1+case when @isfunction=0 or @isoutparam=0 then  @colname+':'+@spType+';' else '' end
      set @line2=@line2+'
  with ADOSP.Parameters.AddParameter do
      begin
      DataType := ft'+@spType+';
      Direction := '+case @isoutparam when 0 then 'pdInput;' else 'pdoutput;' end +'
      Name:=''@'+@colname+''';'+case when @spType like '%string%' then '
      size:= '+cast(@length as varchar(10))+';' else '' end+
case @isoutparam when 0 then  '
      Value :='+@colname+';
' else '' end +'
    end;
'
if  @isoutparam=1 set  @Rtype=@spType;
if  @isoutparam=1 set  @Rpname=@colname;
    fetch next from spcol into @colname,@spType,@temp,@isoutparam,@length
     end;
if @line1 like '%;' set @line1=substring(@line1,1,len(@line1)-1)
set @line1=@line1+case when  @isfunction=0 then ');' else '):'+@Rtype+';' end 
    print replace(@line1+'
'+@line1+'
 var ADOSP:TADOStoredProc;  
 begin
  ADOSP:=TADOStoredProc.create(nil);
  ADOSP.ProcedureName:='''+@spname+''';
',';;',';')
PRINT @LINE2

    print
'    ADOSP.Connection:=dm.YeganehConnection; 
    ADOSP.ExecProc;    
'+case when @isfunction=0 then '' else 
'   Result:=ADOSP.Parameters.ParamByname(''@'+@Rpname+''').value;' end+'
end;'


  close spcol
  deallocate spcol
  set @id=@id+1
 end



GO




CREATE   PROCEDURE [sp_distinctDate] 
as
 declare @today char(10),@dw tinyint
 set @today=dbo.shamsi(getdate())
 set @dw=datepart(dw,getdate())
 select * from 
 HistoryDateList(@today ,@dw) 
 order by id




GO




CREATE procedure sp_duplicateOrg(@code nvarchar(50),@title nvarchar(100),@exsits bit output)
as

if exists (
SELECT   *
FROM         FromOrganizations
WHERE     (replace(Code,' ','') = replace(@code,' ',''))   )
set @exsits=1
else
set @exsits=0






GO









CREATE PROCEDURE [sp_inbox]
@SecretariatID int, 
@LetterFormat tinyint,
@OrgID int,
@Proceeded bit,
@Type tinyint,@myear tinyint,@date tinyint,@ArchiveFolderID int ,@where nvarchar(1000),
@userID int,@Letter_Type int,@DeadLine int,@orderClause varchar(50)=' rc.recommitedate desc,l.indicatorid desc'
as
declare
@sql nvarchar (4000),
@rw nvarchar(2000),
@Today char(10),
@Proceed bit,-- @Proceed
@todayToint varchar(10)

select @today=dbo.shamsi(getdate())

set @Proceed=@Proceeded

set @RW='WHERE    (Rc.OrgID = '+
cast(@OrgID as varchar(10))+') AND (Rc.Proceeded = '+cast(@Proceeded as varchar(2))+')
  and  L.myear='+cast(@myear as varchar(10))

if @LetterFormat>0 set @rw=@rw+' and (l.LetterFormat ='+cast( @LetterFormat as varchar(2))+')'
else set @rw=@rw+' and (l.LetterFormat in (1,2))'


if @letter_Type>0
set @rw=@rw+' AND (l.letter_Type = '+cast(@Letter_Type as varchar(2))+')'

if @type>0
set @rw=@rw+' AND (Rc.Type = '+cast(@Type as varchar(2))+')'

if @ArchiveFolderID>0
set @rw=@rw+' AND (ArchiveFolderID = '+cast(@ArchiveFolderID as varchar(10))+')'

if @date<>0
begin
 declare @dw tinyint,@bdate char(10),@edate char(10)
 set @dw=datepart(dw,getdate())
 select @bdate=begindate,@edate=Enddate from HistoryDateList(@today ,@dw) where id=@date
 set @rw=@rw+' AND (RC.RecommiteDate between '''+@bdate+''' and '''+@edate+''')'
end

if @SecretariatID>0
set @rw=@rw+' AND (SecretariatID = '+cast(@SecretariatID as varchar(10))+')'
else
set @rw=@rw+' AND (SecretariatID in (SELECT SecId FROM UserSecretariats WHERE UserId = '+cast(@userid as varchar(5))+'))'


set @todayToint=cast(dbo.ShamsiToInt(@today) as varchar(10))

if @DeadLine between -1 and 30
 set @rw=@rw+' AND ('+
case when @Proceed=1 then 'case when ChildRecommite.Proceeded=0 then ISNULL(ChildRecommite.DeadLineToint,'+@todayToint+') else  '''+@todayToint+''' end '
else  'ISNULL(RC.DeadLineToint ,'+@todayToint+') ' end+' -'+@todayToint+' )<= '+cast(@DeadLine as varchar(5))


set @sql=' SELECT top 100  L.LetterID,L.SignerID, L.IndicatorID, L.MYear, L.SecretariatID, L.Letter_Type, L.letterformat, L.IncommingNO, L.Incommingdate, L.ClassificationID,
L.UrgencyID, L.Memo, L.Tostaffer,l.SentLetterID,L.AttachTitle, L.NumberOfAttachPages, L.NumberOfPage, L.ReceiveTypeID, L.UserID, L.RetroactionNo, L.UserMemo, L.RegistrationDate,
l.toorgid,l.fromorgid,L.FollowLetterNo, L.LetterRecommites,l.finalized,l.CenterNo,l.CenterDate,l.templateID,l.headerID,
l.registrationTime,l.fromstaffer,l.sendStatusID,L.LastUpdate,L.UserTableID,
DBO.INNERNO(L.Letterid)  InnerNo, PRC.OrgID,  RC.ParentId,  RC.Paraph, RC.RecommiteDate,  RC.Proceeded,
 RC.ProceedDate, RecommiteTypes.id ReType,RecommiteTypes.Title RecommitTypeTitle,
case when fo.title is null then 0 else 1 end IsInner, isnull(FO.Title,TTO.title) RecommiterTitle,tto.title sendertitle,rc.recommiteid,
 rc.id, RC.ViewDate, RC.StaffMemo,

isnull(incommingno,indicatorid)  Yincommingno,Secretariats.PreCode,RC.IsCopy
,dbo.has_Page(l.letterid) has_Page,
dbo.has_WordPage(l.letterid) has_WordPage,
dbo.has_file(l.letterid) has_file,'''' FirstView,'+
'isnull('+
case when @Proceed=1 then 'ChildRecommite.DeadLineToint' else 'RC.DeadLineToint' end+'-'+@todayToint+',0) DeadLineDays,'+
case when @Proceed=1 then 'ChildRecommite.DeadLineDate ' else  'RC.Deadlinedate  ' end+' DeadLineDate ,'+
case when @Proceed=1 then 'ISNULL(ChildRecommite.Paraph,RC.Paraph) '   else ''' ''' end +' ChildParaph ,'+
case when @Proceed=1 then 'RecommitedOrg.Title '   else ''' ''' end +' ChildOrg, '+
case when @Proceed=1 then ' ChildRecommite.ActionTypeID'  else  ' RC.ActionTypeID'   end +' ActionTypeID '+
'FROM ReCommites RC
INNER JOIN Letter L ON RC.LetterID = L.LetterID
INNER JOIN Secretariats  ON Secretariats.Secid = L.SecretariatID
left JOIN ReCommites PRC ON RC.LetterID = PRC.LetterID AND PRC.ID = RC.ParentId  AND PRC.type = RC.type
left JOIN FromOrganizations FO ON FO.ID = PRC.OrgID
left JOIN FromOrganizations TTO ON TTO.ID = L.ToOrgID 
INNER JOIN RecommiteTypes ON RC.Type = RecommiteTypes.ID '+
case when @Proceed=1 then '
left JOIN ReCommites ChildRecommite ON RC.LetterID = ChildRecommite.LetterID AND RC.ID = ChildRecommite.ParentId  AND ChildRecommite.type = RC.type 
left JOIN FromOrganizations RecommitedOrg ON RecommitedOrg.ID = ChildRecommite.OrgID '
else '' end

if @archiveFolderID<>0  
set @sql=@sql+' 
Left join LetterArchiveFolder on LetterArchiveFolder.Letterid=Rc.RecommiteID '

set @sql=@sql+@rW


set @where=isnull(ltrim(rtrim(@where)),'')
if (@where<>'') 
select @sql=@sql+' and '+@where

if isnull(ltrim(@orderClause),'')='' 
 set @orderClause=' rc.recommitedate desc,l.indicatorid desc'


set @sql=@sql+' order by '+@orderClause
exec sp_executesql  @sql
PRINT @sql


GO






CREATE PROCEDURE [update_ArchiveFolder]
	(@FolderID 	[int],
	 @Title 	[nvarchar](100),
	 @Notes 	[nvarchar](500),
 @Place nvarchar(100))

AS UPDATE [dbo].[ArchiveFolder] 

SET  [Title]	 = @Title,
	 [Notes]	 = @Notes,
 Place=@Place

WHERE 
	( [FolderID]	 = @FolderID)



GO









CREATE procedure update_FromOrganizations_Title(@ID INT, @Newtitle nVARCHAR(200),@NewResponsibleStaffer nvarchar(100),@newID int output)
as
insert into FromOrganizations(Title, ParentID, Phone, Fax, Email, ResponsibleStaffer, IsActive, PreCode, IsInnerOrg, Code)
select @Newtitle, ParentID, Phone, Fax, Email, @NewResponsibleStaffer, IsActive, PreCode, IsInnerOrg, Code
from FromOrganizations
where ID=@ID

set @newID=@@identity

Update FromOrganizations
set Isactive=0,Code='_'+Code
where ID=@ID



Update FromOrganizations
set ParentId=@newID
where ParentId=@ID



GO








create PROCEDURE [update_LetterText]
	(@LetterID  	int,
	 @TypeText   	[nvarchar](4000))

AS UPDATE [dbo].[LetterText] 

SET 	 [TypeText]	 = @TypeText 

WHERE 
	( LetterID = @LetterID  )

GO




CREATE PROCEDURE [update_Letter_Finalized]
	(@LetterID 	[int],
	 @Finalized 	[bit])

AS 
UPDATE .[dbo].[Letter]  
SET  [Finalized]	 = @Finalized  
WHERE  ( [LetterID]	 = @LetterID)

 
GO










CREATE PROCEDURE [update_Letter_Indicator]
	(@LetterID 	[int],
	 @NewIndicatorID 	[int],
	 @NewSecretariatID 	[tinyint],
	 @NewLetter_Type 	[tinyint],
	 @Newletterformat 	[tinyint],
	 @NewRegistrationDate 	[char](10),@Updated bit output)

AS
declare @myear int
select @myear=myear
from letter 
where ( [LetterID]	 = @LetterID)


set @updated=1


if not exists (SELECT   *  
FROM         Letter
WHERE     (IndicatorID = @NewIndicatorID) AND (MYear = @myear) AND (SecretariatID = @NewSecretariatID) AND (Letter_Type = @NewLetter_Type) AND (letterformat = @Newletterformat))
 UPDATE [dbo].[Letter] 

SET  [IndicatorID]	 = @NewIndicatorID,
	 [SecretariatID]	 = @NewSecretariatID,
	 [Letter_Type]	 = @NewLetter_Type,
	 [letterformat]	 = @Newletterformat,
	 [RegistrationDate]	 = @NewRegistrationDate 

WHERE 
	( [LetterID]	 = @LetterID)
else 
set @updated=0






GO




CREATE PROCEDURE [update_ReCommites_proceed]
	(@RecommiteID int,
	 @Proceeded 	[bit],
	 @ProceedDate 	[nvarchar](10),
 @actionTypeID tinyint)

AS UPDATE [dbo].[ReCommites] 


SET  [Proceeded]	 = @Proceeded,
	 [ProceedDate]	 = @ProceedDate ,
      actionTypeID=@actionTypeID

WHERE 
	( RecommiteID	 = @RecommiteID)



GO

CREATE PROCEDURE [update_ReCommites_viewDate]
	(@RecommiteID int,
	 @ViewDate 	[char](10))

AS UPDATE [dbo].[ReCommites] 

SET  	 ViewDate=@ViewDate


WHERE 
	( RecommiteID	 = @RecommiteID)





GO



CREATE PROCEDURE [update_UserLoginLogout]
	( @UserLoginLogoutID	[int],
	 @isSafeLogout 	[bit])

AS
 UPDATE [dbo].[UserLoginLogout] 

SET          [LogoutTime]	 = getdate(),
	 [isSafeLogout]	 = @isSafeLogout 

WHERE 	( [UserLoginLogoutID]	 = @UserLoginLogoutID)







GO


create proc update_letter_sendstatusID( @LetterID int ,@SendStatusID tinyint)
as
UPDATE    Letter
SET              SendStatusID = @SendStatusID
WHERE     (LetterID = @LetterID)


GO




create procedure ysp_Backup(@dbname nvarchar(50),@path nvarchar(255))
 as
Exec('backup database '+@dbname+' to disk='''+@path+'''')








GO





CREATE PROCEDURE ysp_DELETE_Temp_Database
AS
if exists (SELECT name
FROM master.dbo.sysdatabases
WHERE name = 'yeganeh_tmp_db')
drop database [yeganeh_tmp_db]



GO



CREATE PROCEDURE ysp_exists_Temp_Database(@exists bit output)
AS
if exists (SELECT name
FROM master.dbo.sysdatabases
WHERE name = 'yeganeh_tmp_db')
  set @exists=1  else set @exists=0













GO











CREATE procedure ysp_shrink(@dbname nvarchar(50),@path nvarchar(255))
 as
Exec('backup log '+@dbname+' with truncate_only')

  dbcc shrinkfile(1,1)
 dbcc shrinkfile(2,1)

GO


CREATE Procedure Update_Archived_letter
@Letterid int,@archived bit
as

UPDATE    Letter
SET        archived = @archived  
WHERE     (LetterID = @LetterID)



GO

-- 86 -8- 13


CREATE  procedure Get_UserMessageCount(@to int,@count int output)
as
SELECT   @count=  COUNT(*) 
FROM         UserMessage
WHERE     (To_ = @to) and status=1

GO







CREATE PROCEDURE [get_NewOrgCode]
	(@ParentID [int] ,@newCode nvarchar(50) output)
AS 
declare @ParentCode nvarchar(50),@maxCode Nvarchar(50)

select @ParentCode=Code from Fromorganizations where id=@Parentid
select @maxCode=max(code) from  Fromorganizations where Parentid=@Parentid

if @maxCode is not null and isnumeric(@maxcode)=1
    set @newCode=cast(cast(@maxcode as int)+1 as nvarchar(50))
    
else
set @newCode=@parentCode+'01'

set @newcode=Replace(ltrim(rtrim(@newCode)),' ','0')


GO






create procedure get_Subject
@like  nvarchar(100)
as
SELECT     *
FROM         Subject
WHERE    subjectTitle like '%'+@like+'%'

GO


CREATE PROCEDURE [select_LetterSubject]
	@LetterID int

AS
SELECT    registrationdate,registrationtime,indicatorid, LetterID, SubjectID, SubjectDescription, UserMemo,lastupdate
FROM         Letter
WHERE     LetterID=@LetterID


 

GO
CREATE Procedure Get_Letter_By_UserMemo
@UserMemo nvarchar(255),@Letter_Type tinyint
as
SELECT   Letter.LetterID,letter.Letter_Type, Letter.IndicatorID, Letter.MYear, Secretariats.SecTitle, LetterTypes.Title AS LetterType, Letter.IncommingNO,
                      Letter.Incommingdate, Letter.Memo, Letter.AttachTitle, Letter.RetroactionNo, Letter.UserMemo, Letter.RegistrationDate, Letter.FollowLetterNo, 
                      Letter.SubjectDescription, Subject.SubjectTitle, Classifications.Title AS ClassificationTitle, FromOrganizations_1.Title AS FromTitle, 
                      FromOrganizations.Title AS ToTitle
FROM         Letter INNER JOIN
                      Secretariats ON Letter.SecretariatID = Secretariats.SecID INNER JOIN
                      LetterTypes ON Letter.Letter_Type = LetterTypes.ID INNER JOIN
                      FromOrganizations ON Letter.FromOrgID = FromOrganizations.ID INNER JOIN
                      FromOrganizations FromOrganizations_1 ON Letter.ToOrgID = FromOrganizations_1.ID INNER JOIN
                      Classifications ON Letter.ClassificationID = Classifications.ID LEFT OUTER JOIN
                      Subject ON Letter.SubjectID = Subject.SubjectID
WHERE     (Letter_Type=@Letter_Type or @Letter_Type=0) and (Letter.UserMemo like '%'+@UserMemo+'%')  
union 
SELECT   Letter.LetterID,letter.Letter_Type, Letter.IndicatorID, Letter.MYear, Secretariats.SecTitle, LetterTypes.Title AS LetterType, Letter.IncommingNO,
                      Letter.Incommingdate, Letter.Memo, Letter.AttachTitle, Letter.RetroactionNo, Letter.UserMemo, Letter.RegistrationDate, Letter.FollowLetterNo, 
                      Letter.SubjectDescription, Subject.SubjectTitle, Classifications.Title AS ClassificationTitle, FromOrganizations_1.Title AS FromTitle, 
                      FromOrganizations.Title AS ToTitle
FROM         Letter INNER JOIN
                      Secretariats ON Letter.SecretariatID = Secretariats.SecID INNER JOIN
                      LetterTypes ON Letter.Letter_Type = LetterTypes.ID INNER JOIN
                      FromOrganizations ON Letter.FromOrgID = FromOrganizations.ID INNER JOIN
                      FromOrganizations FromOrganizations_1 ON Letter.ToOrgID = FromOrganizations_1.ID INNER JOIN
                      Classifications ON Letter.ClassificationID = Classifications.ID LEFT OUTER JOIN
                      Subject ON Letter.SubjectID = Subject.SubjectID
WHERE     usermemo like '%-%' and 
@usermemo between ltrim(rtrim(substring(UserMemo,1,charindex('-',usermemo)-1))) and  ltrim(rtrim(substring(UserMemo,charindex('-',usermemo)+1,100)))
and (Letter_Type=@Letter_Type or @Letter_Type=0) 
GO


-----------------------------------------------------------------------  Tables  ------------------------------------------------------------------------------------                                                                                                   
                                                                                                                                                                                                               
---------------------------------------------------------------------------------------------------------------------------------------------------------------------




if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[LetterHeaders]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[LetterHeaders]
GO



go
if not exists (select * from sysobjects where name='DF_letterdata_pageNumber')
ALTER TABLE dbo.letterdata ADD CONSTRAINT
	DF_letterdata_pageNumber DEFAULT 0 FOR pageNumber
go
DELETE FROM ApplicationForms
WHERE     (ID = 4)
go
if  exists (select * from syscolumns c,sysobjects o 
where o.id=c.id and o.name='LetterTemplate' and c.name='validHeaderID ')
alter TABLE [ReCommites] drop column validHeaderID
go
delete sys_AppMessage
go
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (2, '‘„« »Â «Ì‰  ﬁ«»·Ì  œ” —”Ì ‰œ«—Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (3, '«Ì‰ ‰«„Â ÅÌ—Ê ‰œ«—œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (4, '«Ì‰ ‰«„Â ⁄ÿ› ‰œ«—œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (25, '¬Ì« «“ Œ—ÊÃ „ÿ„∆‰ Â” Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (26, 'ﬁ»·« »«Ìœ ‰«„Â —« –ŒÌ—Â ﬂ‰Ìœ¬Ì« «Ì‰ ﬂ«— —« «‰Ã«„ œÂ„')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (27, '¬Ì« «ÿ·«⁄«  –ŒÌ—Â ‘Êœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (28, '‘„« ò«— «»· ‰œ«—Ìœ Ê ›ﬁÿ „Ì  Ê«‰Ìœ «“ ‰“„ «›“«“ œ»Ì— Œ«‰Â «” ›«œÂ ò‰Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (29, ' êÌ—‰œÂ ‰«„Â ‰„Ì  Ê«‰œ Œ«·Ì »„«‰œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (30, '⁄‰Ê«‰  —« Ê«—œ ‰ò—œÂ «Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (31, '«„—Ê“')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (32, '«”  ¬Ì« „«Ì·Ìœ ‰”ŒÂ Å‘ Ì»«‰  ÂÌÂ ‰„«ÌÌœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (33, '¬Ì« «“ ›⁄«· ﬂ—œ‰ ‰«„Â „ÿ„∆‰ Â” Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (34, ' ¬Ì« »Â ‰«„Â ÅÌ‘ ‰ÊÌ”  »« ‘„«—Â')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (35, '‘„«—Â œ»Ì—Œ«‰Â «Œ ’«’ „Ì œÂÌœø')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (36, '¬Ì« «“ Õ–› ”„ ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (37, '„ÿ„∆‰ Â” Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (38, '¬Ì« «“ Õ–› ‰«„Â „ÿ„∆‰ Â” Ìœø')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (39, '¬Ì« «“ Õ–› „ÿ„∆‰ Â” Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (40, '¬Ì« «“ Õ–› „Ê÷Ê⁄')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (41, '¬Ì« «“ Õ–› “Ê‰ﬂ‰')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (42, '¬Ì« «“ œ—Ã ﬁ«·» ÃœÌœ „ÿ„∆‰ Â” Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (43, '¬Ì« «“ Õ–› ﬁ«·»  ‰«„Â  »« ⁄‰Ê«‰')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (44, '¬Ì« «“ ç«Å „ÿ„∆‰ Â” Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (45, '¬Ì« «Ì‰ ‘„«—Â —« –ŒÌ—Â „Ì ﬂ‰Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (46, '¬Ì« „ÿ„∆‰ Â” Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (47, '«Ì‰ ‰”ŒÂ «“ ‰—„ «›“«— «Ì‰ «„ò«‰ —« Å‘ Ì»«‰Ì ‰„Ì ò‰œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (48, '‘„« »Â «Ì‰ ﬁ«»·Ì  œ” —”Ì ‰œ«—Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (49, '«Ì‰ ‰”ŒÂ «“ ‰—„ «›“«— «Ì‰ «„ò«‰ —« Å‘ Ì»«‰Ì ‰„Ì ò‰œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (50, '«Ì‰ ‰«„Â ⁄ÿ› ‰œ«—œ ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (51, '«Ì‰ ‰«„Â ÅÌ—Ê ‰œ«—œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (52, '«Ì‰ ﬁ”„  œ— «Ì‰ ‰”ŒÂ Å‘ Ì»«‰Ì ‰„Ì ‘Êœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (53, '›«Ì· word »—«Ì «Ì‰ ‰«„Â ÊÃÊœ ‰œ«—œﬁ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (54, '‘„«—Â «Ì‰ ‰«„Â »Â ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (55, ' €ÌÌ— Ì«› ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (56, '‰«„ ò«—»— Ì« ò·„Â ⁄»Ê— «‘ »«Â „Ì »«‘œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (57, '›ﬁÿ ﬂ«—»—Ì ﬂÂ ﬁ»·« Ê«—œ ‘œÂ «”  „Ì  Ê«‰œ ﬁ›· —« »«“ ﬂ‰œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (58, '‘„« ò«—„‰œ œ»Ì—Œ«‰Â ‰Ì” Ìœ Ê ›ﬁÿ œ” —”Ì »Â ò«— «»· œ«—Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (59, '‘„« »Â ÂÌç œ»Ì—Œ«‰Â «Ì œ” —”Ì ‰œ«—Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (60, 'Œÿ« œ— À»  «ÿ·«⁄« ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (61, '«» œ« “Ì— „Ã„Ê⁄Â Â«Ì «Ì‰ ”„  —« Õ–› ò‰Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (62, 'Õœ «ﬁ· Ìò ‰«„Â Ì« «—Ã«⁄ »—«Ì «Ì‰ ”„  À»  ‘œÂ «”  ·–« ‰„Ì  Ê«‰ ¬‰—« Õ–› ò—œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (63, '‰«„Â ﬁ»·Ì —« –ŒÌ—Â ò‰Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (64, ' «Ì‰ òœ œ— ”«“„«‰ Â«Ì ÿ—› „ò« »Â ÊÃÊœ ‰œ«—œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (65, ' ›—” ‰œÂ ‰«„Â ‰„Ì  Ê«‰œ Œ«·Ì »„«‰œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (66, ' „÷„Ê‰ ‰«„Â ‰„Ì  Ê«‰œ Œ«·Ì »„«‰œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (67, '‰«„Â —« –ŒÌ—Â ò‰Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (69, '‘„«—Â ‰«„Â ‰„Ì  Ê«‰œ Œ«·Ì »„«‰œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (70, 'Œÿ«: «Õ „«·« œÊ ⁄‰Ê«‰ Ìò”«‰ —« «‰ Œ«» ò—œÂ «Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (72, ' ò—«— ò·„Â ⁄»Ê— »« ò·„Â ⁄»Ê— ÌòÌ ‰Ì” ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (73, '‘„«—Â —œÌ› »«Ìœ ⁄œœ »«‘œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (74, ' ‰«„Â œ— “Ê‰ò‰ :')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (75, ' »«Ìê«‰Ì ‘œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (76, 'Œÿ« œ— ›—«ŒÊ«‰Ì  ’ÊÌ—')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (77, '  ¬Ì« »Â ‰«„Â Õ–› ‘œÂ    »« ‘„«—Â')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (78, 'ò·„Â ⁄»Ê— ›⁄·Ì ŒÊœ —« œ—”  Ê«—œ ò‰Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (79, ' ò·„Â ⁄»Ê— ‘„« »« „Ê›ﬁÌ   €ÌÌ— ò—œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (80, '¬Ì« «“ ›⁄«· ò—œ‰ «Ì‰ «—Ã«⁄ „ÿ„∆‰ Â” Ìœø')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (81, '¬Ì« «“ Õ–› „Ê÷Ê⁄  ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (82, '«» œ« “Ì—„Ã„Ê⁄Â Â«Ì «Ì‰ „Ê÷Ê⁄ —« Õ–› ﬂ‰Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (83, 'œ— «Ì‰ „Ê÷Ê⁄ ‰«„Â Â«ÌÌ »«Ìê«‰Ì ‘œÂ «”  ·–« ‰„Ì  Ê«‰ ¬‰ —« Õ–› ﬂ—œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (84, ' ‰«„Â œ— «Ì‰ œ»Ì—Œ«‰Â ÊÃÊœ œ«—œ ·–« ‰„Ì  Ê«‰ ¬‰ —« Õ–› ﬂ—œ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (85, 'ò«—»— œÌê—Ì »« òœ ò«—»—Ì ‘„« Ê«—œ ”Ì” „ ‘œÂ «”  ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (86, '‰«„Â œÌê—Ì œ— Õ«· ÊÌ—«Ì‘ «”  ·–« ‰„Ì  Ê«‰ «Ì‰ ‰«„Â —« ŒÊ«‰œ ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (87, '„ ‰ «—Ã«⁄ —« „‘Œ’ ò‰Ìœ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (88, '¬Ì« «“ Õ–› ê—ÊÂ ')
INSERT INTO sys_AppMessage(ID, FarsiMessage)
VALUES     (89, 'ﬁ«·»  œ— «Ì‰ ê—ÊÂ ÊÃÊœ œ«—œ ·–« ‰„Ì  Ê«‰ «‰ —« Õ–› ò—œ')
go
----------------------------------------------

if not exists (select * from fields where fieldname='Org_PreCode')
INSERT INTO Fields ( FieldName,TableID,Description,IsWhere,ISString,IsLike,EveryLike,VisibleInGrid)
 VALUES ('Org_PreCode',1,'ÅÌ‘ òœ',1,1,1,1,1)
GO
 ---------------------------------------------------------------settings----------------------------------------------------------
 
if not exists (select * from settings where userid=-1 and variableID=2)
insert into settings(userid,variableid,value) values(-1,2,'100')
GO
if not exists (select * from settings where userid=-1 and variableID=3) 
insert into settings(userid,variableid,value) values(-1,3,'1')
GO
if not exists (select * from settings where userid=-1 and variableID=4) 
insert into settings(userid,variableid,value) values(-1,4,'True')
GO
if not exists (select * from settings where userid=-1 and variableID=5) 
insert into settings(userid,variableid,value) values(-1,5,'True')
GO
if not exists (select * from settings where userid=-1 and variableID=8) 
insert into settings(userid,variableid,value) values(-1,8,'0')
GO
if not exists (select * from settings where userid=-1 and variableID=9) 
insert into settings(userid,variableid,value) values(-1,9,'1')
GO
if not exists (select * from settings where userid=-1 and variableID=11) 
insert into settings(userid,variableid,value) values(-1,11,'')
GO
if not exists (select * from settings where userid=-1 and variableID=13) 
insert into settings(userid,variableid,value) values(-1,13,'True')
GO
if not exists (select * from settings where userid=-1 and variableID=14) 
insert into settings(userid,variableid,value) values(-1,14,'1')
GO
if not exists (select * from settings where userid=-1 and variableID=15) 
insert into settings(userid,variableid,value) values(-1,15,' Ê÷ÌÕ« ')
GO
if not exists (select * from settings where userid=-1 and variableID=16) 
insert into settings(userid,variableid,value) values(-1,16,' ‰ŸÌ„«  —« œÊ»«—Â »——”Ì ﬂ‰Ìœ')
GO
if not exists (select * from settings where userid=-1 and variableID=17) 
insert into settings(userid,variableid,value) values(-1,17,'True')
GO
if not exists (select * from settings where userid=-1 and variableID=18) 
insert into settings(userid,variableid,value) values(-1,18,'True')
GO
if not exists (select * from settings where userid=-1 and variableID=19)
insert into settings(userid,variableid,value) values(-1,19,'C:\Documents and Settings\Mohammad\Desktop\exe\')
GO
if not exists (select * from settings where userid=-1 and variableID=20)
insert into settings(userid,variableid,value) values(-1,20,'d:\')
GO
if not exists (select * from settings where userid=-1 and variableID=21)
insert into settings(userid,variableid,value) values(-1,21,'tif')
GO
if not exists (select * from settings where userid=-1 and variableID=22)
insert into settings(userid,variableid,value) values(-1,22,'')
GO
if not exists (select * from settings where userid=-1 and variableID=23)
insert into settings(userid,variableid,value) values(-1,23,'False')
GO
if not exists (select * from settings where userid=-1 and variableID=24)
insert into settings(userid,variableid,value) values(-1,24,'Added')
GO
if not exists (select * from settings where userid=-1 and variableID=25) 
insert into settings(userid,variableid,value) values(-1,25,'Title')
GO
if not exists (select * from settings where userid=-1 and variableID=26) 
insert into settings(userid,variableid,value) values(-1,26,'number')
GO
if not exists (select * from settings where userid=-1 and variableID=28) 
insert into settings(userid,variableid,value) values(-1,28,'300')
GO
if not exists (select * from settings where userid=-1 and variableID=29) 
insert into settings(userid,variableid,value) values(-1,29,'True')
GO
if not exists (select * from settings where userid=-1 and variableID=30) 
insert into settings(userid,variableid,value) values(-1,30,'True')
GO
if not exists (select * from settings where userid=-1 and variableID=31) 
insert into settings(userid,variableid,value) values(-1,31,'True')
GO
if not exists (select * from settings where userid=-1 and variableID=32) 
insert into settings(userid,variableid,value) values(-1,32,'True')
GO
if not exists (select * from settings where userid=-1 and variableID=34)
insert into settings(userid,variableid,value) values(-1,34,'1')
GO
if not exists (select * from settings where userid=-1 and variableID=44)
insert into settings(userid,variableid,value) values(-1,44,'/')
GO
if not exists (select * from settings where userid=-1 and variableID=45)
insert into settings(userid,variableid,value) values(-1,45,'False')
GO

declare @userid int ,@jpg varchar(10)
select @userid=max(id)
from users

select @jpg=value from settings where userid=-1 and variableID=27

if not exists (select * from settings where userid=@userID and variableID=0)
insert into settings(userid,variableid,value) values(@userID,0,'')


if not exists (select * from settings where userid=@userID and variableID=25) 
insert into settings(userid,variableid,value) values(@userID,25,@jpg)

if not exists (select * from settings where userid=@userID and variableID=0) 
insert into settings(userid,variableid,value) values(@userID,0,'')

if not exists (select * from settings where userid=@userID and variableID=26) 
insert into settings(userid,variableid,value) values(@userID,26,'-1')

if not exists (select * from settings where userid=@userID and variableID=27) 
insert into settings(userid,variableid,value) values(@userID,27,'1')

if not exists (select * from settings where userid=@userID and variableID=101) 
insert into settings(userid,variableid,value) values(@userID,101,'1')

if not exists (select * from settings where userid=@userID and variableID=102) 
insert into settings(userid,variableid,value) values(@userID,102,'1')

if not exists (select * from settings where userid=@userID and variableID=103) 
insert into settings(userid,variableid,value) values(@userID,103,'1')

if not exists (select * from settings where userid=@userID and variableID=104)
insert into settings(userid,variableid,value) values(@userID,104,'1')

if not exists (select * from settings where userid=@userID and variableID=105) 
insert into settings(userid,variableid,value) values(@userID,105,'1')

if not exists (select * from settings where userid=@userID and variableID=106) 
insert into settings(userid,variableid,value) values(@userID,106,'1')

if not exists (select * from settings where userid=@userID and variableID=107) 
insert into settings(userid,variableid,value) values(@userID,107,'0')

if not exists (select * from settings where userid=@userID and variableID=108) 
insert into settings(userid,variableid,value) values(@userID,108,'1')

if not exists (select * from settings where userid=@userID and variableID=109) 
insert into settings(userid,variableid,value) values(@userID,109,'1')

if not exists (select * from settings where userid=@userID and variableID=110) 
insert into settings(userid,variableid,value) values(@userID,110,'1')

if not exists (select * from settings where userid=@userID and variableID=111) 
insert into settings(userid,variableid,value) values(@userID,111,'1')

if not exists (select * from settings where userid=@userID and variableID=113) 
insert into settings(userid,variableid,value) values(@userID,113,'2')

if not exists (select * from settings where userid=@userID and variableID=114) 
insert into settings(userid,variableid,value) values(@userID,114,'True')

if not exists (select * from settings where userid=@userID and variableID=115) 
insert into settings(userid,variableid,value) values(@userID,115,'False')

if not exists (select * from settings where userid=@userID and variableID=202) 
insert into settings(userid,variableid,value) values(@userID,202,'1')

if not exists (select * from settings where userid=@userID and variableID=203) 
insert into settings(userid,variableid,value) values(@userID,203,'1')

if not exists (select * from settings where userid=@userID and variableID=204) 
insert into settings(userid,variableid,value) values(@userID,204,'1')

if not exists (select * from settings where userid=@userID and variableID=205) 
insert into settings(userid,variableid,value) values(@userID,205,'1')

if not exists (select * from settings where userid=@userID and variableID=206) 
insert into settings(userid,variableid,value) values(@userID,206,'1')

if not exists (select * from settings where userid=@userID and variableID=207) 
insert into settings(userid,variableid,value) values(@userID,207,'0')

if not exists (select * from settings where userid=@userID and variableID=208)
insert into settings(userid,variableid,value) values(@userID,208,'1')

if not exists (select * from settings where userid=@userID and variableID=209) 
insert into settings(userid,variableid,value) values(@userID,209,'1')

if not exists (select * from settings where userid=@userID and variableID=210) 
insert into settings(userid,variableid,value) values(@userID,210,'1')

if not exists (select * from settings where userid=@userID and variableID=213) 
insert into settings(userid,variableid,value) values(@userID,213,'2')

if not exists (select * from settings where userid=@userID and variableID=311) 
insert into settings(userid,variableid,value) values(@userID,311,'0')

if not exists (select * from settings where userid=@userID and variableID=318) 
insert into settings(userid,variableid,value) values(@userID,318,'1')

if not exists (select * from settings where userid=@userID and variableID=411) 
insert into settings(userid,variableid,value) values(@userID,411,'0')

if not exists (select * from settings where userid=@userID and variableID=512) 
insert into settings(userid,variableid,value) values(@userID,512,'1')

if not exists (select * from settings where userid=@userID and variableID=626) 
insert into settings(userid,variableid,value) values(@userID,626,'-1')

if not exists (select * from settings where userid=@userID and variableID=627) 
insert into settings(userid,variableid,value) values(@userID,627,'-1')

if not exists (select * from settings where userid=@userID and variableID=701) 
insert into settings(userid,variableid,value) values(@userID,701,'3000')

if not exists (select * from settings where userid=@userID and variableID=709) 
insert into settings(userid,variableid,value) values(@userID,709,'1')

if not exists (select * from settings where userid=@userID and variableID=714) 
insert into settings(userid,variableid,value) values(@userID,714,'1')

if not exists (select * from settings where userid=@userID and variableID=715) 
insert into settings(userid,variableid,value) values(@userID,715,'True')

if not exists (select * from settings where userid=@userID and variableID=723) 
insert into settings(userid,variableid,value) values(@userID,723,'-1')

if not exists (select * from settings where userid=@userID and variableID=724) 
insert into settings(userid,variableid,value) values(@userID,724,'-1')

if not exists (select * from settings where userid=@userID and variableID=725) 
insert into settings(userid,variableid,value) values(@userID,725,'-1')

if not exists (select * from settings where userid=@userID and variableID=726)
insert into settings(userid,variableid,value) values(@userID,726,'False')

if not exists (select * from settings where userid=@userID and variableID=730) 
insert into settings(userid,variableid,value) values(@userID,730,'0')

if not exists (select * from settings where userid=@userID and variableID=741) 
insert into settings(userid,variableid,value) values(@userID,741,'')

if not exists (select * from settings where userid=@userID and variableID=742) 
insert into settings(userid,variableid,value) values(@userID,742,'0')

if not exists (select * from settings where userid=@userID and variableID=743)
insert into settings(userid,variableid,value) values(@userID,743,'2')

if not exists (select * from settings where userid=@userID and variableID=744) 
insert into settings(userid,variableid,value) values(@userID,744,'2')

if not exists (select * from settings where userid=@userID and variableID=745) 
insert into settings(userid,variableid,value) values(@userID,745,'')

if not exists (select * from settings where userid=@userID and variableID=761) 
insert into settings(userid,variableid,value) values(@userID,761,'E:\\')

if not exists (select * from settings where userid=@userID and variableID=762) 
insert into settings(userid,variableid,value) values(@userID,762,'C:\Documents and Settings\Administrator\Desktop\')

if not exists (select * from settings where userid=@userID and variableID=763) 
insert into settings(userid,variableid,value) values(@userID,763,'0')

if not exists (select * from settings where userid=@userID and variableID=764) 
insert into settings(userid,variableid,value) values(@userID,764,'0')

if not exists (select * from settings where userid=@userID and variableID=771) 
insert into settings(userid,variableid,value) values(@userID,771,'14')

if not exists (select * from settings where userid=@userID and variableID=772) 
insert into settings(userid,variableid,value) values(@userID,772,'12')

if not exists (select * from settings where userid=@userID and variableID=1001) 
insert into settings(userid,variableid,value) values(@userID,1001,'-1')

if not exists (select * from settings where userid=@userID and variableID=1002) 
insert into settings(userid,variableid,value) values(@userID,1002,'-1')

if not exists (select * from settings where userid=@userID and variableID=1003) 
insert into settings(userid,variableid,value) values(@userID,1003,'-1')

if not exists (select * from settings where userid=@userID and variableID=1004) 
insert into settings(userid,variableid,value) values(@userID,1004,'True')

if not exists (select * from settings where userid=@userID and variableID=1005)
insert into settings(userid,variableid,value) values(@userID,1005,'False')

if not exists (select * from settings where userid=@userID and variableID=1006) 
insert into settings(userid,variableid,value) values(@userID,1006,'True')

if not exists (select * from settings where userid=@userID and variableID=1007) 
insert into settings(userid,variableid,value) values(@userID,1007,'7844298')

if not exists (select * from settings where userid=@userID and variableID=1008) 
insert into settings(userid,variableid,value) values(@userID,1008,'12632256')

if not exists (select * from settings where userid=@userID and variableID=1009) 
insert into settings(userid,variableid,value) values(@userID,1009,'15461334')

if not exists (select * from settings where userid=@userID and variableID=1011) 
insert into settings(userid,variableid,value) values(@userID,1011,'14671805')

if not exists (select * from settings where userid=@userID and variableID=1012) 
insert into settings(userid,variableid,value) values(@userID,1012,'15263950')

if not exists (select * from settings where userid=@userID and variableID=1013) 
insert into settings(userid,variableid,value) values(@userID,1013,'15244288')

if not exists (select * from settings where userid=@userID and variableID=1014) 
insert into settings(userid,variableid,value) values(@userID,1014,'13224338')

if not exists (select * from settings where userid=@userID and variableID=1015) 
insert into settings(userid,variableid,value) values(@userID,1015,'16774399')

if not exists (select * from settings where userid=@userID and variableID=1016) 
insert into settings(userid,variableid,value) values(@userID,1016,'13224338')

if not exists (select * from settings where userid=@userID and variableID=1017) 
insert into settings(userid,variableid,value) values(@userID,1017,'16702975')

if not exists (select * from settings where userid=@userID and variableID=1107) 
insert into settings(userid,variableid,value) values(@userID,1107,'False')

if not exists (select * from settings where userid=@userID and variableID=1111)
insert into settings(userid,variableid,value) values(@userID,1111,'True')

if not exists (select * from settings where userid=@userID and variableID=1112)
insert into settings(userid,variableid,value) values(@userID,1112,'True')

if not exists (select * from settings where userid=@userID and variableID=1110)
insert into settings(userid,variableid,value) values(@userID,1110,'\\hpserver\samanew\letters\')

if not exists (select * from settings where userid=@userID and variableID=2000) 
insert into settings(userid,variableid,value) values(@userID,2000,'150')

if not exists (select * from settings where userid=@userID and variableID=2001) 
insert into settings(userid,variableid,value) values(@userID,2001,'14')

if not exists (select * from settings where userid=@userID and variableID=2005) 
insert into settings(userid,variableid,value) values(@userID,2005,'0')

if not exists (select * from settings where userid=@userID and variableID=2007)
insert into settings(userid,variableid,value) values(@userID,2007,'_178_8_Tahoma')


insert into settings(userid,variableid,value)
select id,variableid,value
from users,settings
where userid=@userID
and str(id)+str(variableid)
not in (select str(userid)+str(variableid) from settings)
go
delete SendStatus
go
insert into SendStatus(SendStatusID,SendStatusTitle) values(1,'⁄«œÌ')

go
insert into SendStatus(SendStatusID,SendStatusTitle) values(2,'¬„«œÂ «—”«·')
go
insert into SendStatus(SendStatusID,SendStatusTitle) values(3,'«—”«· ‘œÂ')
go
insert into SendStatus(SendStatusID,SendStatusTitle) values(4,'œ—Ì«›  ‘œÂ')
go

delete from actions
insert into actions values(1,1001,'À»  Ê«—œÂ')
insert into actions values(1,1002,'À»  ’«œ—Â')
insert into actions values(1,1003,'«—Ã«⁄«  ‰«„Â')
insert into actions values(1,1004,'ÊÌ—«Ì‘ Ê ”«“„«‰œÂÌ «ÿ·«⁄«  À«» ')
insert into actions values(1,1005,'Œ—ÊÃ «“ ”Ì” „')
insert into actions values(1,1006,'»«Ìê«‰Ì ‰«„Â')
insert into actions values(1,1007,' €ÌÌ— Ÿ«Â— ”Ì” „')
insert into actions values(1,1008,'ÃÊ«» ‰«„Â')
insert into actions values(1,1009,'ÅÌ—Ê')
insert into actions values(1,1010,'ÊÌ—«Ì‘ Ê ”«“„«‰œÂÌ ç«—  ”«“„«‰Ì')
insert into actions values(1,1011,'⁄ÿ›')
insert into actions values(1,1012,'»«“Ì«»Ì ‰«„Â')
insert into actions values(1,1013,' ÂÌÂ ›«Ì· Å‘ Ì»«‰')
insert into actions values(1,1014,'»ÂÌ‰Â ”«“Ì ›«Ì·Â«Ì »«‰ﬂ «ÿ·«⁄« Ì')
insert into actions values(1,1015,' ⁄—Ì› ”ÿÕ œ” —”Ì')
insert into actions values(1,1016,'ÊÌ—«Ì‘ ‰«„Â')
insert into actions values(1,1017,' ⁄—Ì› ﬂ«—»—')
insert into actions values(1,1018,' ‰ŸÌ„«  ﬂ«—»—Ì')
insert into actions values(1,1019,'—Ê‰Ê‘ ')
insert into actions values(1,1020,'œÌê—  êÌ—‰œê«‰')
insert into actions values(1,1021,' ’ÊÌ—')
insert into actions values(1,1022,' €ÌÌ— ”«· Ã«—Ì')
insert into actions values(1,1023,'«÷«›Â ﬂ—œ‰ ﬁ«·»  Â«Ì ‰«„Â')
insert into actions values(1,1024,'Word')
insert into actions values(1,1025,'word ŒÊ«‰œ‰ ›«Ì· ')
insert into actions values(1,1026,'À»  ÅÌ‘‰ÊÌ”')
insert into actions values(1,1027,'«Œ ’«’ ‘„«—Â œ»Ì—Œ«‰Â')
insert into actions values(1,1028,' ê“«—‘ «“ ‰«„Â Â«')
insert into actions values(1,1030,'ÅÌÊ”  Â«Ì ‰«„Â')
insert into actions values(1,1031,'«’ÿ·«Õ«   «ÌÅÌ')
insert into actions values(1,1032,'Ã” ÃÊ Ì „›ÂÊ„Ì œ— „ ‰ ‰«„Â Â«')
insert into actions values(1,1033,' €ÌÌ— œ»Ì—Œ«‰Â Ã«—Ì')
insert into actions values(1,1034,'œ»Ì—Œ«‰Â Â«Ì „ÊÃÊœ œ— ‰—„ «›“«—')
insert into actions values(1,1035,'„œÌ—Ì  ÅÌ€«„ Â«Ì Œÿ«')
insert into actions values(1,1036,' ‰ŸÌ„«  œ»Ì—Œ«‰Â')
insert into actions values(1,1037,'¬„«— Â«')
insert into actions values(1,1038,'ê“«—‘ —Ê“«‰Â')
insert into actions values(1,1039,'«Œ ’«’   ’ÊÌ— ‰«„Â Â« »Â ’Ê—  ê—ÊÂÌ')
insert into actions values(1,1040,'ò·Ìœ Â«Ì „Ì«‰»—')
insert into actions values(1,1041,' €ÌÌ— ﬂ·„Â ⁄»Ê—')
insert into actions values(1,1042,'ﬁ›·')
insert into actions values(1,1043,'ÊÌ—«Ì‘ Ê ”«„«‰œÂÌ Å—Ê‰œÂ Â«Ì »«Ìê«‰Ì')
insert into actions values(2,2001,'ÃœÌœ')
insert into actions values(2,2002,'Õ–› ')
insert into actions values(2,2003,'ÊÌ—«Ì‘ ')
insert into actions values(2,2004,'–ŒÌ—Â')
insert into actions values(2,2005,'«‰’—«›')
insert into actions values(5,5001,'Õ–› ')
insert into actions values(5,5003,'Œ—ÊÃ')
insert into actions values(5,5004,'ÃœÌœ')
insert into actions values(5,5001,'‰’» œ—   «»·Ê ')
insert into actions values(1,1044,'›—«ŒÊ«‰Ì  ’ÊÌ— ‰«„Â Â« Ê À»  »Â ’Ê—  ÅÌ‘ ‰ÊÌ”')
insert into actions values(1,1045,'ê“«—‘ Ê—Êœ Ê Œ—ÊÃ ﬂ«—»—«‰')
insert into actions values(3,3001,'ÃœÌœ')
insert into actions values(3,3002,'Õ–›')
insert into actions values(3,3003,'ÊÌ—«Ì‘ ')
insert into actions values(3,3004,'–ŒÌ—Â')
insert into actions values(3,3005,'«‰’—«›')
insert into actions values(1,1046,'»«Ìê«‰Ì  ’«ÊÌ— ‰«„Â Â«')
insert into actions values(1,1047,'»—ê—œ«‰œ‰  ’«ÊÌ— ‰«„Â Â«Ì »«Ìê«‰Ì ‘œÂ')
insert into actions values(1,1048,'œ—»«—Â ‰—„ «›“«—')
insert into actions values(1,1049,' €ÌÌ— „‘Œ’«  «”«”Ì ‰«„Â')
insert into actions values(1,1050,'  ⁄—Ì› ê—ÊÂ«Ì ﬁ«·» ‰«„Â Â«')
insert into actions values(1,1051,'ê“«—‘ ò«—»—«‰ ›⁄«·')
insert into actions values(1,1052,'Õ–› Word')
insert into actions values(4,4001,'œ” Â »‰œÌ »— «”«” ç«—  ”«“„«‰Ì')
insert into actions values(4,4002,'œ” Â »‰œÌ »— «”«” ÿ—› Â«Ì „ò« »Â')
insert into actions values(4,4003,'œ” Â »‰œÌ »— «”«” ‰Ê⁄ ‰«„Â')
insert into actions values(4,4004,'œ” Â »‰œÌ »— «”«” »«Ìê«‰Ì')
insert into actions values(4,4005,' €ÌÌ— Ê«—œÂ ’«œ—Â')
insert into actions values(4,4007,' €ÌÌ— Ã«—Ì »«Ìê«‰Ì')
insert into actions values(1,1053,'«—Ã«⁄ ê—ÊÂÌ')
insert into actions values(1,1054,'—Ê‰Ê‘  ê—ÊÂÌ')
insert into actions values(1,1055,'ÊÌ—«Ì‘ «‰Ê«⁄ ÅÌÊ”  Â«')
insert into actions values(1,1056,' ⁄—Ì› «‰Ê«⁄ ›«Ì· Â«Ì ÅÌÊ” ')
insert into actions values(1,1057,'ÅÌ‘ ‰ÊÌ” Ê«—œÂ')
insert into actions values(1,1062,'PDF')
insert into actions values(1,1061,' ‰ŸÌ„«  ” Ê‰ Â«Ì ÃœÊ·')
insert into actions values(1,1060,'À»  ‰«„Â œ«Œ·Ì')
insert into actions values(1,1059,'«—”«· »Â œ»Ì—Œ«‰Â Â«Ì œÌê—')
insert into actions values(1,1058,'Õ–›  ’ÊÌ— ‰«„Â')

go
if not exists (select * from letterTypes where id=1) 
insert into LetterTypes values(1,'Ê«—œÂ','Ê')
go
if not exists (select * from letterTypes where id=2) 
insert into LetterTypes values(2,'’«œ—Â','’')
go
if not exists (select * from letterTypes where id=3) 
insert into LetterTypes values(3,'œ«Œ·Ì','œ')
go
if not exists (select * from letterTypes where id=4) 
insert into LetterTypes values(4,'„œ«—ò','„')
go
delete RecommiteTypes
insert into RecommiteTypes values(1,'—Ê‰Ê‘ ',1,0)
insert into RecommiteTypes values(2,'œÌê— êÌ—‰œê«‰',1,0)
insert into RecommiteTypes values(3,'«—Ã«⁄',0,0)
go
delete ListItems
DBCC CHECKIDENT ('ListItems', RESEED,1)

insert into ListItems(ListID,Keyvalue,Title) values(1,0,'Â„Â „Ê«—œ')
insert into ListItems(ListID,Keyvalue,Title) values(1,3,'«—Ã«⁄« ')
insert into ListItems(ListID,Keyvalue,Title) values(1,1,'—Ê‰Ê‘  Â«')

insert into ListItems(ListID,Keyvalue,Title) values(2,0,'»«Ìê«‰Ì')
insert into ListItems(ListID,Keyvalue,Title) values(2,1,'Ã«—Ì')

insert into ListItems(ListID,Keyvalue,Title) values(3,1,'‰«„Â')
insert into ListItems(ListID,Keyvalue,Title) values(3,2,'ÅÌ‘ ‰ÊÌ”')
insert into ListItems(ListID,Keyvalue,Title) values(3,3,'Õ–› ‘œÂ')

insert into ListItems(ListID,Keyvalue,Title) values(4,0,'Â„Â ‰«„Â Â«')
insert into ListItems(ListID,Keyvalue,Title) values(4,1,'Ê«—œÂ')
insert into ListItems(ListID,Keyvalue,Title) values(4,2,'’«œ—Â')
insert into ListItems(ListID,Keyvalue,Title) values(4,3,'œ«Œ·Ì')
insert into ListItems(ListID,Keyvalue,Title) values(4,4,'„œ«—ò')

insert into ListItems(ListID,Keyvalue,Title) values(5,0,'¬„«— »— «”«”  —Ê“ À»  ‰«„Â')
insert into ListItems(ListID,Keyvalue,Title) values(5,1,'¬„«— »— «”«”  —Ê“ Â› Â À»  ‰«„Â')
insert into ListItems(ListID,Keyvalue,Title) values(5,2,'¬„«— »— «”«”  „«Â À»  ‰«„Â')
insert into ListItems(ListID,Keyvalue,Title) values(5,3,'¬„«— »— «”«”  ›’· À»  ‰«„Â')
insert into ListItems(ListID,Keyvalue,Title) values(5,4,'¬„«— »— «”«”  ”«· À»  ‰«„Â')
insert into ListItems(ListID,Keyvalue,Title) values(5,5,'¬„«— »— «”«”  ”«⁄  À»  ‰«„Â')
insert into ListItems(ListID,Keyvalue,Title) values(5,6,'¬„«— »— «”«”  ’»Õ/»⁄œ «“ ŸÂ— À»  ‰«„Â')
insert into ListItems(ListID,Keyvalue,Title) values(5,7,'¬„«— »— «”«”  ÿ»ﬁÂ »‰œÌ À»  ‰«„Â')
insert into ListItems(ListID,Keyvalue,Title) values(5,8,'¬„«— »— «”«”  ›Ê—Ì  À»  ‰«„Â')
insert into ListItems(ListID,Keyvalue,Title) values(5,9,'¬„«— »— «”«”  „ò« »Â ò‰‰œÂ ')
insert into ListItems(ListID,Keyvalue,Title) values(5,10,'¬„«— »— «”«”  „ò« »Â ò‰‰œÂ œ«Œ·Ì')
insert into ListItems(ListID,Keyvalue,Title) values(5,11,'¬„«— ‰«„Â »— Õ”» ﬂ«—»— À»  ﬂ‰‰œÂ')

insert into ListItems(ListID,Keyvalue,Title) values(6,0,'·Ì” ')
insert into ListItems(ListID,Keyvalue,Title) values(6,1,'‰„Êœ«— „Ì·Â «Ì')
insert into ListItems(ListID,Keyvalue,Title) values(6,2,'‰„Êœ«— ﬁÿ«⁄Ì')
insert into ListItems(ListID,Keyvalue,Title) values(6,3,'‰„Êœ«— ŒÿÌ')

insert into ListItems(ListID,Keyvalue,Title) values(7,0,'‰«„Â Â«Ì Ã«—Ì')
insert into ListItems(ListID,Keyvalue,Title) values(7,1,'‰«„Â Â«Ì ¬—‘ÌÊ ‘œÂ ')
insert into ListItems(ListID,Keyvalue,Title) values(7,2,'¬—‘ÌÊ »œÊ‰ œ” Â »‰œÌ ')
insert into ListItems(ListID,Keyvalue,Title) values(7,3,'Â„Â ‰«„Â Â«')
go
delete Fieldtype
insert into Fieldtype values(0,'‰«„‘Œ’')
insert into Fieldtype values(1,'„ ‰Ì  « 100 ò«—«ò —')
insert into Fieldtype values(2,'„ ‰Ì »“—ê')
insert into Fieldtype values(3,'⁄œœÌ')
insert into Fieldtype values(4,' «—ÌŒ')
insert into Fieldtype values(5,'„‰ÿﬁÌ')
insert into Fieldtype values(6,'·Ì” Ì')

go
if not exists (SELECT *  FROM FollowUpType where FollowUpTypeTitle=' „«”  ·›‰Ì'
)  insert into FollowUpType(FollowUpTypeTitle) values(' „«”  ·›‰Ì')
if not exists (SELECT *  FROM FollowUpType where FollowUpTypeTitle='«—”«· ÅÌ«„')
 insert into FollowUpType(FollowUpTypeTitle) values('«—”«· ÅÌ«„')
if not exists (SELECT *  FROM FollowUpType where FollowUpTypeTitle='«—”«· ‰«„Â œ«Œ·Ì')
 insert into FollowUpType(FollowUpTypeTitle) values('«—”«· ‰«„Â œ«Œ·Ì')
if not exists (SELECT *  FROM FollowUpType where FollowUpTypeTitle='«ﬁœ«„ —ÊÌ ‰«„Â')
 insert into FollowUpType(FollowUpTypeTitle) values('«ﬁœ«„ —ÊÌ ‰«„Â')
if not exists (SELECT *  FROM FollowUpType where FollowUpTypeTitle='ÃÊ«» ‰«„Â Ê«—œÂ')
 insert into FollowUpType(FollowUpTypeTitle) values('ÃÊ«» ‰«„Â Ê«—œÂ')
if not exists (SELECT *  FROM FollowUpType where FollowUpTypeTitle='«—”«· ‰«„Â ’«œ—Â')
insert into FollowUpType(FollowUpTypeTitle) values('«—”«· ‰«„Â ’«œ—Â')
if not exists (SELECT *  FROM FollowUpType where FollowUpTypeTitle='«—”«· ›«ò”')
 insert into FollowUpType(FollowUpTypeTitle) values('«—”«· ›«ò”')
if not exists (SELECT *  FROM FollowUpType where FollowUpTypeTitle='«—”«· e-mail')
 insert into FollowUpType(FollowUpTypeTitle) values('«—”«· e-mail')
if not exists (SELECT *  FROM FollowUpType where FollowUpTypeTitle='SMS')
 insert into FollowUpType(FollowUpTypeTitle) values('SMS')
if not exists (SELECT *  FROM FollowUpType where FollowUpTypeTitle='”«Ì— «ﬁœ«„« ')
insert into FollowUpType(FollowUpTypeTitle) values('”«Ì— «ﬁœ«„« ')
GO
delete ActionType
if not exists (select * from ActionType where ActionTypeid=1 )
insert into ActionType values(1,'«—Ã«⁄');
if not exists (select * from ActionType where ActionTypeid=2 )
insert into ActionType values(2,'«—Ã«⁄ ‘œÂ');
if not exists (select * from ActionType where ActionTypeid=3 )
insert into ActionType values(3,'«ﬁœ«„ Ê »«Ìê«‰Ì');
if not exists (select * from ActionType where ActionTypeid=4 )
insert into ActionType values(4,' ÂÌÂ ÅÌ‘ ‰ÊÌ”');
if not exists (select * from ActionType where ActionTypeid=5 )
insert into ActionType values(5,'ÃÊ«» œ«œÂ ‘œ');

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
GO
if not exists (select * from  lifetips where id=1)
insert into lifetips values(1,'»Â —Ì‰ ò«—Â« ”Â ò«— «” : Ê«÷⁄ »Â‰ê«„ œÊ· ° ⁄›Ê Â‰ê«„ ﬁœ—  Ê »Œ‘‘ »œÊ‰ „‰ ')
GO
if not exists (select * from  lifetips where id=2) 
insert into lifetips values(2,' „Ì«‰Âù—ÊÌ œ— Œ—Ã Ìò ‰Ì„Â „⁄Ì‘  «” ')
GO
if not exists (select * from  lifetips where id=3) 
insert into lifetips values(3,'† œ”  »êÌ—° ‘„« —« «“ œÌê—«‰ Ãœ« „Ì ò‰œ° œ”  »œÂ « Õ«œ «ÌÃ«œ „Ì ò‰œ.')
GO
if not exists (select * from  lifetips where id=4) 
insert into lifetips values(4,'´«» œ«  Ê —« ‰«œÌœÂ „Ì êÌ—‰œ° ”Å” „”Œ—Â «  „Ì ò‰‰œ Ê »⁄œ »«  Ê „Ì Ã‰ê‰œ. Ê·Ì œ— ‰Â«Ì  ÅÌ—Ê“Ì «“ ¬‰  Ê” ª')
GO
if not exists (select * from  lifetips where id=5) 
insert into lifetips values(5,'´«—“‘ «Œ·«ﬁÌ° »” Â »Â  ⁄œ«œ ÊŸ«Ì›Ì «”  òÂ ¬œ„Ì «‰Ã«„ „Ì œÂœªò —Ì‰ê')
GO
if not exists (select * from  lifetips where id=6) 
insert into lifetips values(6,'´«ê— “‰œêÌ »«  Ê ”— ‰«”«“ê«—Ì œ«—œ  Ê »« «Ê ”«“‘ ò‰ª - «”Å«— ')
GO
if not exists (select * from  lifetips where id=7) 
insert into lifetips values(7,'´«‰”«‰ Â„ „Ì Ê«‰œ œ«Ì—Â »«‘œ Â„ Ìò Œÿ —«” . ‘„« „Ì ŒÊ«ÂÌœ çÂ ﬂ«— ﬂ‰ÌœÌ Ö « «»œ œÊ— ŒÊœ «‰ »ç—ŒÌœ Ì«  « »Ì ‰Â«Ì  «œ«„Â »œÂÌœÌª„Ê—Ì” „ —·Ì‰ê')
GO
if not exists (select * from  lifetips where id=8) 
insert into lifetips values(8,'´»— Â— çÂ Â„Ì ·—“Ì „Ìùœ«‰ òÂ Â„«‰ «—“Ì')
GO
if not exists (select * from  lifetips where id=9) 
insert into lifetips values(9,'´»—œ»«—Ì »Â ⁄‰Ê«‰ Ì«—Ì ò‰‰œÂ ò«›Ì «”  Ê «ê— »—œ»«— ‰Ì” Ì ŒÊœ —« »Â »—œ»«—Ì Ê«œ«— ò‰ª')
GO
if not exists (select * from  lifetips where id=10) 
insert into lifetips values(10,'´ ›ò— «‰”«‰ „«‰‰œ Ìò ç — ‰Ã«  „Ì »«‘œ Ì⁄‰Ì  ‰Â« “„«‰Ì „Ì  Ê«‰œ ò«— ò‰œ òÂ »«“ »«‘œª')
GO
if not exists (select * from  lifetips where id=11) 
insert into lifetips values(11,'´‘⁄«— ê«·Ì·Âª: ò«— ò‰Ìœ  « Â„Â €’ÂùÂ« Ê Å—Ì‘«‰ÌÂ«Ì ŒÊœ —« ›—«„Ê‘ ò‰Ìœ.')
GO
if not exists (select * from  lifetips where id=12) 
insert into lifetips values(12,'´„‰ ¬Ì‰œÂ —« œÊ”  œ«—„ “Ì—« »ﬁÌÂ ⁄„—„ —« »«Ìœ œ— ¬‰ »ê–—«‰„ª')
GO
if not exists (select * from  lifetips where id=13)
insert into lifetips values(13,'´„Ê›ﬁÌ ª »œ” ù¬Ê—œ‰ çÌ“Ì «”  òÂ œÊ”  œ«—Ì Ê ´ŒÊ‘»Œ Ìª œÊ”  œ«‘ ‰ çÌ“Ì «”  òÂ »œ” ù¬Ê—œÂù«Ì.')
GO
if not exists (select * from  lifetips where id=14)
insert into lifetips values(14,'´ÂÌç Êﬁ  »« ÌÂ ¬œ„ «Õ„ﬁ œÂ‰ »Â œÂ‰ ‰‘Ê. çÊ‰ ﬂ”«‰Ì ﬂÂ «“ »Ì—Ê‰ ‰Ÿ«—Âùê— «Ì‰ œ⁄Ê« Â” ‰œ° «Õ„ﬁù — «“ «Ê‰Ì Â” ‰œ ﬂÂ » Ê‰‰  ‘ŒÌ’ »œ‰ Õﬁ »«  Ê∆Â Ì« «Ê‰.ª')
GO
if not exists (select * from  lifetips where id=15) 
insert into lifetips values(15,'´Ìò «‰”«‰ »« Ã—«  Ìò Ã„⁄Ì  «” ª')
GO
if not exists (select * from  lifetips where id=16) 
insert into lifetips values(16,'¬œ„ Â«Ì »“—ê »Â ŒÊ‘Ì Â«Ì òÊ «Â Â‰ê«„  ‰ ‰„Ì œÂ‰œ .')
GO
if not exists (select * from  lifetips where id=17) 
insert into lifetips values(17,'¬œ„Ì „Ì  Ê«‰œ »«—Â« Ê »«—Â« »Â ‘ÌÊÂ Â«Ì êÊ‰«êÊ‰ ﬁÂ—„«‰ ‘Êœ .')
GO
if not exists (select * from  lifetips where id=18) 
insert into lifetips values(18,'¬‰òÂ „ÌùŒÊ«Âœ —Ê“Ì Å—Ìœ‰ ¬„Ê“œ° ‰Œ”  „Ìù»«Ìœ «Ì” «œ‰° —«Â —› ‰° œÊÌœ‰ Ê »«·«—› ‰ ¬„Ê“œ. Å—Ê«“ —« »« Å—Ê«“ ¬€«“ ‰„Ìùò‰‰œ.†† ‰ÌçÂ')
GO
if not exists (select * from  lifetips where id=19) 
insert into lifetips values(19,'«“ «Ì‰ òÂ „‰ ò«‘ „ Ê œÌê—«‰ »—œ«‘ ‰œ ê·Â «Ì ‰œ«—„. Å‘Ì„«‰Ì ›ﬁÿ Êﬁ Ì „⁄‰Ì œ«—œ òÂ »ò«—Ì„ «„« ò”Ì œ—Ê ‰ò‰œ.')
GO
if not exists (select * from  lifetips where id=20) 
insert into lifetips values(20,'«“ ⁄«Ã“ —Ì‰ „—œ„ ò”Ì «”  òÂ ‰ Ê«‰œ œÊ”  ÅÌœ« ò‰œ Ê «“ «Ê ⁄«Ã“ — ¬‰òÂ œÊ” ‘ —« «“ ŒÊœ œÊ— ò‰œ. «„«„ ⁄·Ì(⁄)')
GO
if not exists (select * from  lifetips where id=21) 
insert into lifetips values(21,'«‘ »«Â —« „ÕòÊ„ ò‰ ‰Â ¬‰òÂ «‘ »«Â «“ «Ê ”— “œÂ . ´‘ò”ÅÌ—ª')
GO
if not exists (select * from  lifetips where id=22) 
insert into lifetips values(22,'«‘ »«Â«  «‰”«‰Â«Ì »“—ê ﬁ«»· «Õ —«„ «”  . “Ì—« À„— »Œ‘  — «“ Õﬁ«Ìﬁ «‰”«‰Â«Ì òÊçò «” . ´›—œ—Ì‘ ‰ÌçÂª')
GO
if not exists (select * from  lifetips where id=23) 
insert into lifetips values(23,'«ê— ¬œ„ ŒÊ»Ì »«  Ê »œÌ ò—œ°ç‰«‰ Ê«‰„Êœ ò‰ òÂ ‰›Â„ÌœÂù«Ì. «Ê  ÊÃÂ ŒÊ«Âœ ò—œ Ê „œ  “Ì«œÌ „œÌÊ‰  Ê ŒÊ«Âœ »Êœ.† ÌÊÂ«‰ Ê·›ê«‰ê êÊ Â')
GO
if not exists (select * from  lifetips where id=24) 
insert into lifetips values(24,'«ê— ¬œ„ ŒÊ»Ì »Â  Ê »œÌ ò—œ ç‰«‰ Ê«‰„Êœ ò‰ òÂ ‰›Â„ÌœÂ «Ì «Ê “„«‰ “Ì«œÌ —« „œÌÊ‰  Ê ‰ŒÊ«Âœ „«‰œ. «›·«ÿÊ‰')
GO
if not exists (select * from  lifetips where id=25) 
insert into lifetips values(25,'«ê— ¬—„«‰ ‘„« œ— Œœ„  œÌê—«‰ ‰Ì” ° ·«»œ ¬—„«‰Ì ÕﬁÌ— «” .')
GO
if not exists (select * from  lifetips where id=26) 
insert into lifetips values(26,'«ê— «“ ò”Ì „ ‰›—Ì «“ ﬁ”„ Ì «“ ŒÊœ  œ— «Ê „ ‰›—Ì° çÌ“Ì òÂ «“ „« ‰Ì”  ‰„Ìù Ê«‰œ «›ò«— „« —« „€‘Ê‘ ò‰œ.††† Â—„«‰ Â”Â')
GO
if not exists (select * from  lifetips where id=27) 
insert into lifetips values(27,'«ê— «„—Ê“ ŒÊ«” Ì Ê ‰ Ê«‰” Ì ° òÂ „⁄–Ê—Ì ... Ê·Ì «ê— —Ê“Ì  Ê«‰” Ì Ê ‰ŒÊ«” Ì ° „‰ Ÿ— —Ê“Ì »«‘ òÂ »ŒÊ«ÂÌ Ê ‰ Ê«‰Ì . ´ ›—œ—Ì‘ ‰ÌçÂª')
GO
if not exists (select * from  lifetips where id=28) 
insert into lifetips values(28,'«ê— Œ·ﬁ Ê ŒÊÌ ŒÊœ —« ò‰ —· ‰ò‰Ìœ° »—‰œÂ ‰ŒÊ«ÂÌœ ‘œ.')
GO
if not exists (select * from  lifetips where id=29) 
insert into lifetips values(29,'«ê— œ”   ﬁœÌ— Ê ”—‰Ê‘  —« ›—«„Ê‘ ò‰Ì„ Å” «“ ÅÌ‘—›  ‰Ì“ «›”—œÂ Ê —‰ÃÊ— ŒÊ«ÂÌ„ ‘œ .')
GO
if not exists (select * from  lifetips where id=30) 
insert into lifetips values(30,'«ê— œÊ”  œ«—Ì «“ ·ÕŸ«  ŒÊœ «” ›«œÂ ò‰Ì .·–  ŒÊœ Ê «” ›«œÂ ŒÊœ —« «“ Â„«‰ œﬁ«Ìﬁ Ê À«‰ÌÂ Â« »œ«‰. «›·«ÿÊ‰')
GO
if not exists (select * from  lifetips where id=31) 
insert into lifetips values(31,'«ê— “‰œêÌ «  œ— Œÿ— ‰Ì” . ŒÊœ —« »Â ” Ì“ „Ì›ò‰.')
GO
if not exists (select * from  lifetips where id=32) 
insert into lifetips values(32,'«ê— ﬁ—«— »«‘œ »«Ì” Ì Ê »Â ÿ—› Â— ”êÌ òÂ Å«—” „Ìùò‰œ ”‰ê Å— «» ò‰Ì° Â—ê“ »Â „ﬁ’œ ‰„Ìù—”Ì.†† ·«—‰” «” —‰')
GO
if not exists (select * from  lifetips where id=33) 
insert into lifetips values(33,'«ê— „ÌùŒÊ«ÂÌœ œ— “‰œêÌ œÊ” «‰ Ê›«œ«— Ê Ì«—«‰ €„ŒÊ«— œ«‘ Âù»«‘Ìœ° ò„ Ê ŒÌ·Ì œÌ— »« „—œ„ œÊ”  ‘ÊÌœ .´Â—‘·ª')
GO
if not exists (select * from  lifetips where id=34) 
insert into lifetips values(34,'«ê— „Ìùœ«‰” ‰œ  « ﬂ‰Ê‰ ç‰œ »«— Õ—›Â«Ì œÌê—«‰ —« »œ ›Â„ÌœÂù«‰œ° ÂÌçﬂ” œ— Ã„⁄ «Ì‰Â„Â Å— Õ—›Ì ‰„Ìùﬂ—œ. ÌÊÂ«‰ Ê·›ê«‰ê êÊ Â')
GO
if not exists (select * from  lifetips where id=35) 
insert into lifetips values(35,'«ê— Â„Ê«—Â „«‰‰œ ê–‘ Â »Ì‰œÌ‘Ìœ° Â„Ì‘Â Â„«‰ çÌ“Â«ÌÌ —« »Âùœ”  „Ìù¬Ê—Ìœ ﬂÂ  « »Õ«· ﬂ”» ﬂ—œÂù«Ìœ .›«Ì‰„‰')
GO
if not exists (select * from  lifetips where id=36) 
insert into lifetips values(36,'«‰”«‰ »—«Ì ÅÌ—Ê“Ì ¬›—ÌœÂ ‘œÂ «” ° «Ê —« „Ì Ê«‰ ‰«»Êœ ò—œ Ê·Ì ‰„Ì Ê«‰ ‘ò”  œ«œ. ´„«ÂÌêÌ— Êœ—Ì«ª† «—‰”  Â„Ì‰êÊÌ')
GO
if not exists (select * from  lifetips where id=37) 
insert into lifetips values(37,'«‰”«‰ ‰ﬁÿÂ «Ì «”  »Ì‰ œÊ »Ì ‰Â«Ì .»Ì ‰Â«Ì  ·Ã‰ Ê »Ì ‰Â«Ì  ›—‘ Â .†"† ´œò — ‘—Ì⁄ Ìª')
GO
if not exists (select * from  lifetips where id=38) 
insert into lifetips values(38,'«Ì‰†‘ÌÊÂ ”ê «”  òÂ†»Â  ·«›Ì ”‰êÌ òÂ »Â «Ê “œÂù«‰œ° ”ê œÌê—Ì —« ê«“ „ÌùêÌ—œ. ´“Â«—ª')
GO
if not exists (select * from  lifetips where id=39) 
insert into lifetips values(39,'»«ÿ‰ Ê”Ì—  „—œ„ —« œ— ÕÌ‰ »œ»Œ Ì ¬‰«‰ „Ìù Ê«‰ ‘‰«Œ .††† œ«‰Ì«· ‰»Ì')
GO
if not exists (select * from  lifetips where id=40) 
insert into lifetips values(40,'»«·« — «“ Â„Â çÌ“ «Ì‰ù«” ùòÂ »« ŒÊœ„«‰ ’«œﬁ »«‘Ì„. ´ÊÌ·Ì«„ ‘ò”ÅÌ—ª')
GO
if not exists (select * from  lifetips where id=41)
insert into lifetips values(41,'»œ —Ì‰ Ê Œÿ—‰«ò —Ì‰ ò·„«  «Ì‰” : ´Â„Â «Ì‰ ÃÊ—‰œª.  Ê·” ÊÌ')
GO
if not exists (select * from  lifetips where id=42)
insert into lifetips values(42,'»œÊ‰ œ«‘ ‰ »«“Ìò‰ Â«Ì »“—ê «„ò«‰ »—œ‰ ÊÃÊœ œ«—œ «„« »« œ«‘ ‰ »«“Ìò‰ Â«Ì »“—ê Â„ „Ì  Ê«‰ „Ìœ«‰ —« »Â Õ—Ì› Ê«ê–«— ò—œ.')
GO
if not exists (select * from  lifetips where id=43) 
insert into lifetips values(43,'»—«Ì «“œÊ«Ã ò—œ‰ ·ÕŸÂù«Ì œ—‰ê ‰ò‰Ìœ. «ê— “‰ ŒÊ»Ì ‰’Ì» «‰ ‘Êœ° ŒÊ‘»Œ  „Ìùê—œÌœ Ê «ê— “‰ »œÌ êÌ— «‰ ¬„œ [„À· „‰] ›Ì·”Ê› „Ìù‘ÊÌœ. ´”ﬁ—«ÿª')
GO
if not exists (select * from  lifetips where id=44) 
insert into lifetips values(44,'»—«Ì  —»Ì  «—«œÂ »Â —Ì‰ “„«‰ «Ì«„ ÃÊ«‰Ì «” . ´›ÌÀ«€Ê—Àª')
GO
if not exists (select * from  lifetips where id=45) 
insert into lifetips values(45,'»“—ê  —Ì‰ œ” «Ê—œÂ«Ì  «—ÌŒ ò«— «‰”«‰ Â«ÌÌ »ÊœÂ òÂ ›ﬁÿ «‰œòÌ «“ «‰»ÊÂ Â„ «Ì«‰ ŒÊœ ÅÌ‘  — »ÊœÂ «‰œ.')
GO
if not exists (select * from  lifetips where id=46) 
insert into lifetips values(46,'»“—ê —Ì‰ œ—” “‰œêÌ «Ì‰” ùòÂ ê«ÂÌ «Õ„ﬁùÂ« Â„ œ—”  „ÌùêÊÌ‰œ. ÊÌ‰” Ê‰ ç—çÌ·')
GO
if not exists (select * from  lifetips where id=47) 
insert into lifetips values(47,'»‰œÂ ¬‰Ì òÂ œ— »‰œ ¬‰Ì. ´«»Ê”⁄Ìœ «»Êù«·ŒÌ—ª')
GO
if not exists (select * from  lifetips where id=48) 
insert into lifetips values(48,'»Â Ã«Ì «Ì‰ ﬂÂ ”⁄Ì ﬂ‰Ìœ „—œ „Ê›ﬁÌ  »«‘Ìœ° ”⁄Ì ﬂ‰Ìœ „—œ «—“‘Â« »«‘Ìœ.¬·»—  «‰Ì‘ Ì‰')
GO
if not exists (select * from  lifetips where id=49) 
insert into lifetips values(49,'»Â —Ì‰ œÊ”   Ê ¬‰”  òÂ «‘ »«Â«   Ê —« ›—«„Ê‘ ò‰œ Ê ŒÊ»ÌÂ«Ì  —« »Â Ì«œ œ«‘ Â »«‘œ.«„«„ Õ”‰ ⁄”ê—Ì(⁄)')
GO
if not exists (select * from  lifetips where id=50) 
insert into lifetips values(50,'»Â —Ì‰ ò«—° ò«—Ì «”  òÂ «“ «‰Ã«„ ¬‰ ·–  „Ì »—Ì„. ‘€·Ì —« »Å–Ì— òÂ ⁄«‘ﬁ ¬‰ »«‘Ì.')
GO
if not exists (select * from  lifetips where id=51) 
insert into lifetips values(51,'ÅÊ· ŒÊ‘»Œ Ì ‰„Ìù¬Ê—œ ... «„« ‘ò· œ·Å–Ì— —Ì «“ »œ»Œ Ì —« »—«Ì «‰ ›—«Â„ „Ìù”«“œ. ´«”Å«Ìò „Ì·Ìê«‰ª')
GO
if not exists (select * from  lifetips where id=52) 
insert into lifetips values(52,'ÅÌ—Ê“Ì ¬‰ ‰Ì”  òÂ Â—ê“ “„Ì‰ ‰ŒÊ—Ì° ¬‰” òÂ »⁄œ«“ Â— “„Ì‰ ŒÊ—œ‰Ì »—ŒÌ“Ì.† ê«‰œÌ')
GO
if not exists (select * from  lifetips where id=53) 
insert into lifetips values(53,' ›«Ê  »—‰œÂ Ê »«“‰œÂ œ— ⁄„· Ê »Ì ⁄„·Ì «” ')
GO
if not exists (select * from  lifetips where id=54) 
insert into lifetips values(54,' ‰Â« 99 œ—’œ „—œÂ« Â” ‰œ òÂ »«⁄À »œ‰«„Ì 1 œ—’œ »«ﬁÌ „«‰œÂ „Ì ‘Ê‰œ !')
GO
if not exists (select * from  lifetips where id=55) 
insert into lifetips values(55,' ‰Â« ›—ﬁ »Ì‰ „Ê›ﬁÌ  Ê ‘ò” ° ‰Ê⁄ ‰ê«Â «” .')
GO
if not exists (select * from  lifetips where id=56) 
insert into lifetips values(56,'ç‰«‰ »«‘ òÂ »Â Â„Â » Ê«‰Ì »êÊ∆Ì çÊ‰ „‰ »«‘ ! ´ò«‰ ª')
GO
if not exists (select * from  lifetips where id=57) 
insert into lifetips values(57,'çÂ«— —Ê‘ »—«Ì « ·«› Êﬁ  ÊÃÊœ œ«—œ: ò«—ù‰ò—œ‰° ò„ ò«—ùò—œ‰° »œ ò«—ùò—œ‰ Ê ò«— »ÌÂÊœÂù ò—œ‰.†´¬»ÂùœÊ·«ù—Ê‘ª†')
GO
if not exists (select * from  lifetips where id=58) 
insert into lifetips values(58,'Õ Ì „Ì„Ê‰Â« ‰Ì“ ê«ÂÌ «“ œ—Œ  „Ìù«› ‰œ. ´÷—»ù«·„À·ùé«Å‰Ìª')
GO
if not exists (select * from  lifetips where id=59) 
insert into lifetips values(59,'ÕﬁÌﬁ  »—«Ì ¬œ„Ì° Â„«‰”  ﬂÂ «“ «Ê Ìﬂ ¬œ„ „Ìù”«“œ. ´“„Ì‰ «‰”«‰Â«ª¬‰ Ê«‰ ”‰  «ê“ÊÅ—Ì')
GO
if not exists (select * from  lifetips where id=60) 
insert into lifetips values(60,'ÕﬁÌﬁ  çÌ“Ì ‰Ì”  òÂ ‰Ê‘ Â „Ìù‘Êœ .. ¬‰ çÌ“Ì «”  òÂ ”⁄Ì „Ìù‘Êœ Å‰Â«‰ »„«‰œ!')
GO
if not exists (select * from  lifetips where id=61) 
insert into lifetips values(61,'Œœ«Ê‰œ ¬“«œÌ†—« ¬›—Ìœ†Ê »‘— »‰œêÌ —«. ´¬‰œ—Â ‘Ì‰Âª†')
GO
if not exists (select * from  lifetips where id=62) 
insert into lifetips values(62,'Œ—œ„‰œ »Â ò«— ŒÊÌ‘  òÌÂ „Ìò‰œ Ê ‰«œ«‰ »Â ¬—“ÊÌ ŒÊÌ‘ . ´Õ÷—  ⁄·Ì (⁄)ª')
GO
if not exists (select * from  lifetips where id=63) 
insert into lifetips values(63,'Œ‰œÂ ›—«Ê«‰ Ê »·‰œ Ê ÅÌêÌ— ° ‰›Ì— ›—« —”Ìœ‰ Â‰ê«„Â —‰Ã Ê ”Œ Ì «” .')
GO
if not exists (select * from  lifetips where id=64) 
insert into lifetips values(64,'ŒÊ» êÊ‘ ò—œ‰ —« Ì«œ »êÌ—Ì„ ... ê«Â ›—’ Â« »”Ì«— ¬Â” Â œ— „Ì “‰‰œ . "')
GO
if not exists (select * from  lifetips where id=65) 
insert into lifetips values(65,'œ— »Ì‰  „«„Ì „—œ„  ‰Â« ⁄ﬁ· «”  ﬂÂ »Â ⁄œ«·   ﬁ”Ì„ ‘œÂ “Ì—« Â„Â ›ﬂ— „Ìùﬂ‰‰œ »Â «‰œ«“Â ﬂ«›Ì ⁄«ﬁ·‰œ.† —‰Â œﬂ«— ')
GO
if not exists (select * from  lifetips where id=66) 
insert into lifetips values(66,'œ— ÃÂ«‰  ‰Â« œÊ ê—ÊÂ «“ „—œ„ Â” ‰œ òÂ Â—ê“  €ÌÌ— ‰„ÌùÌ«»‰œ∫ »— —Ì‰ Œ—œ„‰œ«‰ Ê Å” ù —Ì‰ »ÌùŒ—œ«‰.')
GO
if not exists (select * from  lifetips where id=67) 
insert into lifetips values(67,'œ—Ê€ „À· »—› «” ° Â— çÂ ¬‰—« »€· «‰Ìœ »“—ê — „Ì ‘Êœ. †"')
GO
if not exists (select * from  lifetips where id=68) 
insert into lifetips values(68,'œ· »Ì œÊ”  œ—Œ  »Ì À„— «” . Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=69)
insert into lifetips values(69,'œ‰Ì« —« ‰êÂùœ«—Ìœ. „ÌùŒÊ«Â„ ÅÌ«œÂ ‘Ê„. ´¬‰ Ê‰Ì ‰ÌÊ·Ìª')
GO
if not exists (select * from  lifetips where id=70)
insert into lifetips values(70,'œÊ”  Â— ò” Œ—œ Ê œ«‰‘ «Ê Ê œ‘„‰‘ ÃÂ· Ê ‰«œ«‰Ì «Ê” . «„«„ —÷«(⁄)')
GO
if not exists (select * from  lifetips where id=71) 
insert into lifetips values(71,'œÊ” «‰ ÃœÌœ ÅÌœ« ò‰Ìœ «„« œÊ” «‰ ﬁœÌ„Ì —« Â„ Õ›Ÿ ò‰Ìœ° «Ì‰Â« ‰ﬁ—Â Ê ¬‰Â« ÿ·« Â” ‰œ. ´Å—„Êœ«» —«ª')
GO
if not exists (select * from  lifetips where id=72) 
insert into lifetips values(72,'œÊ” «‰ ›—«Ê«‰ ‰‘«‰ œÂ‰œÂ ò«„Ì«»Ì œ— “‰œêÌ ‰Ì”  ° »·òÂ ‰‘«‰ ‰«»ÊœÌ “„«‰ ° »Â êÊ‰Â «Ì ê” —œÂ «” .')
GO
if not exists (select * from  lifetips where id=73) 
insert into lifetips values(73,'œÊ” Ì »« „—œ„ Ìò ‰Ì„Â ⁄ﬁ· Ê ŒÊ» Å—”Ìœ‰ Ìò ‰Ì„Â œ«‰‘.´—”Ê·ù«ò—„(’)ª')
GO
if not exists (select * from  lifetips where id=74) 
insert into lifetips values(74,'œÌÊ«‰êÌ »‘— ¬‰ç‰«‰ ÷—Ê—Ì «”  òÂ œÌÊ«‰Â ‰»Êœ‰ ŒÊœ ‘ò· œÌê—Ì «“ œÌÊ«‰êÌ «” . †Å«”ò«·')
GO
if not exists (select * from  lifetips where id=75) 
insert into lifetips values(75,'—«“ „Êﬁ⁄ œÊ” Ì —« “„«‰ œ‘„‰Ì «»—«“ ò—œ‰∫ œÊ— «“ ÃÊ«‰„—œÌ «‰”«‰Ì  Ê „—œ«‰êÌ «” .«„«„ Ã⁄›— ’«œﬁ(⁄)')
GO
if not exists (select * from  lifetips where id=76) 
insert into lifetips values(76,'“‰ »Êœ‰ ò«— »”Ì«— ‘«ﬁÌ «”  ° çÊ‰ „⁄„Ê·« „” ·“„ ”— Ê ò·Â “œ‰ »« „—œÂ«” ')
GO
if not exists (select * from  lifetips where id=77) 
insert into lifetips values(77,'“‰ “‘  œ— œ‰Ì« ÊÃÊœ ‰œ«—œ ›ﬁÿ »—ŒÌ «“ “‰«‰ Â” ‰œ òÂ ‰„Ìù Ê«‰‰œ ŒÊœ —« “Ì»« Ã·ÊÂ œÂ‰œ.††† »—‰«—œ ‘«Ê')
GO
if not exists (select * from  lifetips where id=78) 
insert into lifetips values(78,'“‰Â«ÌÌ òÂ »Â œ‰»«· »—«»—Ì »« „—œÂ« Â” ‰œ ¬—“ÊÌ »”Ì«— òÊçòÌ œ«—‰œ !  Ì„Ê Ì ·Ì—Ì')
GO
if not exists (select * from  lifetips where id=79) 
insert into lifetips values(79,'“Ì‰ —ÊÌ œ· ⁄«‘ﬁ «“ ⁄—‘ ›“Ê‰ »«‘œ.ª „Ê·ÊÌ:')
GO
if not exists (select * from  lifetips where id=80) 
insert into lifetips values(80,'”—⁄  ÅŒ‘ ‰ê—‘ »œ »Ì‘  — «“ ‰ê—‘ ŒÊ» «” .')
GO
if not exists (select * from  lifetips where id=81) 
insert into lifetips values(81,'”òÊ  ÃÊ«»Ì €Ì—ﬁ«»· Å«”Œ «” .††† Ã. ò. ç” — Ê‰')
GO
if not exists (select * from  lifetips where id=82) 
insert into lifetips values(82,'‘«œÌÂ«Ì ‘„« Â„«‰ €„Â«Ì ‘„«”  òÂ ‰ﬁ«»‘ —« »—œ«‘ Â «‰œ . Ê ç«ÂÌ òÂ Œ‰œÂ Â«Ì «‰ «“ ¬‰ „Ì ÃÊ‘œ Â„«‰ «”  òÂ «“ «‘òÂ«Ì «‰ Å— ‘œÂ «” . "† ´Ã»—«‰ Œ·Ì· Ã»—«‰ª')
GO
if not exists (select * from  lifetips where id=83) 
insert into lifetips values(83,'‘„« „„ò‰ «”  » Ê«‰Ìœ ê·Ì —« “Ì— Å« ·êœ„«· ò‰Ìœ° «„« „Õ«· «”  » Ê«‰Ìœ ⁄ÿ— ¬‰—« œ— ›÷« „ÕÊ ”«“Ìœ. ´Ê· —∫ ‰ÊÌ”‰œÂ ›—«‰”ÊÌ ÌÌÌÌ-ÌÌÌÌª')
GO
if not exists (select * from  lifetips where id=84) 
insert into lifetips values(84,'‘ÊÂ—„ ê›  »Â ›÷«Ì »Ì‘ —Ì «Õ Ì«Ã œ«—œ ° „‰ Â„ «Ê —«»Â »Ì—Ê‰ Œ«‰Â ›—” «œ„ Ê œ— —« Å‘  ”—‘ ﬁ›· ò—œ„ "—“ ¬‰Ì')
GO
if not exists (select * from  lifetips where id=85) 
insert into lifetips values(85,'‘òÊÂ œ‰ÌÊÌ Â„çÊ‰ œ«Ì—Âù«Ì «”  »— ”ÿÕ ¬» òÂ ·ÕŸÂ »Â ·ÕŸÂ »Â »“—êÌ ¬‰ «›“ÊœÂ „Ìù‘Êœ Ê ”Å” œ— ‰Â«Ì  »“—êÌ ÂÌç „Ìùù‘Êœ. ´ÊÌ·Ì«„ ‘ò”ÅÌ—ª')
GO
if not exists (select * from  lifetips where id=86) 
insert into lifetips values(86,'⁄‘ﬁ  ‰Â« »Â ç‘„«‰ ÌòœÌê— ŒÌ—Â ‘œ‰ ‰Ì” ° »·òÂ „ ›ﬁ« »Â »Ì—Ê‰° »Â ÃÂ  „⁄Ì‰Ì ‰ê«Â ò—œ‰ «” .´œò —  «„”.¬.Â—Ì”ª')
GO
if not exists (select * from  lifetips where id=87) 
insert into lifetips values(87,'⁄‘ﬁ ⁄Ì‰ò ”»“Ì «”  òÂ »« ¬‰ «‰”«‰ ò«Â —« ÌÊ‰ÃÂ „Ìù»Ì‰œ.† „«—ò  Ê«Ì‰')
GO
if not exists (select * from  lifetips where id=88) 
insert into lifetips values(88,'›—ﬁ „« »« œÌÊ«‰Â Â« œ— «Ì‰ «”  òÂ „« œ— «òÀ—Ì  Â” Ì„. ´„Ì‘· ›ÊòÊª')
GO
if not exists (select * from  lifetips where id=89) 
insert into lifetips values(89,'›ò— „Ì ò‰Ìœ ﬁ»· «“ «Ì‰òÂ Ìò „—œ «⁄ —«› ò‰œ òÂ ê„ ‘œÂ «”  ç‰œ —«Â œÌê— —« »«Ìœ »«·« Ê Å«ÌÌ‰ »—Êœ Ì!')
GO
if not exists (select * from  lifetips where id=90) 
insert into lifetips values(90,'ﬁ·»Ì œ«‘ Â »«‘ òÂ Â—ê“ ”Œ Ì ”‰ê —« »Â ŒÊœ ‰êÌ—œ Ê «Õ”«”Ì œ«‘ Â »«‘ òÂ Â—ê“ ¬“«— œÂ‰œÂ ‰»«‘œ . "†´ç«—·“ œÌò‰“ª')
GO
if not exists (select * from  lifetips where id=91) 
insert into lifetips values(91,'ﬁÂ—„«‰«‰ ¬‰«‰Ì Â” ‰œ òÂ „Ì œ«‰‰œ òÌ” ‰œ.')
GO
if not exists (select * from  lifetips where id=92) 
insert into lifetips values(92,'ê«Â ¬‰ ﬁœ— ”—ê—„  „Ì“ ò—œ‰ „€«“Â „Ì ‘ÊÌ„ òÂ ›—«„Ê‘ „Ì ò‰Ì„ œ— —« »Â —ÊÌ „‘ —Ì«‰ »«“ ò‰Ì„.')
GO
if not exists (select * from  lifetips where id=93) 
insert into lifetips values(93,'ê«ÂÌ  ‰Â« —«Â œ—„«‰ —Ê«‰Â«Ì Å—Ì‘«‰ ° ›—«„Ê‘Ì «” .')
GO
if not exists (select * from  lifetips where id=94) 
insert into lifetips values(94,'ê› êÊ »« ¬œ„Ì«‰  —”Ê ° ŒÊ«—Ì »œ‰»«· œ«—œ.')
GO
if not exists (select * from  lifetips where id=95) 
insert into lifetips values(95,'·ÕŸ«  —« ê–—«‰œÌ„  « »Â ŒÊ‘»Œ Ì »—”Ì„ «„« œ—Ì€ «“ ¬‰òÂ ·ÕŸ« Ì —« òÂ ê–—«‰œÌ„ Â„«‰ ·ÕŸ«  ŒÊ‘»Œ Ì »Êœ. «›·«ÿÊ‰')
GO
if not exists (select * from  lifetips where id=96) 
insert into lifetips values(96,'„«œ— ‘«Âò«— ÿ»Ì⁄  «” . ´êÊ Âª')
GO
if not exists (select * from  lifetips where id=97)
insert into lifetips values(97,'„œ Â« ÅÌ‘ ¬„ÊŒ „ òÂ ‰»«Ìœ »« ŒÊò ò‘ Ì ê—› ° ŒÌ·Ì òÀÌ› „Ìùù‘ÊÌ Ê „Â„ù — ¬‰òÂ ŒÊò «— «Ì‰ ò«— ·–  „Ìù»—œ.')
GO
if not exists (select * from  lifetips where id=98)
insert into lifetips values(98,'„—«ﬁ» »«‘Ìœ çÌ“Â«ÌÌ —« òÂ œÊ”  œ«—Ìœ »œ” ù¬Ê—Ìœ Êê—‰Â ‰«ç«—ŒÊ«ÂÌœ »Êœ çÌ“Â«ÌÌ —« òÂ »œ”  ¬Ê—œÂù«Ìœ œÊ”  œ«‘ Âù»«‘Ìœ† Ã—Ã »—‰«—œ ‘«Ê')
GO
if not exists (select * from  lifetips where id=99) 
insert into lifetips values(99,'„—œ„«‰  Ê«‰„‰œ œ— ŒÊ«» ‰Ì“ ° —Â”Å«— Ã«œÂ ÅÌ‘—› ‰œ .')
GO
if not exists (select * from  lifetips where id=100) 
insert into lifetips values(100,'„—œÂ« «“ ’›  ÃÊ«‰ »—«Ì “‰Â«Ì “Ì— 18 ”«· Ê „—œÂ«Ì “Ì— 80 ”«· «” ›«œÂ „Ì ò‰‰œ !!! "‰«‰”Ì ·Ì‰ œ“„Ê‰œ')
GO
if not exists (select * from  lifetips where id=101) 
insert into lifetips values(101,'„—œÂ« œ«—«Ì ﬁÊÂ Ì »Ì‰«ÌÌ Â” ‰œ Ê·Ì “‰Â« «“ »Ì‰‘ »—ŒÊ—œ«—‰œ . ÊÌò Ê— ÂÊêÊ')
GO
if not exists (select * from  lifetips where id=102) 
insert into lifetips values(102,'„—œÂ« —« ‘Ã«⁄  »Â Ã·Ê „Ìù—«‰œ Ê “‰Â« —« Õ”«œ . »—‰«—œ ‘«Ê')
GO
if not exists (select * from  lifetips where id=103) 
insert into lifetips values(103,'„‰ ” «Ì‘ê— „⁄·„Ì Â” „ òÂ «‰œÌ‘Ìœ‰ —« »Â „‰ »Ì«„Ê“œ ‰Â «‰œÌ‘Â Â« —«. ´«” «œ „ÿÂ—Ìª')
GO
if not exists (select * from  lifetips where id=104) 
insert into lifetips values(104,'‰Œ” Ì‰ ‰‘«‰Â ›”«œ  —ò ’œ«ﬁ  «” . ´„Ì‘· œÊ „Ê‰ Ìª')
GO
if not exists (select * from  lifetips where id=105) 
insert into lifetips values(105,'‰ﬁÌ÷ Ìò ﬁ÷ÌÂ ’«œﬁ Ìò ﬁ÷ÌÂ ò«–» «” ° «„« ‰ﬁÌ÷ Ìò ÕﬁÌﬁ  é—› ê«ÂÌ ÕﬁÌﬁ  é—› œÌê—Ì «” . ´‰Ì·” »Ê—ª')
GO
if not exists (select * from  lifetips where id=106) 
insert into lifetips values(106,'‰ê«Â „« »Â “‰œêÌ Ê ò—œ«— „«  ⁄ÌÌ‰ ò‰‰œÂ Ì ÕÊ«œÀÌ «”  òÂ »— „« „Ì ê–—œ.')
GO
if not exists (select * from  lifetips where id=107) 
insert into lifetips values(107,'‰ê—‘ Â« Ê«êÌ—œ«— Â” ‰œ.')
GO
if not exists (select * from  lifetips where id=108) 
insert into lifetips values(108,'‰„Ìù Ê«‰Ì„ ò«—Ì ò‰Ì„ òÂ „—€«‰ €„ »«·«Ì ”— „« Å—Ê«“ ‰ò‰‰œ «„« „Ìù Ê«‰Ì„ ‰ê–«—Ì„ òÂ —ÊÌ ”— „« ¬‘Ì«‰Â »”«“‰œ. ´÷—»ù«·„À· çÌ‰Ìª')
GO
if not exists (select * from  lifetips where id=109) 
insert into lifetips values(109,'‰Â «“ ŒÊœ   ⁄—Ì› ò‰ Ê ‰Â »œêÊÌÌ. «ê— «“ ŒÊœ   ⁄—Ì› ò‰Ì ﬁ»Ê· ‰„Ìùò‰‰œ Ê «ê— »œêÊÌÌ ò‰Ì »Ì‘ «“ ¬‰çÂ «ŸÂ«— œ«‘ Ì  Ê —« »œ ŒÊ«Â‰œ Å‰œ«‘ . † ò‰›Ê”ÌÊ”')
GO
if not exists (select * from  lifetips where id=110) 
insert into lifetips values(110,'Â— çÂ „Ê«‰⁄ ÃœÌ  — Ê ”Œ   — »«‘œ , ·–   ·«‘ Ê ÅÌ—Ê“Ì »Ì‘ — «”  . ´«—Ìﬂ »« —ÊÊ— ª')
GO
if not exists (select * from  lifetips where id=111) 
insert into lifetips values(111,'Â—ê“ œ— „Ì«‰ „ÊÃÊœ«  „Œ·ÊﬁÌ ﬂÂ »—«Ì ﬂ»Ê — ‘œ‰ ¬›—ÌœÂ ‘œÂ ﬂ—ﬂ” ‰„Ì‘Êœ. «Ì‰ Œ’·  œ— „Ì«‰ ÂÌç Ìﬂ «“ „Œ·Êﬁ«  ‰Ì”  Ã“ ¬œ„Ì«‰. ´ÊÌﬂ Ê—ÂÊêÊ∫ »Ì‰Ê«Ì«‰ª')
GO
if not exists (select * from  lifetips where id=112) 
insert into lifetips values(112,'Â—ê“ „—œÌ Ê·Ê »”Ì«— ‰«œ«‰ —« ‰œÌœ„ òÂ «“ ÊÌ çÌ“Ì ‰ Ê«‰” Âù«„ »Ì«„Ê“„.† ê«·Ì·Â')
GO
if not exists (select * from  lifetips where id=113) 
insert into lifetips values(113,'Â„ —‰ê œÌê— ò”«‰ ‘œ‰ ° »«Ê— ÂÌç òœ«„ «“ »“—ê«‰ ‰»ÊœÂ «”  .')
GO
if not exists (select * from  lifetips where id=114) 
insert into lifetips values(114,'Â„Â „—œ„ —« ´»⁄÷Ì „Ê«ﬁ⁄ª „Ìù Ê«‰ ›—Ì›  Ê »⁄÷Ì «“ „—œ„ —« »—«Ì ´Â„Â ⁄„—ª. ·Ìò‰ ‰„Ì Ê«‰ Â„Â „—œ„ —« »—«Ì Â„Â ⁄„— ›—Ì» œ«œ.')
GO
if not exists (select * from  lifetips where id=115) 
insert into lifetips values(115,'Â„Ì‘Â œ—  “‰œêÌ «  Âœ› Ê »—‰«„Â —Ì“Ì œ«‘ Â »«‘. «›·«ÿÊ‰')
GO
if not exists (select * from  lifetips where id=116) 
insert into lifetips values(116,'ÂÌç çÌ“ »Â — «“ ò«— ò—œ‰ »Ã«Ì €’Â ŒÊ—œ‰° ¬œ„Ì —« »Â ŒÊ‘»Œ Ì ‰“œÌò ‰„Ìù”«“œ. ´„Ê—Ì” „ —·Ì‰êª')
GO
if not exists (select * from  lifetips where id=117) 
insert into lifetips values(117,'ÂÌç ‘⁄—Ì ‘«⁄— ‰œ«—œ° Â— ŒÊ«‰‰œÂùÌ ‘⁄—Ì ‘«⁄— ¬‰ ·ÕŸÂùÌ ‘⁄— «” .† †Å«»·Ê ‰—Êœ«')
GO
if not exists (select * from  lifetips where id=118) 
insert into lifetips values(118,'ÂÌçÊﬁ  »« ¬œ„Â«Ì »œ Ê „‰›Ì Â„’Õ»  ‰»«‘ Ê »« «Ê‰Â« —«»ÿÂ ‰œ«‘ Â »«‘. «êÂ  Ê ŒÊ»Ì  Ê —« »Â —«Â »œ „Ìò‘‰œ.')
GO
if not exists (select * from  lifetips where id=119) 
insert into lifetips values(119,'ÂÌçÊﬁ  ‰„Ìù Ê«‰Ìœ »« „‘  ê—Âùò—œÂ œ”  ò”Ì —« »Â ê—„Ì »›‘«—Ìœ.† ê«‰œÌ')
GO
if not exists (select * from  lifetips where id=120) 
insert into lifetips values(120,'ÊÃœ«‰ ’œ«Ì Œœ«Ê‰œÌ «” . ´·«„«— Ì‰ª')
GO
if not exists (select * from  lifetips where id=121) 
insert into lifetips values(121,'ÊŸÌ›Â »«⁄À „Ìù‘Êœ  « ò«—Â« —« »ÂùŒÊ»Ì «‰Ã«„ œÂÌ° «„« ⁄‘ﬁ ò„ò „Ìùò‰œ  « ¬‰ùÂ« —« “Ì»« «‰Ã«„ œÂÌ. ´÷—» «·„À· òÊ»«ÌÌª')
GO
if not exists (select * from  lifetips where id=122) 
insert into lifetips values(122,'Êﬁ Ì «‰”«‰ œÊ”  Ê«ﬁ⁄Ì œ«—œ ﬂÂ ŒÊœ‘ Â„ œÊ”  Ê«ﬁ⁄Ì »«‘œ. ´«„—”Ê‰ª')
GO
if not exists (select * from  lifetips where id=123) 
insert into lifetips values(123,'Êﬁ Ì ÃÊ«‰ — »Êœ„ Â„Â çÌ“ —« »Â Œ«ÿ— „Ìù¬Ê—œ„° Õ«·« „ÌùŒÊ«”  « ›«ﬁ «› «œÂ »«‘œ Ì« ‰Â!´ „«—ò  Ê«Ì‰ª')
GO
if not exists (select * from  lifetips where id=124) 
insert into lifetips values(124,'Êﬁ Ì ﬂ»Ê —Ì ‘—Ê⁄ »Â „⁄«‘—  »« ﬂ·«€Â« „Ìﬂ‰œ Å—Â«Ì‘ ”›Ìœ „Ì„«‰œ° Ê·Ì ﬁ·»‘ ”Ì«Â „Ì‘Êœ. ´„«—ﬂ  Ê«Ì‰ª')
GO
if not exists (select * from  lifetips where id=125)
insert into lifetips values(125,'Êﬁ Ì ‰Â«· ¬“«œÌ —Ì‘Â ê—›  »Â ”—⁄  —‘œ Ê‰„Ê „Ìùò‰œ. ´ÃÊ—Ã Ê«‘‰ê ‰ª')
GO
if not exists (select * from  lifetips where id=126)
insert into lifetips values(126,'Êﬁ Ì Â„Â »« „‰ Â„ù⁄ﬁÌœÂ „Ìùù‘Ê‰œ  «“Â «Õ”«” „Ìùò‰„ òÂ «‘ »«Â ò—œÂù«„. ´«”ò«— Ê«Ì·œª')
GO
if not exists (select * from  lifetips where id=127) 
insert into lifetips values(127,'Ì.Œ«‰Â »œÊ‰ “‰ ⁄›Ì›° êÊ—” «‰ «” . ´»«·“«ﬂª')
GO
if not exists (select * from  lifetips where id=128) 
insert into lifetips values(128,'Ì« ç‰«‰ ‰„«Ì òÂ Â” Ì° Ì« ç‰«‰ »«‘ òÂ „Ìù‰„«ÌÌ†´»«Ì“Ìœ »”ÿ«„Ìª')
GO
if not exists (select * from  lifetips where id=129) 
insert into lifetips values(129,'ò«—«ÌÌ «”«” »ﬁ« «” . «À—»Œ‘Ì «”«” „Ê›ﬁÌ  «” .')
GO
if not exists (select * from  lifetips where id=130) 
insert into lifetips values(130,'ò«—„‰œ«‰ ‰«»ò«— ° «“ œ“œ«‰ Ê ¬‘Ê»ê—«‰ »Ì‘ — »Â ò‘Ê— ¬”Ì» „Ì —”«‰‰œ.')
GO
if not exists (select * from  lifetips where id=131) 
insert into lifetips values(131,'ò”Ì òÂ »Â „‰ «⁄ „«œ „Ì ò‰œ° «“ ò”Ì ﬂÂ „—« œÊ”  œ«—œ ê«„Ì ›—« — ‰Â«œÂ «” .')
GO
if not exists (select * from  lifetips where id=132) 
insert into lifetips values(132,'ò”Ì òÂ “Ì«œ Õ“› „Ìù“‰œ°†Ì« “Ì«œ „Ìùœ«‰œ Ì« “Ì«œ œ—Ê€ „ÌùêÊÌœ.')
GO
if not exists (select * from  lifetips where id=133) 
insert into lifetips values(133,'ò”Ì òÂ „ÌùŒÊ«Âœ —«“Ì —« Õ›Ÿ ò‰œ »«Ìœ «Ì‰ Ê«ﬁ⁄Ì  —« òÂ —«“Ì œ«—œ° ò „«‰ ò‰œ.† †êÊ Â')
GO
if not exists (select * from  lifetips where id=134) 
insert into lifetips values(134,'ò”ÌùòÂ Õ›Ÿ Ã«‰ —« „ﬁœ„ »— ¬“«œÌ »œ«‰œ° ·Ì«ﬁ  ¬“«œÌ —« ‰œ«—œ. ´»‰Ã«„Ì‰ ›—«‰ò·Ì‰ª')
GO
if not exists (select * from  lifetips where id=135) 
insert into lifetips values(135,'ç‰«‰ ‰Ì”  òÂ Â— ê—› «— »Â »·«ÌÌ ﬁ«»· „·«„  »«‘œ.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=136) 
insert into lifetips values(136,'«„Ê— ç‰«‰  ”·Ì„ „ﬁœ—«  Â” ‰œ òÂ Õ Ì ê«ÂÌ  œ»Ì— „ÊÃ» „—ê „Ì ‘Êœ.      .Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=137) 
insert into lifetips values(137,'Â— ò” òÂ «›”«—‘ —« »Â ¬—“ÊÌ‘ »”Å«—œ ° »Â Ê”Ì·Â «Ã· «“ Å«Ì œ— „Ì ¬Ìœ.      .Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=138) 
insert into lifetips values(138,'Â—ò” òÂ ⁄„·‘ «Ê—« ⁄ﬁ» »Ì‰œ«“œ ‰é«œ Ê ‰”»‘ ‰„Ì  Ê«‰œ «Ê —« ÅÌ‘ »»—œ.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=139) 
insert into lifetips values(139,'„«œ«„Ì òÂ œ—œ  »«  Ê „Ì ”«“œ  Ê Â„ »« œ—œ  »”«“.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=140) 
insert into lifetips values(140,'»Â —Ì‰ Å«—”«ÌÌ Å‰Â«‰ œ«‘ ‰ Å«—”«ÌÌ «” .      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=141) 
insert into lifetips values(141,'¬œ„ ‰ÌòÊò«— «“ ŒÊœ ò«— »Â — Ê ⁄«„· ‘— «“ ŒÊœ ‘— »œ  — «” .      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=142) 
insert into lifetips values(142,'» —”Ìœ «“ Õ„·Â ‘Œ’ ò—Ì„ „Êﬁ⁄Ì òÂ ê—”‰Â ‘Êœ Ê «‰”«‰ Å”  „Êﬁ⁄Ì òÂ ”Ì— ‘Êœ.      .Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=143) 
insert into lifetips values(143,'⁄Ì»  Ê „«œ«„Ì òÂ œ‰Ì« »Â  Ê —ÊÌ ¬Ê—œÂ «”  ÅÊ‘ÌœÂ «” .      .Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=144) 
insert into lifetips values(144,'»Ì ‰Ì«“Ì œ— €—»  Êÿ‰ «”  Ê ‰Ì«“„‰œÌ œ— Êÿ‰ €—» .      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=145) 
insert into lifetips values(145,'“»«‰ ÕÌÊ«‰Ì œ—‰œÂ «”  «ê— —Â« ‘Êœ „Ì ê“œ.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=146) 
insert into lifetips values(146,'‰«œ«‰ —« ‰ŒÊ«ÂÌ œÌœ „ê— Ì« «›—«ÿ ê— Ì«  ›—Ì ê—.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=147) 
insert into lifetips values(147,'Â‰ê«„Ì òÂ ⁄ﬁ· ò«„· ê‘  ”Œ‰ ò„ „Ì ‘Êœ.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=148) 
insert into lifetips values(148,'‰›” ò‘Ìœ‰ «‰”«‰ ﬁœ„ Â«Ì «Ê »Â ”ÊÌ „—ê «” .      .Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=149) 
insert into lifetips values(149,'Â—çÌ“Ì òÂ ﬁ«»· ‘„«—‘ «”  Å«Ì«‰ „Ì Å–Ì—œ Ê Â— ¬‰çÂ „Ê—œ «‰ Ÿ«— «”  ›—« „Ì —”œ.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=150) 
insert into lifetips values(150,'«“ œ”  œ«œ‰ ›—’  „ÊÃ» ‰œ«„  Ê «‰œÊÂ «” .      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=151) 
insert into lifetips values(151,'⁄Ÿ„  Œ«·ﬁ œ— ‰“œ  Ê ° „Œ·Êﬁ«  —« œ—ç‘„  òÊçò „Ì ò‰œ.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=152) 
insert into lifetips values(152,'Ã·» „Õ»  ‰’› Œ—œ «” .      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=153)
insert into lifetips values(153,'Ì«—Ì Œœ« »Â ﬁœ— ‰Ì«“ ‰«“· „Ì ê—œœ.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=154)
insert into lifetips values(154,'œç«—  ‰êœ” Ì ‰‘œ Â—ò” òÂ œ— “‰œêÌ «ﬁ ’«œ —« œ— ÅÌ‘ ê—› .      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=155) 
insert into lifetips values(155,'€’Â ‰’› ÅÌ—Ì «” .      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=156) 
insert into lifetips values(156,'ò„Ì ⁄«∆·Â ÌòÌ «“ œÊ  Ê«‰ê—Ì «” .      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=157) 
insert into lifetips values(157,'¬œ„Ì œ— “Ì— “»«‰‘ ‰Â› Â «” .      .Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=158) 
insert into lifetips values(158,'Â·«ò ‘œ ò”Ì òÂ «—“‘ ŒÊœ —«‰‘‰«Œ .      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=159) 
insert into lifetips values(159,'¬œ„ ’»Ê— ÅÌ—Ê“Ì —« «“ œ”  ‰„Ì œÂœ. «ê— çÂ »Â œ—«“« »ò‘œ.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=160) 
insert into lifetips values(160,'Â—ò” »Â „·ò —”Ìœ „‰Õ’—« ŒÊœ —« œÌœ Ê œÌê—«‰ —« ‰«œÌœÂ «‰ê«‘ .      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=161)
insert into lifetips values(161,'›ﬁ— Ê  ‰êœ” Ì »“—ê —Ì‰ „—ê «” .      .Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=162)
insert into lifetips values(162,'„—ê ‰“œÌò «”  Ê Â„‰‘Ì‰Ì «‰œò.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=163)
insert into lifetips values(163,'„—œ„ œ‘„‰ çÌ“Ì Â” ‰œ òÂ ¬‰ —« ‰„Ì œ«‰‰œ.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=164)
insert into lifetips values(164,'»«„œ«œ »—«Ì ¬‰«‰Ì òÂ ç‘„ »Ì‰« œ«—‰œ —Ê‘‰ «” .      .Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=165)
insert into lifetips values(165,'·Ã«Ã  Ê „ﬁ«Ê„  »Ì œ·Ì·  œ»Ì— Ê «‰œÌ‘Â —« «“ »Ì‰ „Ì »—œ.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=166)
insert into lifetips values(166,'«Ì ›—“‰œ ¬œ„ °¬‰çÂ »Ì‘ — «“ „⁄«‘  «‰œÊŒ Â «Ì  Ê œ— «‰ Œ“«‰Â œ«— œÌê—Ì Â” Ì.      Õ÷—  ⁄·Ì (⁄)')
GO
if not exists (select * from  lifetips where id=167)
insert into lifetips values(167,'«“ œ”   ‰—› Â „«·Ì òÂ »Â  Ê Å‰œÌ œ«œÂ «” .      .Õ÷—  ⁄·Ì (⁄)')

GO
delete donestatus
insert into donestatus values(1,'«‰Ã«„ ‰‘œÂ')
insert into donestatus values(2,'«‰Ã«„ ‘œÂ')

GO
BEGIN TRANSACTION

CREATE TABLE dbo.Tmp_Accesses
	(
	ID tinyint NOT NULL IDENTITY (1, 1),
	Title nvarchar(50) NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_Accesses ON
GO
IF EXISTS(SELECT * FROM dbo.Accesses)
	 EXEC('INSERT INTO dbo.Tmp_Accesses (ID, Title)
		SELECT ID, Title FROM dbo.Accesses TABLOCKX')
GO
SET IDENTITY_INSERT dbo.Tmp_Accesses OFF
GO
DROP TABLE dbo.Accesses
GO
EXECUTE sp_rename N'dbo.Tmp_Accesses', N'Accesses', 'OBJECT'
GO
COMMIT
go

if  dbo.GetSystemValue(5)='True'
UPDATE    Settings
SET       [Value] = '0'
WHERE     (VariableId = 5) AND (UserID = - 1)
go
if  dbo.GetSystemValue(5)='False'
UPDATE    Settings
SET       [Value] = '1'
WHERE     (VariableId = 5) AND (UserID = - 1)

go
if not exists (select * from TemplateGroup)
 begin
  insert into TemplateGroup(TemplateGroupTitle) values ('ò·ÌÂ ﬁ«·» Â« ')
  declare @id  int
  select @id=max(TemplateGroupID) from TemplateGroup
  update lettertemplate set TemplateGroupID=@id where TemplateGroupID=1
  insert into UserTemplateGroup(TemplateGroupID,UserID)
     select @id,id from users where
        id not in (select userid from UserTemplateGroup where TemplateGroupID=@id)
end
go
UPDATE    Users
SET  KartableGridInfo = NULL, DabirGridInfo = NULL
go

UPDATE  [Users]
   SET [EndActiveDate] = '1387/12/30'
 WHERE  [EndActiveDate] is null
go

UPDATE [Users]
set     [BeginActiveDate] = '1387/03/20'
 WHERE  [BeginActiveDate] is null

GO
 ---- chaneg letterid into Recommiteid LetterArchiveFolder
 GO

SELECT LetterArchiveID into #temp
FROM LetterArchiveFolder
inner join recommites on recommites.LetterId= LetterArchiveFolder.LetterId
WHERE page<>-1 and
ArchiveFolderID in (SELECT FolderID FROM ArchiveFolder WHERE UserID >0 and userid in (select id from users))


insert into LetterArchiveFolder(
ArchiveFolderID,
Letterid,
page,
ArchiveNotes,
LetterArchiveFolder.UserID,
ArchiveDate)

SELECT ArchiveFolderID,
Recommiteid,
-1,
ArchiveNotes,
LetterArchiveFolder.UserID,
ArchiveDate
FROM LetterArchiveFolder
inner join recommites on recommites.LetterId= LetterArchiveFolder.LetterId
WHERE page<>-1 and
ArchiveFolderID in (SELECT FolderID FROM ArchiveFolder WHERE UserID >0 and userid in (select id from users))

delete LetterArchiveFolder
from LetterArchiveFolder
where LetterArchiveID in (select LetterArchiveID from #temp)
GO
delete
from userShortCut
where exists (Select * from userShortCut u where userShortCutID>u.userShortCutID)
GO

if not exists (select *
from sysindexes
where name ='UserShortcut_altkey_idx')
CREATE UNIQUE
  INDEX [UserShortcut_altkey_idx] ON [dbo].[UserShortCut] ([UserID], [altKey]) ON [PRIMARY]
GO
Create PROCEDURE sp_makeRecommited

	(
		@recommiteId int,
        @ProceedDate char(10),
        @staffmemo  nvarchar(255)

	)

AS
UPDATE ReCommites
   SET  Proceeded = 1
      ,ProceedDate = @ProceedDate
      ,staffmemo = @staffmemo
 WHERE  recommiteId=@recommiteId
GO

CREATE procedure [dbo].[insert_FieldAccess_by_TableID]
@TableID int
as

INSERT INTO FieldAccess ([FieldID] ,[UserID] ,[AccessTypeID])
SELECT fields.id,users.id,3
FROM Fields,Users
where tableid=@TableID
and str(fields.id)+'m'+str(users.id) not in (select str(fieldid)+'m'+str(userid) from FieldAccess)
GO

INSERT INTO ArchiveFolder  ( ParentFolderID , Title , UserID)
select 0 ,'»«Ìê«‰Ì' ,ID
from users
where  ID not in (select distinct userid from ArchiveFolder)
GO


declare @tableid int
select @tableid=max(tableid)+1 from tables
set @tableid=isnull(@tableid,1)
if not exists (select * from tables where TableName='DeleteTable' and TableType=3 )
INSERT INTO Tables (tableId,TableName  ,TableType) VALUES   (@tableid,'DeleteTable',3)

GO
if not exists (select * from sysindexes where name ='Letterarchive_Folder_idx')
CREATE NONCLUSTERED INDEX [Letterarchive_Folder_idx] ON [dbo].[LetterArchiveFolder] (	[ArchiveFolderID] ASC) ON [PRIMARY]

GO
if not exists (select * from sysindexes where name ='Letterarchive_Letter_Folder_idx')
CREATE NONCLUSTERED INDEX [Letterarchive_Letter_Folder_idx] ON [dbo].[LetterArchiveFolder] (	[ArchiveFolderID] ASC,	[LetterID] ASC) ON [PRIMARY]


GO
if not exists (select * from sysindexes where name ='Letterarchive_Letter_idx')
CREATE NONCLUSTERED INDEX [Letterarchive_Letter_idx] ON [dbo].[LetterArchiveFolder] (	[LetterID] ASC) ON [PRIMARY]
GO
  exec ysp_shrink 'ydabir',''
GO


---------------------------------------------------------------------------------------------------------------------------------------------------------------


[Num]=2
-----------

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
if not Exists(Select * from Syscolumns Where Name = 'IsAnswer' And ( ID = (Select Top 1 ID from SysObjects Where Name = 'ReCommites') ))  --Ranjbar
ALTER TABLE dbo.ReCommites ADD
	IsAnswer bit NULL,
	ISFollowup bit NULL
GO
COMMIT
GO



---------------------------------- -------------------------------------------------------

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_UserSecretariat_Tree]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_UserSecretariat_Tree]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE proc Get_UserSecretariat_Tree @userid int
as
Declare @aCount int
CREATE TABLE dbo.#M
	(ID int NOT NULL IDENTITY (0, 1),
	SecID int NULL,
	Title nVarchar(100) NULL,
	ParentID int NULL,
	Proceed int NULL ,
        Tag int NULL )  ON [PRIMARY]
insert into #m(SecID , Title , ParentID , Proceed , Tag)
Select 0 as SecID , 'ò«— «»·' as Title ,-1 as ParentID ,0 as Proceed , 1 as Tag

insert into #m(SecID , Title , ParentID , Proceed,Tag)
Select SecID , SecTitle as Title ,0 as ParentID,0 as Proceed ,  10 as Tag
From Secretariats
where secid in (SELECT SecId FROM UserSecretariats WHERE  UserId = @userid)

Select @aCount = Count(SecID)+1
From Secretariats
where secid in (SELECT SecId FROM UserSecretariats WHERE  UserId = @userid)

insert into #m(SecID , Title , ParentID , Proceed , Tag)
Select 0 as SecID , '«—”«·Â«Ì »«Ìê«‰Ì ‰‘œÂ' as Title ,-1 as ParentID ,1 as Proceed , 2 as Tag

Set @aCount = @aCount+1
insert into #m(SecID , Title , ParentID , Proceed , Tag)
Select 0 as SecID , ' „«„Ì «—”«· ‘œÂ Â«' as Title ,-1 as ParentID ,1 as Proceed , 3 as Tag

insert into #m(SecID , Title , ParentID , Proceed , Tag)
Select SecID , SecTitle as Title ,@aCount as ParentID , 1 as Proceed , 30 as Tag
From Secretariats  
where secid in (SELECT SecId FROM UserSecretariats WHERE  UserId = @userid)

Select ID , SecID , LTrim(RTrim(Title))as Title , ParentID , Proceed , Tag 
from #M
Order by ID

GO
---------------------------------- -------------------------------------------------------

/*1387/11/13 Ranjbar*/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[select_Letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[select_Letter]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE [select_Letter]  
 @LetterID int    
AS  
Select Letter.*,title senderTitle , dbo.InnerNo(Letter.LetterID) as IndicatorInnerNo
from Letter left JOIN  
     FromOrganizations ON Letter.ToOrgID = FromOrganizations.ID  
WHERE   
 LetterID=@LetterID
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO




---------------------------------- -------------------------------------------------------
/*Ranjbar 87.11.15*/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_All_Letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_All_Letter]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE Get_All_Letter  
  
@Secretariatid int,  
@myear tinyint,  
@Letter_Type int,  
@LetterFormat int,  
@where nvarchar(2000),  
@top smallint ,  
@archiveFolderID int,  
@ArchiveStatus tinyint -- 0 ,1 and 2(= all)  
as  
declare @sqlCommand nvarchar(4000)  
DECLARE @InnerNo NVARCHAR(500);  
declare @Delimeter char(1)  
set @Delimeter=dbo.GetSystemValue(44)  
set @InnerNo=case  dbo.GetSystemValue(35)  
                   when 0 then ''  
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'  
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'  
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'  
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'  
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'  
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'  
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'  
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+  
  
             case  dbo.GetSystemValue(36)  
                   when 0 then ''  
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'  
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'  
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'  
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'  
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'  
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'  
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'  
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+  
  
             case  dbo.GetSystemValue(37)  
                   when 0 then ''  
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'  
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'  
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'  
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'  
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'  
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'  
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'  
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+  
  
             case  dbo.GetSystemValue(38)  
                   when 0 then ''  
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'  
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'  
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'  
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'  
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'  
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'  
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'  
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+  
  
             case  dbo.GetSystemValue(39)  
                   when 0 then ''  
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'  
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'  
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'  
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'  
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'  
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'  
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'  
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+  
  
             case  dbo.GetSystemValue(40)  
                   when 0 then ''  
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'  
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'  
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'  
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'  
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'  
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'  
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'  
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end  
  
IF len(@InnerNo)>5  
if substring(@InnerNo,len(@InnerNo)-4,5)='+'''+@Delimeter+'''+'  
   set @InnerNo=substring(@InnerNo,1,len(@InnerNo)-5)  
  
if @innerno<>''  
set @InnerNo='replace(replace(ltrim(rtrim('+@InnerNo+')),'''+@Delimeter+@Delimeter+''','''+@Delimeter+'''),'''+@Delimeter+@Delimeter+''','''+@Delimeter+''')'  
else  
set @innerno='cast(indicatorid as nvarchar(500))'  
  
set @sqlCommand='SELECT top  '+Cast(@top as varchar(5)) +'     Letter.LetterID, Letter.IndicatorID, Letter.MYear, Letter.SecretariatID,  
                      Letter.Letter_Type, Letter.letterformat, Letter.IncommingNO, Letter.FromOrgID,Letter.IncommingDate,  
                      Letter.ToOrgID, Letter.UrgencyID, Letter.Memo, Letter.RetroactionNo, Letter.RegistrationDate, Letter.FollowLetterNo,  
                      Letter.ToStaffer, Letter.SentLetterID, Letter.TemplateID, Letter.UserMemo,Letter.DeadLineDate, sender.Title AS SenderTitle,  
                      Deliver.Title AS DeliverTitle,dbo.has_Page(Letter.letterid) has_Page,  
dbo.has_WordPage(Letter.letterid) has_WordPage,dbo.has_file(letter.letterID) has_file,  
LetterTypes.Title LetterTypeTitle,LetterRecommites,sendstatusTitle,'+@innerno+'  InnerNo,Letter.Archived  
,ActionTypeTitle 
 , Letter.SignerID , (Select Title from FromOrganizations FO Where(FO.ID = Letter.SignerID)) as SignerTitle 


FROM Letter left  JOIN  
     FromOrganizations sender ON Letter.ToOrgID = sender.ID left JOIN  
     FromOrganizations Deliver ON Letter.FromOrgID = Deliver.ID  
     Left join LetterTypes on LetterTypes.ID=Letter.Letter_type  
     inner join sendstatus on sendstatus.sendstatusID=Letter.sendstatusID  
     inner join Secretariats on Secretariats.Secid=Letter.SecretariatID  
     left JOIN ActionType  ON ActionType.ActionTypeID = Letter.LatestActionTypeID'  
  
  
if @archiveFolderID>0  
set @sqlCommand=@sqlCommand+'  
Left join LetterArchiveFolder on LetterArchiveFolder.Letterid=Letter.LetterID '  
  
set @sqlCommand=@sqlCommand+' where letter.Finalized=1 '  
  
  
  
set @where=isnull(ltrim(rtrim(@where)),'')  
if @where <>'' set @where =' and '+@where  
  
if @Letter_Type<>0  
  set @where=@where+' and (Letter_Type = '+Cast(@Letter_Type as varchar(5))+')'  
  
if @Secretariatid<>0  
  set @where=@where+' and (Secretariatid = '+Cast(@Secretariatid as varchar(5))+')'  
  
if @Myear<>0  
  set @where=@where+' and (myear = '+Cast(@myear as varchar(5))+')'  
  
  
  
if @LetterFormat<>0  
  set @where=@where+' and (LetterFormat = '+Cast(@LetterFormat as varchar(5))+')'  
  
if @archiveFolderID>0  
  
  set @where=@where+' and (archiveFolderID = '+Cast(@archiveFolderID as varchar(5))+')'  
  
if @ArchiveStatus=0  
 set @where=@where+' and archived=0'  
  
if @ArchiveStatus=1  
 set @where=@where+' and archived=1'  
  
if @ArchiveStatus=2  
 begin  
   set @where=@where+' and  
       not exists (SELECT  * FROM   LetterArchiveFolder,ArchiveFolder Where  
       LetterArchiveFolder.ArchiveFolderID = ArchiveFolder.FolderID  
       and  (ArchiveFolder.UserID=0 or ArchiveFolder.UserID>=10000)  and Letterid =Letter.LetterID)  and archived=1'  
end  
  
  
set @sqlCommand=@sqlCommand+@where + ' order by indicatorid desc '  
  
exec sp_executesql   @sqlCommand  
  
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Receipt]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[Receipt]
GO

CREATE TABLE [dbo].[Receipt] (
	[ReceiptID] [int] IDENTITY (1, 1) NOT NULL ,
	[Title] [nvarchar] (50)  NULL ,
	[Memo] [nvarchar] (2000)  NULL ,
	[Descript] [nvarchar] (500)  NULL 
) ON [PRIMARY]
GO

---------------------------------- -------------------------------------------------------

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_Select_Receipt]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_Select_Receipt]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

Create Procedure Sp_Select_Receipt @ReceiptID int = 0  
as  
if @ReceiptID = 0
   Select * from Receipt
else 
   Select * from Receipt Where(ReceiptID = @ReceiptID )  
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


---------------------------------- -------------------------------------------------------
if Not Exists(Select * from Actions Where ID = 1101)
begin
   Insert into Actions(FormTag , ID,Title)
   Values(1,1101,'ç«Å —”Ìœ')
end
GO
---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Tr_Del_WorkGroupOrg]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[Tr_Del_WorkGroupOrg]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WorkGroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[WorkGroup]
GO

CREATE TABLE [dbo].[WorkGroup] (
	[WorkGroupID] [int] IDENTITY (1, 1) NOT NULL ,
	[Title] [nvarchar] (50)  NULL ,
	[Descript] [nvarchar] (300)  NULL ,
	[UserID] [int] NOT NULL 
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[WorkGroup] WITH NOCHECK ADD 
	CONSTRAINT [PK_WorkGroup] PRIMARY KEY  CLUSTERED 
	(
		[WorkGroupID]
	)  ON [PRIMARY] 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE TRIGGER Tr_Del_WorkGroupOrg ON WorkGroup 
FOR DELETE 
AS
Declare @DeleteID Int
Select @DeleteID = WorkGroupID From Deleted

if Exists(Select * from WorkGroupOrg Where(WorkGroupID = @DeleteID ))
   Delete From WorkGroupOrg
   Where(WorkGroupID = @DeleteID)  
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WorkGroupOrg]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[WorkGroupOrg]
GO

CREATE TABLE [dbo].[WorkGroupOrg] (
	[WorkGroupOrgID] [int] IDENTITY (1, 1) NOT NULL ,
	[FromOrgID] [int] NOT NULL ,
	[WorkGroupID] [int] NOT NULL 
) ON [PRIMARY]
GO

---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_Select_WorkGroup]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_Select_WorkGroup]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

Create Procedure Sp_Select_WorkGroup @UserID int 
As
  Select * From WorkGroup Where UserID = @UserID

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_Del_WorkGroupOrg]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_Del_WorkGroupOrg]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

Create Procedure Sp_Del_WorkGroupOrg @WorkGroupID int 
As
  Delete From WorkGroupOrg
  Where WorkGroupID = @WorkGroupID

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

---------------------------------- -------------------------------------------------------
if Not Exists(Select * from ApplicationForms Where [ID] = 6 )
begin
   Insert into ApplicationForms([ID] , Title)
   Values(6,'›—„ «”ò‰ ‰«„Â (Tiff)')
   Insert into ApplicationForms([ID],Title)
   Values(7,'›—„ «”ò‰ ‰«„Â (Jpg)')
end
Go
---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[UserAccArchive]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[UserAccArchive]
GO

CREATE TABLE [dbo].[UserAccArchive] (
	[UserAccArchiveID] [int] IDENTITY (1, 1) NOT NULL ,
	[SecID] [int] NOT NULL ,
	[UserID] [int] NOT NULL ,
	[ArchiveCenterID] [int] NOT NULL ,
	[ArchiveFolderID] [int] NOT NULL ,
	[ISAccess] [bit] NULL 
) ON [PRIMARY]
GO

---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_Sel_UserAccArchive]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_Sel_UserAccArchive]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE Procedure Sp_Sel_UserAccArchive @SecID int , @userID int  , @ArchiveCenterID int
As  
Select *  
From UserAccArchive  
Where(SecID = @SecID)
And(UserID = @userID)  
And(ArchiveCenterID = @ArchiveCenterID)
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


---------------------------------- -------------------------------------------------------
IF EXISTS (SELECT name FROM sysobjects
      WHERE name = 'Tr_Del_Users' AND type = 'TR')
   DROP TRIGGER Tr_Del_Users
GO
Create Trigger Tr_Del_Users
On Users
for Delete
As
  Delete From UserAccArchive
  Where UserID = (Select Top 1 ID from Deleted)
GO
---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_ArchiveFolder_ByAccess]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_ArchiveFolder_ByAccess]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE Get_ArchiveFolder_ByAccess @userID int , @SecID int , @ArchiveCenterID int 
AS   
SELECT AF.*  
FROM ArchiveFolder AF
Inner Join UserAccArchive UAA On UAA.ArchiveFolderID = AF.FolderID  
Where(UAA.SecID = @SecID)
And(UAA.UserID = @userID)  
And(UAA.ArchiveCenterID = @ArchiveCenterID)
And(UAA.IsAccess = 1)

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_ArchiveFolder_ByAccessAndTitle]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_ArchiveFolder_ByAccessAndTitle]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE Get_ArchiveFolder_ByAccessAndTitle @userID int , @SecID int , @ArchiveCenterID int  , @like nvarchar(100)  
AS   
SELECT AF.*  
FROM ArchiveFolder AF
Inner Join UserAccArchive UAA On UAA.ArchiveFolderID = AF.FolderID  
Where(UAA.SecID = @SecID)
And(UAA.UserID = @userID)  
And(UAA.ArchiveCenterID = @ArchiveCenterID)
And(UAA.IsAccess = 1)
And( AF.Title like '%'+@like+'%' or AF.place like  '%'+@like+'%' )  

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

---------------------------------- -------------------------------------------------------
/*œ«œ‰ œ” —”Ì »Â  „«„Ì “Ê‰ò‰ Â« */
if not Exists(Select * from UserAccArchive)
begin
   Insert into UserAccArchive(SecID , UserID , ArchiveCenterID , ArchiveFolderID , ISAccess )
   Select US.SecID , Us.UserID ,  Ac.ArchiveCenterID , AF.FolderID , 1
   From Users u , UserSecretariats US , Secretariats Se ,ArchiveCenter AC , ArchiveFolder AF
   Where(U.ID = Us.UserID) 
   And(US.SecID = Se.SecID)
   And(Se.ArchiveCenterID = AC.ArchiveCenterID)
   And((AC.ArchiveCenterID * 10000) = AF.UserID)
   Order By U.ID , US.SecID , Ac.ArchiveCenterID , AF.FolderID    
end
GO  
---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_FillBlob]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_FillBlob]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

Create Procedure Sp_FillBlob 
As
CREATE TABLE #TempTable(ID int IDENTITY (1, 1) NOT NULL , MyBlobField image NULL)
Select *  from #TempTable

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


---------------------------------- -------------------------------------------------------
/*87.12.10  Ranjbar  Œ»— */

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Tr_Del_NewsGroupUsers]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[Tr_Del_NewsGroupUsers]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NewsGroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[NewsGroup]
GO

CREATE TABLE [dbo].[NewsGroup] (
	[NewsGroupID] [int] IDENTITY (1, 1) NOT NULL ,
	[Title] [nvarchar] (50)  NOT NULL ,
	[Descript] [nvarchar] (300)  NULL ,
	[UsersID] [int] NOT NULL 
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[NewsGroup] WITH NOCHECK ADD 
	CONSTRAINT [PK_NewsGroup] PRIMARY KEY  CLUSTERED 
	(
		[NewsGroupID]
	)  ON [PRIMARY] 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

Create TRIGGER Tr_Del_NewsGroupUsers 
ON NewsGroup 
For DELETE 
AS
Set nocount on
Declare @DeleteID Int
Select top 1 @DeleteID = NewsGroupID From Deleted
if Exists(Select * from NewsGroupUsers Where(NewsGroupID = @DeleteID ))
   Delete From NewsGroupUsers Where(NewsGroupID = @DeleteID)
Set nocount off 

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Tr_Del_News]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[Tr_Del_News]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[News]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[News]
GO

CREATE TABLE [dbo].[News] (
	[NewsID] [int] IDENTITY (1, 1) NOT NULL ,
	[Code] [int] NOT NULL ,
	[Title] [nvarchar] (300)  NOT NULL ,
	[Memo] [nvarchar] (3000)  NULL ,
	[UrgenceisID] [smallint] NULL ,
	[DateAnnounce] [nvarchar] (10)  NULL ,
	[TimeAnnounce] [nvarchar] (10)  NULL ,
	[DateExpire] [nvarchar] (10)  NULL ,
	[UserID] [int] NOT NULL 
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[News] WITH NOCHECK ADD 
	CONSTRAINT [PK_News] PRIMARY KEY  CLUSTERED 
	(
		[NewsID]
	)  ON [PRIMARY] 
GO

ALTER TABLE [dbo].[News] WITH NOCHECK ADD 
	CONSTRAINT [DF_News_UrgencyID] DEFAULT (1) FOR [UrgenceisID]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

Create Trigger Tr_Del_News
ON News
for Delete
As
  Set nocount on
  Declare @DeleteID int
  Select @DeleteID = NewsID From Deleted
  --if Exists(Select * from ImageData Where(TableName = 'News')And(TableID = @DeleteID))
  Delete From ImageData Where(TableName = 'News')And(TableID = @DeleteID)
  Delete From NewsUsers Where(NewsID = @DeleteID)
  Set nocount Off

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NewsUsers]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[NewsUsers]
GO

CREATE TABLE [dbo].[NewsUsers] (
	[NewsUsersID] [int] IDENTITY (1, 1) NOT NULL ,
	[NewsID] [int] NOT NULL ,
	[UsersID] [int] NOT NULL ,
	[IsRead] [bit] NULL ,
	[NotShow] [bit] NULL 
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[NewsUsers] WITH NOCHECK ADD 
	CONSTRAINT [PK_NewsUsers] PRIMARY KEY  CLUSTERED 
	(
		[NewsUsersID]
	)  ON [PRIMARY] 
GO


---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NewsGroupUsers]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[NewsGroupUsers]
GO

CREATE TABLE [dbo].[NewsGroupUsers] (
	[NewsGroupUsersID] [int] IDENTITY (1, 1) NOT NULL ,
	[UsersID] [int] NOT NULL ,
	[NewsGroupID] [int] NOT NULL 
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[NewsGroupUsers] WITH NOCHECK ADD 
	CONSTRAINT [PK_NewsGroupUsers] PRIMARY KEY  CLUSTERED 
	(
		[NewsGroupUsersID]
	)  ON [PRIMARY] 
GO


---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ImageData]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[ImageData]
GO

CREATE TABLE [dbo].[ImageData] (
	[ImageDataID] [int] IDENTITY (1, 1) NOT NULL ,
	[Data] [image] NULL ,
	[FileName] [nvarchar] (50)  NULL ,
	[TableName] [nvarchar] (50)  NOT NULL ,
	[TableID] [int] NOT NULL ,
	[Tag] [int] NULL 
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE [dbo].[ImageData] WITH NOCHECK ADD 
	CONSTRAINT [PK_ImageData] PRIMARY KEY  CLUSTERED 
	(
		[ImageDataID]
	)  ON [PRIMARY] 
GO


---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_Sel_News]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_Sel_News]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

Create Procedure Sp_Sel_News @Like Nvarchar(50)    
As  
if @Like = ''  
   Select Top 500 * From News Order BY NewsID Desc  
else  
begin  
   Set @Like = '%'+@Like+'%'  
   Select Top 500 * From News Where(Title like @Like) Order BY NewsID Desc  
end  


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_Sel_ImageData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_Sel_ImageData]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

Create Procedure Sp_Sel_ImageData @TableName Nvarchar(50) , @TableID int 
As
Select * 
from ImageData
Where(TableName = @TableName)
  And(TableID = @TableID)

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_Sel_NewsGroup]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_Sel_NewsGroup]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

Create Procedure Sp_Sel_NewsGroup @UsersID Int  
As  
Select * from NewsGroup   
Where(UsersID = @UsersID)

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_Del_NewsGroupUsers]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_Del_NewsGroupUsers]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

Create Procedure Sp_Del_NewsGroupUsers @NewsGroupID int 
As  
  Delete From NewsGroupUsers  
  Where(NewsGroupID = @NewsGroupID)

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO




---------------------------------- -------------------------------------------------------
if Not Exists(Select * From FollowUpType Where FollowUpTypeID = 11)
begin
SET IDENTITY_INSERT FollowUpType ON
Insert Into FollowUpType(FollowUpTypeID,FollowUpTypeTitle)
values(11,'ÅÌêÌ—Ì Å«”Œ ‰«„Â')
SET IDENTITY_INSERT FollowUpType OFF
end
GO
---------------------------------- -------------------------------------------------------
Delete From ApplicationForms
Where ID = 6
Go
Update ApplicationForms
Set Title = '›—„ «”ò‰ ‰«„Â'
Where ID = 7
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*Ranjbar 87.12.27*/

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PhoneGroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[PhoneGroup]
GO

CREATE TABLE [dbo].[PhoneGroup] (
	[PhoneGroupID] [int] IDENTITY (1, 1) NOT NULL ,
	[Code] [int] NOT NULL ,
	[Title] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1256_CI_AS NOT NULL ,
	[UsersID] [int] NOT NULL 
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PhoneGroup] WITH NOCHECK ADD 
	CONSTRAINT [PK_PhoneGroup] PRIMARY KEY  CLUSTERED 
	(
		[PhoneGroupID]
	)  ON [PRIMARY] 
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Phone]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[Phone]
GO

CREATE TABLE [dbo].[Phone] (
	[PhoneID] [int] IDENTITY (1, 1) NOT NULL ,
	[Code] [int] NOT NULL ,
	[Title] [nvarchar] (50) NOT NULL ,
	[PersonName] [nvarchar] (50) NULL ,
	[Tel1] [nvarchar] (20) NULL ,
	[Tel2] [nvarchar] (20) NULL ,
	[Mobile] [nvarchar] (20) NULL ,
	[Fax] [nvarchar] (20) NULL ,
	[Email] [nvarchar] (50) NULL ,
	[Internet] [nvarchar] (500) NULL ,
	[Address] [nvarchar] (500) NULL ,
	[ZipCode] [nvarchar] (30) NULL ,
	[Descript] [nvarchar] (500) NULL ,
	[PhoneGroupID] [int] NULL ,
	[UsersID] [int] NOT NULL ,
	[IsPublic] [bit] NULL 
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[Phone] WITH NOCHECK ADD 
	CONSTRAINT [PK_Phone] PRIMARY KEY  CLUSTERED 
	(
		[PhoneID]
	)  ON [PRIMARY] 
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_Sel_Phone]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_Sel_Phone]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE Procedure Sp_Sel_Phone @UserSID Int    
As    
Select *
from Phone
Where (1=1)
And((IsPublic=1)or(UsersID = @UserSID))
Order By Code 


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


---------------------------------- -------------------------------------------------------
/*Ranjbar 88.01.17*/

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
if not Exists(Select * from Syscolumns Where Name = 'Email' And ( ID = (Select Top 1 ID from SysObjects Where Name = 'Users') ))  --Ranjbar
ALTER TABLE dbo.Users ADD
	Email nvarchar(100) NULL
GO
COMMIT
GO



---------------------------------- -------------------------------------------------------
/*Ranjbar  For Email Form */
---------------------------------- -------------------------------------------------------
If Not Exists(Select * From ReceiveTypes Where(Id=7)) 
Insert into ReceiveTypes
Values(7,'«Ì„Ì·')
------------------------------ ----

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
if not Exists(Select * from Syscolumns Where Name = 'EmailNuFromDate' And ( ID = (Select Top 1 ID from SysObjects Where Name = 'Letter') ))  --Ranjbar
ALTER TABLE dbo.Letter ADD
	EmailNuFromDate nvarchar(20) NULL
GO

COMMIT
GO
---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Emails]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[Emails]
GO

CREATE TABLE [dbo].[Emails] (
	[EmailsID] [int] IDENTITY (1, 1) NOT NULL ,
	[Code] [int] NOT NULL ,
	[Subject] [nvarchar] (200) NOT NULL ,
	[SendAddress] [nvarchar] (100) NULL ,
	[ReciveAddress] [nvarchar] (100) NULL ,
	[Memo] [image] NULL ,
	[AttachFile] [image] NULL ,
	[AttachFileName] [nvarchar] (50) NULL ,
	[Status] [smallint] NULL ,
	[DateEmail] [nvarchar] (10) NOT NULL ,
	[TimeEmail] [nvarchar] (10) NOT NULL ,
	[IsAnswer] [bit] NULL ,
	[IsReciveEmail] [bit] NULL ,
	[UsersID] [int] NOT NULL ,
	[IsRead] [bit] NULL ,
	[IsPersonal] [bit] NULL ,
	[IsImportant] [bit] NULL ,
	[IsSecret] [bit] NULL ,
	[EmailNuFromDate] [nvarchar] (20) NULL 
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_Sel_Emails]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_Sel_Emails]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE Procedure Sp_Sel_Emails @Status SmallInt , @UsersID int     
As  
begin  
   Select EmailsID,Code,Subject,SendAddress,ReciveAddress,  
          Status,DateEmail,TimeEmail,IsRead,IsAnswer,  
          UsersID,AttachFileName,IsReciveEmail    
   from Emails  
   Where(Status = @Status)
   And(UsersID = @UsersID)
end 

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[hassame_orgtitle]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[hassame_orgtitle]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


CREATE procedure hassame_orgtitle(@title nvarchar(255),@id int output)
as
set @id=-1
select top 1  @id=id
from fromorganizations
where replace(title,' ','')=replace(@title,' ','')
or   replace(email,' ','')=replace(@title,' ','')
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


---------------------------------- -------------------------------------------------------
/*Ranjbar 88.02.20*/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_LetterJpgFile]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_LetterJpgFile]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE procedure Get_LetterJpgFile(@LetterID int)  
as  
Select *  
from letterdata  
where LetterID = @LetterID  /* and PageNumber= @pagenumber  */
And Extention=1  


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO



---------------------------------- -------------------------------------------------------
/*Ranjbar 88.03.17*/

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_DistinctDate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_DistinctDate]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


CREATE PROCEDURE [Sp_DistinctDate] @MyFarsiToday nvarchar(10)   
As  
  declare @today char(10) , @dw tinyint  
  /*Set @today = dbo.shamsi(getdate())   Ranjbar*/
  Set @today = @MyFarsiToday
  Set @dw = datepart(dw , getdate()) --weekday 
  Select * from HistoryDateList(@Today ,@dw)   
  Order by ID  


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
--------------------------------------------------------------------------------------------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HistoryDateList]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[HistoryDateList]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE function HistoryDateList(@today char(10),@weekday tinyint)  
  
returns @result table (id int , Title nvarchar(100),beginDate char(10),Enddate char(10))  
begin  
  
declare @year char(4)  
set @year=substring(@today,1,4)  
  
insert into @result values (1, '«„—Ê“',@today,@today)  
insert into @result values (2, 'œÌ—Ê“',dbo.ShamsiIncDate(@today,0,0,-1),dbo.ShamsiIncDate(@today,0,0,-1))  
insert into @result values (3, 'Â› Â «ŒÌ—',dbo.ShamsiIncDate(@today,0,0,-@weekday),@today)  
insert into @result values (4, '„«Â «ŒÌ—',substring(@today,1,8)+'01',@today)  
declare @month int,@i int  
set @month=cast(substring(@today,9,2) as int)-1  
set @i=1  
  
 if @i<=@month  
 insert into @result values (5, '›—Ê—œÌ‰',@year+'/01/01',@year+'/01/31')  
 set @i=@i+1  
    
 if @i<=@month  
 insert into @result values (6, '«—œÌ»Â‘ ',@year+'/02/01',@year+'/02/31')  
 set @i=@i+1  
  
 if @i<=@month  
 insert into @result values (7, 'Œ—œ«œ',@year+'/03/01',@year+'/03/31')  
 set @i=@i+1  
  
 if @i<=@month  
 insert into @result values (8, ' Ì—',@year+'/04/01',@year+'/04/31')  
 set @i=@i+1  
  
 if @i<=@month  
 insert into @result values (9, '„—œ«œ',@year+'/05/01',@year+'/05/31')  
 set @i=@i+1  
  
 if @i<=@month  
 insert into @result values (10, '‘Â—ÌÊ—',@year+'/06/01',@year+'/06/31')  
 set @i=@i+1  
  
 if @i<=@month  
 insert into @result values (11, '„Â—',@year+'/07/01',@year+'/07/31')  
 set @i=@i+1  
  
 if @i<=@month  
 insert into @result values (12, '¬»«‰',@year+'/08/01',@year+'/08/31')  
 set @i=@i+1  
  
 if @i<=@month  
 insert into @result values (13, '¬–—',@year+'/09/01',@year+'/09/31')  
 set @i=@i+1  
  
 if @i<=@month  
 insert into @result values (14, 'œÌ',@year+'/10/01',@year+'/10/31')  
 set @i=@i+1  
  
 if @i<=@month  
 insert into @result values (15, '»Â„‰',@year+'/11/01',@year+'/11/31')  

---/*RAnjbar*/
 set @i=@i+1  
 if @i<=@month  
 insert into @result values (16, '«”›‰œ',@year+'/12/01',@year+'/12/29')  
---//
  
 insert into @result values (17, ' Â„Â „Ê«—œ ','1300/11/01',+'1399/12/30')  
return    
end  

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
--------------------------------------------------------------------------------------------------------------------------------------

/*Ranjbar ÃÂ  ‰„«Ì‘ ¬ÌﬂÊ‰  ’ÊÌ— œ— ›—„ «’·Ì*/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[has_Page]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[has_Page]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



CREATE FUNCTION has_Page(@LetterID int)
RETURNS bit AS  
BEGIN 
declare @res bit
if exists(
SELECT     PageNumber
FROM         LetterData
WHERE     LetterID=@LetterID and extention in (1,2))
set @res=1
else
set @res=0
return(@res)

END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO



  
----------------------------------------------------------------------------------------------------------
/*Ranjbar ÃÂ  ‰„«Ì‘ ¬ÌﬂÊ‰  ’ÊÌ— œ— ›—„ «’·Ì*/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[has_tifPage]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[has_tifPage]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE FUNCTION has_tifPage(@LetterID int)
RETURNS bit AS  
BEGIN 
declare @res bit

if exists(
SELECT     PageNumber
FROM         LetterData
WHERE     LetterID=@LetterID and extention in (1,2))
set @res=1
else
set @res=0
return(@res)

END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
---------------------------------- -------------------------------------------------------
/*Ranjbar 88.03.19 */
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_inbox]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_inbox]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


CREATE PROCEDURE [sp_inbox]      
@SecretariatID int,       
@LetterFormat tinyint,      
@OrgID int,      
@Proceeded bit,      
@Type tinyint,@myear tinyint,@date tinyint,@ArchiveFolderID int ,@where nvarchar(1000),      
@userID int,@Letter_Type int,@DeadLine int,@orderClause varchar(50)=' rc.recommitedate desc,l.indicatorid desc'      
as      
declare      
@sql nvarchar (4000),      
@rw nvarchar(2000),      
@Today char(10),      
@Proceed bit, -- @Proceed      
@todayToint varchar(10),  
@Mytoday Nvarchar(10)      
      
select @today=dbo.shamsi(getdate())      
      
set @Proceed=@Proceeded      
      
set @RW='WHERE    (Rc.OrgID = '+      
cast(@OrgID as varchar(10))+') AND (Rc.Proceeded = '+cast(@Proceeded as varchar(2))+')      
  and  L.myear='+cast(@myear as varchar(10))      
      
if @LetterFormat>0 set @rw=@rw+' and (l.LetterFormat ='+cast( @LetterFormat as varchar(2))+')'      
else set @rw=@rw+' and (l.LetterFormat in (1,2))'      
      
      
if @letter_Type>0      
set @rw=@rw+' AND (l.letter_Type = '+cast(@Letter_Type as varchar(2))+')'      
      
if @type>0      
      set @rw=@rw+' AND (Rc.Type = '+cast(@Type as varchar(2))+')'      
    
if @ArchiveFolderID>0      
set @rw=@rw+' AND (ArchiveFolderID = '+cast(@ArchiveFolderID as varchar(10))+')'      
      
if @date<>0      
begin      
 declare @dw tinyint,@bdate char(10),@edate char(10)      
  set @dw=datepart(dw,Getdate())  
--Ranjbar  
  ---select @bdate=begindate,@edate=Enddate from HistoryDateList(@today ,@dw) where id=@date   
  Set @Mytoday = Cast(1300+@myear as nvarchar)+ Substring(@Today,5,6)  
  select @bdate=begindate,@edate=Enddate from HistoryDateList(@Mytoday ,@dw) where id=@date   
--//  
      
 set @rw=@rw+' AND (RC.RecommiteDate between '''+@bdate+''' and '''+@edate+''')'      
end      
      
if @SecretariatID>0      
set @rw=@rw+' AND (SecretariatID = '+cast(@SecretariatID as varchar(10))+')'      
else      
set @rw=@rw+' AND (SecretariatID in (SELECT SecId FROM UserSecretariats WHERE UserId = '+cast(@userid as varchar(5))+'))'      
      
      
set @todayToint=cast(dbo.ShamsiToInt(@today) as varchar(10))      
      
if @DeadLine between -1 and 30      
 set @rw=@rw+' AND ('+      
case when @Proceed=1 then 'case when ChildRecommite.Proceeded=0 then ISNULL(ChildRecommite.DeadLineToint,'+@todayToint+') else  '''+@todayToint+''' end '      
else  'ISNULL(RC.DeadLineToint ,'+@todayToint+') ' end+' -'+@todayToint+' )<= '+cast(@DeadLine as varchar(5))      
      
      
set @sql=' SELECT top 100  L.LetterID,L.SignerID, L.IndicatorID, L.MYear, L.SecretariatID, L.Letter_Type, L.letterformat, L.IncommingNO, L.Incommingdate, L.ClassificationID,      
L.UrgencyID, L.Memo, L.Tostaffer,l.SentLetterID,L.AttachTitle, L.NumberOfAttachPages, L.NumberOfPage, L.ReceiveTypeID, L.UserID, L.RetroactionNo, L.UserMemo, L.RegistrationDate,      
l.toorgid,l.fromorgid,L.FollowLetterNo, L.LetterRecommites,l.finalized,l.CenterNo,l.CenterDate,l.templateID,l.headerID,      
l.registrationTime,l.fromstaffer,l.sendStatusID,L.LastUpdate,L.UserTableID,      
DBO.INNERNO(L.Letterid)  InnerNo, PRC.OrgID,  RC.ParentId,  RC.Paraph, RC.RecommiteDate,  RC.Proceeded,      
 RC.ProceedDate, RecommiteTypes.id ReType,RecommiteTypes.Title RecommitTypeTitle,      
case when fo.title is null then 0 else 1 end IsInner, isnull(FO.Title,TTO.title) RecommiterTitle,tto.title sendertitle,rc.recommiteid,      
 rc.id,  RC.StaffMemo,      
      
isnull(incommingno,indicatorid)  Yincommingno,Secretariats.PreCode,RC.IsCopy      
,dbo.has_Page(l.letterid) has_Page,      
dbo.has_WordPage(l.letterid) has_WordPage,      
dbo.has_file(l.letterid) has_file,'''' FirstView,'+      
'isnull('+      
case when @Proceed=1 then 'ChildRecommite.DeadLineToint' else 'RC.DeadLineToint' end+'-'+@todayToint+',0) DeadLineDays,'+     
case when @Proceed=1 then 'ChildRecommite.ViewDate' else 'RC.ViewDate' end+','+  --«Ì‰ Œÿ «÷«›Â ‘œ    
case when @Proceed=1 then 'ChildRecommite.DeadLineDate ' else  'RC.Deadlinedate  ' end+' DeadLineDate ,'+      
case when @Proceed=1 then 'ISNULL(ChildRecommite.Paraph,RC.Paraph) '   else ''' ''' end +' ChildParaph ,'+      
case when @Proceed=1 then 'RecommitedOrg.Title '   else ''' ''' end +' ChildOrg , '+      
case when @Proceed=1 then ' case when rc.ActionTypeID=5 then 5 else ChildRecommite.ActionTypeID end '  else  ' RC.ActionTypeID'   end +' ActionTypeID '+     
    
', (Select  Count(R.RecommiteID)      
From ReCommites R     
Inner join Letter on Letter.LetterID = R.LetterID    
Inner join FromOrganizations on R.OrgID = FromOrganizations.ID    
Where R.LetterID = L.LetterID '+    
' And R.OrgID = '+Cast(@OrgID as varchar) +    
' Having Count(R.RecommiteID) > 1 ) as UserRecomCount  ' +    
' , RC.IsAnswer , RC.ISFollowup ' +    
    
'FROM ReCommites RC      
INNER JOIN Letter L ON RC.LetterID = L.LetterID      
INNER JOIN Secretariats  ON Secretariats.Secid = L.SecretariatID      
left JOIN ReCommites PRC ON RC.LetterID = PRC.LetterID AND PRC.ID = RC.ParentId  AND PRC.type = RC.type      
left JOIN FromOrganizations FO ON FO.ID = PRC.OrgID      
left JOIN FromOrganizations TTO ON TTO.ID = L.ToOrgID       
INNER JOIN RecommiteTypes ON RC.Type = RecommiteTypes.ID '+      
case when @Proceed=1 then '      
left JOIN ReCommites ChildRecommite ON RC.LetterID = ChildRecommite.LetterID AND RC.ID = ChildRecommite.ParentId  AND ChildRecommite.type = RC.type       
left JOIN FromOrganizations RecommitedOrg ON RecommitedOrg.ID = ChildRecommite.OrgID '      
else '' end      
      
if @archiveFolderID<>0        
set @sql=@sql+'       
Left join LetterArchiveFolder on LetterArchiveFolder.Letterid=Rc.RecommiteID '      
      
set @sql=@sql+@rW      
      
      
set @where=isnull(ltrim(rtrim(@where)),'')      
if (@where<>'')       
select @sql=@sql+' and '+@where      
      
if isnull(ltrim(@orderClause),'')=''       
 set @orderClause=' rc.recommitedate desc,l.indicatorid desc'      
      
      
set @sql=@sql+' order by '+@orderClause      
exec sp_executesql  @sql      
PRINT @sql  
  


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO





---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[get_FromOrganizationsTitle_byID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[get_FromOrganizationsTitle_byID]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE [Get_FromOrganizationsTitle_ByID]  
(@ID [int],  
@Title [nvarchar](100) output,  
@ResponsibleStaffer [nvarchar](50) output , 
@code nvarchar(10) output )  
AS 
Select  @Title  = Title,  
@ResponsibleStaffer  = ResponsibleStaffer,  
@code=code  from [dbo].[FromOrganizations]   
WHERE ( [ID]  = @ID)
/*Ranjbar*/
if @ResponsibleStaffer is null
   Set @ResponsibleStaffer = '' --'»œÊ‰ „”∆Ê·'  
----
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO



---------------------------------- -------------------------------------------------------
[Num]=3
-----------

/*Rajbar Ranjbar 88.03.09  ﬁ—«—œ«œ‰ «Ì‰œﬂ” Ê «— »«ÿ »Ì‰ Ãœ«Ê·*/  
------------------------------------------------------------------------------------------

/* Ranjbar  Urgenceis.ID  =>  Change TinyInt to Int*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_Urgenceis
	(
	ID int NOT NULL,
	Title nvarchar(50) NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.Urgenceis)
	 EXEC('INSERT INTO dbo.Tmp_Urgenceis (ID, Title)
		SELECT CONVERT(int, ID), Title FROM dbo.Urgenceis TABLOCKX')
GO
DROP TABLE dbo.Urgenceis
GO
EXECUTE sp_rename N'dbo.Tmp_Urgenceis', N'Urgenceis', 'OBJECT'
GO

COMMIT
GO
--------------------------------------------------------------------------------

--- PRIMARY KEY ﬁ—«— œ«œ‰

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION

if not Exists(Select * from Sysindexes Where(Name = 'PK_Accesses')And(ID =(Select ID from SysObjects Where Name = 'Accesses')) )  
ALTER TABLE dbo.Accesses WITH NOCHECK ADD CONSTRAINT  
	PK_Accesses PRIMARY KEY CLUSTERED 
	(
	ID
	) ON [PRIMARY]

GO

if not Exists(Select * from Sysindexes Where(Name = 'PK_Tables')And(ID =(Select ID from SysObjects Where Name = 'Tables')) )  
ALTER TABLE dbo.Tables WITH NOCHECK ADD CONSTRAINT  
	PK_Tables PRIMARY KEY CLUSTERED 
	(
	TableId
	) ON [PRIMARY]

GO

if not Exists(Select * from Sysindexes Where(Name = 'PK_Urgenceis')And(ID =(Select ID from SysObjects Where Name = 'Urgenceis')) )  
ALTER TABLE dbo.Urgenceis WITH NOCHECK ADD CONSTRAINT  
	PK_Urgenceis PRIMARY KEY CLUSTERED 
	(
	ID
	) WITH FILLFACTOR = 90 ON [PRIMARY]

GO

if not Exists(Select * from Sysindexes Where(Name = 'PK_Secretariats')And(ID =(Select ID from SysObjects Where Name = 'Secretariats')) )  
ALTER TABLE dbo.Secretariats WITH NOCHECK ADD CONSTRAINT  
	PK_Secretariats PRIMARY KEY CLUSTERED 
	(
	SecID
	) WITH FILLFACTOR = 90 ON [PRIMARY]

GO

if not Exists(Select * from Sysindexes Where(Name = 'PK_Accesses')And(ID =(Select ID from SysObjects Where Name = 'Accesses')) )  
ALTER TABLE dbo.Accesses WITH NOCHECK ADD CONSTRAINT  
	PK_Accesses PRIMARY KEY CLUSTERED 
	(
	ID
	) ON [PRIMARY]

GO

if not Exists(Select * from Sysindexes Where(Name = 'PK_Tables')And(ID =(Select ID from SysObjects Where Name = 'Tables')) )  
ALTER TABLE dbo.Tables WITH NOCHECK ADD CONSTRAINT  
	PK_Tables PRIMARY KEY CLUSTERED 
	(
	TableId
	) ON [PRIMARY]

GO

COMMIT
GO

-------------- ----------------------------------------------------------
/* Ranjbar  Table.TableID  =>  Change TinyInt to Int*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_Tables
	(
	TableId int NOT NULL,
	TableName nvarchar(50) NULL,
	Description nvarchar(50) NULL,
	TableType tinyint NULL,
	TableCode varchar(50) NULL,
	UserField1 nvarchar(50) NULL,
	UserField2 nvarchar(50) NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.Tables)
	 EXEC('INSERT INTO dbo.Tmp_Tables (TableId, TableName, Description, TableType, TableCode, UserField1, UserField2)
		SELECT CONVERT(int, TableId), TableName, Description, TableType, TableCode, UserField1, UserField2 FROM dbo.Tables TABLOCKX')
GO
DROP TABLE dbo.Tables
GO
EXECUTE sp_rename N'dbo.Tmp_Tables', N'Tables', 'OBJECT'
GO
ALTER TABLE dbo.Tables ADD CONSTRAINT
	PK_Tables PRIMARY KEY CLUSTERED 
	(
	TableId
	) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX IX_Tables_TableType ON dbo.Tables
	(
	TableType
	) ON [PRIMARY]
GO
COMMIT
GO

-------------- ----------------------------------------------------------
/* Ranjbar  Urgenceis.ID  =>  Change TinyInt to Int*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_Urgenceis
	(
	ID int NOT NULL,
	Title nvarchar(50) NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.Urgenceis)
	 EXEC('INSERT INTO dbo.Tmp_Urgenceis (ID, Title)
		SELECT CONVERT(int, ID), Title FROM dbo.Urgenceis TABLOCKX')
GO
DROP TABLE dbo.Urgenceis
GO
EXECUTE sp_rename N'dbo.Tmp_Urgenceis', N'Urgenceis', 'OBJECT'
GO
ALTER TABLE dbo.Urgenceis WITH NOCHECK ADD CONSTRAINT  
	PK_Urgenceis PRIMARY KEY CLUSTERED 
	(
	ID
	) WITH FILLFACTOR = 90 ON [PRIMARY]

GO
COMMIT
GO

------------------------------------------------------------------------------------------
/* Ranjbar News.UrgenceisID  =>  Tinyint to int */

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.News
	DROP CONSTRAINT DF_News_UrgencyID
GO
CREATE TABLE dbo.Tmp_News
	(
	NewsID int NOT NULL IDENTITY (1, 1),
	Code int NOT NULL,
	Title nvarchar(300) NOT NULL,
	Memo nvarchar(3000) NULL,
	UrgenceisID int NULL,
	DateAnnounce nvarchar(10) NULL,
	TimeAnnounce nvarchar(10) NULL,
	DateExpire nvarchar(10) NULL,
	UserID int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_News WITH NOCHECK ADD CONSTRAINT  
	DF_News_UrgencyID DEFAULT (1) FOR UrgenceisID
GO
SET IDENTITY_INSERT dbo.Tmp_News ON
GO
IF EXISTS(SELECT * FROM dbo.News)
	 EXEC('INSERT INTO dbo.Tmp_News (NewsID, Code, Title, Memo, UrgenceisID, DateAnnounce, TimeAnnounce, DateExpire, UserID)
		SELECT NewsID, Code, Title, Memo, CONVERT(int, UrgenceisID), DateAnnounce, TimeAnnounce, DateExpire, UserID FROM dbo.News TABLOCKX')
GO
SET IDENTITY_INSERT dbo.Tmp_News OFF
GO
DROP TABLE dbo.News
GO
EXECUTE Sp_rename N'dbo.Tmp_News', N'News', 'OBJECT'
GO
ALTER TABLE dbo.News WITH NOCHECK ADD CONSTRAINT  
	PK_News PRIMARY KEY CLUSTERED 
	(
	NewsID
	) ON [PRIMARY]

GO
Create Trigger Tr_Del_News
ON dbo.News
for Delete
As
  Set nocount on
  Declare @DeleteID int
  Select @DeleteID = NewsID From Deleted
  --if Exists(Select * from ImageData Where(TableName = 'News')And(TableID = @DeleteID))
  Delete From ImageData Where(TableName = 'News')And(TableID = @DeleteID)
  Delete From NewsUsers Where(NewsID = @DeleteID)
  Set nocount Off
GO
COMMIT
GO

------------------------------------------------------------------------------------------
/*Ranjbar   UserLog.UserID   And  UserLog.FormID  =>  Conver TinyInt to Int  */

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
if Exists(Select name from SysObjects Where Name = 'DF_UserLog_FormID' )  --Ranjbar
ALTER TABLE dbo.UserLog DROP CONSTRAINT DF_UserLog_FormID
GO
if Exists(Select name from SysObjects Where Name = 'DF_UserLog_Time1' )  --Ranjbar
ALTER TABLE dbo.UserLog DROP CONSTRAINT DF_UserLog_Time1
GO
CREATE TABLE dbo.Tmp_UserLog
	(
	UserID int NOT NULL,
	FormID int NOT NULL,
	ActionID int NOT NULL,
	Time1 datetime NOT NULL,
	LetterID int NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_UserLog WITH NOCHECK ADD CONSTRAINT  
	DF_UserLog_FormID DEFAULT (1) FOR FormID
GO
ALTER TABLE dbo.Tmp_UserLog WITH NOCHECK ADD CONSTRAINT  
	DF_UserLog_Time1 DEFAULT (getdate()) FOR Time1
GO
IF EXISTS(SELECT * FROM dbo.UserLog)
	 EXEC('INSERT INTO dbo.Tmp_UserLog (UserID, FormID, ActionID, Time1, LetterID)
		SELECT CONVERT(int, UserID), CONVERT(int, FormID), ActionID, Time1, LetterID FROM dbo.UserLog TABLOCKX')
GO
DROP TABLE dbo.UserLog
GO
EXECUTE sp_rename N'dbo.Tmp_UserLog', N'UserLog', 'OBJECT'
GO
COMMIT
GO

------------------------------------------------------------------------------------------

/* Ranjbar SendStatus.SendStatusID => Tinyint to int */

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_SendStatus
	(
	SendStatusID int NOT NULL,
	SendStatusTitle nvarchar(100) NOT NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.SendStatus)
	 EXEC('INSERT INTO dbo.Tmp_SendStatus (SendStatusID, SendStatusTitle)
		SELECT CONVERT(int, SendStatusID), SendStatusTitle FROM dbo.SendStatus TABLOCKX')
GO
DROP TABLE dbo.SendStatus
GO
EXECUTE sp_rename N'dbo.Tmp_SendStatus', N'SendStatus', 'OBJECT'
GO
ALTER TABLE dbo.SendStatus ADD CONSTRAINT
	PK_SendStatus PRIMARY KEY CLUSTERED 
	(
	SendStatusID
	) ON [PRIMARY]

GO
COMMIT
GO
---------------------------------- -------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Tr_NotDel_SendStatus]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[Tr_NotDel_SendStatus]
GO

CREATE Trigger Tr_NotDel_SendStatus
On SendStatus
instead of Delete
As
  Select * from SendStatus
  --RaisError('(Trigger) ÊÃÊœ ‰œ«—œ SendStatus «„ﬂ«‰ Õ–› «“ ÃœÊ· ', 16, 1)

GO
------------------------------------------------------------------------------------------
--Ranjbar FieldType.FieldTypeID   Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_FieldType
	(
	FieldTypeID int NOT NULL,
	FieldTypeTitle nvarchar(50) NOT NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.FieldType)
	 EXEC('INSERT INTO dbo.Tmp_FieldType (FieldTypeID, FieldTypeTitle)
		SELECT CONVERT(int, FieldTypeID), FieldTypeTitle FROM dbo.FieldType TABLOCKX')
GO
DROP TABLE dbo.FieldType
GO
EXECUTE sp_rename N'dbo.Tmp_FieldType', N'FieldType', 'OBJECT'
GO
ALTER TABLE dbo.FieldType ADD CONSTRAINT
	PK_FieldType PRIMARY KEY CLUSTERED 
	(
	FieldTypeID
	) ON [PRIMARY]

GO
COMMIT
GO

------------------------------------------------------------------------------------------
--Ranjbar Letter.LetterFormats   Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION

if  Exists(Select name from SysObjects Where Name = 'DF__Letter__Secretar__1DBB5747' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__Secretar__1DBB5747
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__Letter_T__1EAF7B80' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__Letter_T__1EAF7B80
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__letterfo__1FA39FB9' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__letterfo__1FA39FB9
GO

if  Exists(Select name from SysObjects Where Name = 'DF__Letter__FromOrgI__2097C3F2' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__FromOrgI__2097C3F2
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__ToOrgID__218BE82B' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__ToOrgID__218BE82B
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__Classifi__22800C64' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__Classifi__22800C64
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__UrgencyI__2374309D' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__UrgencyI__2374309D
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__NumberOf__246854D6' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__NumberOf__246854D6
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__NumberOf__255C790F' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__NumberOf__255C790F
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__ReceiveT__26509D48' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__ReceiveT__26509D48
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__UserID__2744C181' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__UserID__2744C181
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__Finalize__4BE214AA' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__Finalize__4BE214AA
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__SendStat__4CD638E3' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__SendStat__4CD638E3
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__LastUpda__7D446614' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__LastUpda__7D446614
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__Archived__047B7388' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__Archived__047B7388
GO
if  Exists(Select name from SysObjects Where Name = 'DF__Letter__ActionTy__657894D2' )  --Ranjbar
ALTER TABLE dbo.Letter
	DROP CONSTRAINT DF__Letter__ActionTy__657894D2
GO
CREATE TABLE dbo.Tmp_Letter
	(
	LetterID int NOT NULL IDENTITY (1, 1),
	IndicatorID int NOT NULL,
	MYear tinyint NOT NULL,
	SecretariatID int NOT NULL,
	Letter_Type int NOT NULL,
	letterformat int NOT NULL,
	IncommingNO nvarchar(50) NULL,
	Incommingdate nvarchar(10) NULL,
	CenterNo nvarchar(50) NULL,
	CenterDate char(10) NULL,
	FromOrgID int NOT NULL,
	ToOrgID int NOT NULL,
	Signerid nvarchar(50) NULL,
	ClassificationID int NOT NULL,
	UrgencyID int NOT NULL,
	Memo nvarchar(2000) NULL,
	AttachTitle nvarchar(50) NULL,
	NumberOfAttachPages smallint NULL,
	NumberOfPage tinyint NOT NULL,
	ReceiveTypeID int NOT NULL,
	UserID int NOT NULL,
	RetroactionNo nvarchar(50) NULL,
	UserMemo nvarchar(255) NULL,
	RegistrationDate char(10) NOT NULL,
	RegistrationTime varchar(5) NOT NULL,
	FollowLetterNo nvarchar(50) NULL,
	ToStaffer nvarchar(50) NULL,
	SentLetterID int NULL,
	TemplateID int NULL,
	HeaderID int NULL,
	LetterRecommites nvarchar(500) NULL,
	PreCode nvarchar(50) NULL,
	fromstaffer nvarchar(50) NULL,
	Finalized bit NOT NULL,
	SendStatusID int NOT NULL,
	LastUpdate datetime NOT NULL,
	UserTableID int NULL,
	UniqueID bigint NULL,
	Archived bit NOT NULL,
	SubjectDescription nvarchar(255) NULL,
	SubjectID int NULL,
	LatestActionTypeID int NULL,
	LatestActionReason nvarchar(255) NULL,
	DeadLineDate char(10) NULL,
	ActionTypeID int NOT NULL,
	UserTableID2 int NULL,
	EmailNuFromDate nvarchar(20) NULL
	)  ON [PRIMARY]
GO
DECLARE @v sql_variant 
SET @v = N''
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_Letter', N'column', N'SecretariatID'
GO
DECLARE @v sql_variant 
SET @v = N''
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_Letter', N'column', N'Letter_Type'
GO
DECLARE @v sql_variant 
SET @v = N''
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_Letter', N'column', N'letterformat'
GO
DECLARE @v sql_variant 
SET @v = N''
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_Letter', N'column', N'ClassificationID'
GO
DECLARE @v sql_variant 
SET @v = N''
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_Letter', N'column', N'UrgencyID'
GO
DECLARE @v sql_variant 
SET @v = N''
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_Letter', N'column', N'ReceiveTypeID'
GO
DECLARE @v sql_variant 
SET @v = N''
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_Letter', N'column', N'SendStatusID'
GO
DECLARE @v sql_variant 
SET @v = N''
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_Letter', N'column', N'LatestActionTypeID'
GO
DECLARE @v sql_variant 
SET @v = N''
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_Letter', N'column', N'ActionTypeID'
GO
DECLARE @v sql_variant 
SET @v = N''
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_Letter', N'column', N'EmailNuFromDate'
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__Secretar__1DBB5747 DEFAULT (1) FOR SecretariatID
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__Letter_T__1EAF7B80 DEFAULT (1) FOR Letter_Type
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__letterfo__1FA39FB9 DEFAULT (1) FOR letterformat
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__FromOrgI__2097C3F2 DEFAULT ((-1)) FOR FromOrgID
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__ToOrgID__218BE82B DEFAULT (0) FOR ToOrgID
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__Classifi__22800C64 DEFAULT (1) FOR ClassificationID
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__UrgencyI__2374309D DEFAULT (1) FOR UrgencyID
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__NumberOf__246854D6 DEFAULT (1) FOR NumberOfAttachPages
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__NumberOf__255C790F DEFAULT (1) FOR NumberOfPage
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__ReceiveT__26509D48 DEFAULT (1) FOR ReceiveTypeID
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__UserID__2744C181 DEFAULT (0) FOR UserID
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__Finalize__4BE214AA DEFAULT (1) FOR Finalized
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__SendStat__4CD638E3 DEFAULT (1) FOR SendStatusID
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__LastUpda__7D446614 DEFAULT (getdate()) FOR LastUpdate
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__Archived__047B7388 DEFAULT (0) FOR Archived
GO
ALTER TABLE dbo.Tmp_Letter WITH NOCHECK ADD CONSTRAINT  
	DF__Letter__ActionTy__657894D2 DEFAULT (1) FOR ActionTypeID
GO
SET IDENTITY_INSERT dbo.Tmp_Letter ON
GO
IF EXISTS(SELECT * FROM dbo.Letter)
EXEC('INSERT INTO dbo.Tmp_Letter (LetterID, IndicatorID, MYear, SecretariatID, Letter_Type, letterformat, IncommingNO, Incommingdate, CenterNo, CenterDate, FromOrgID, ToOrgID, Signerid, ClassificationID, UrgencyID, Memo, AttachTitle, NumberOfAttachPages, NumberOfPage, ReceiveTypeID, UserID, RetroactionNo, UserMemo, RegistrationDate, RegistrationTime, FollowLetterNo, ToStaffer, SentLetterID, TemplateID, HeaderID, LetterRecommites, PreCode, fromstaffer, Finalized, SendStatusID, LastUpdate, UserTableID, UniqueID, Archived, SubjectDescription, SubjectID,  LatestActionTypeID, LatestActionReason, DeadLineDate, ActionTypeID, UserTableID2, EmailNuFromDate)
      SELECT LetterID, IndicatorID, MYear, CONVERT(int, SecretariatID), CONVERT(int, Letter_Type), CONVERT(int, letterformat), IncommingNO, Incommingdate, CenterNo, CenterDate, FromOrgID, ToOrgID, Signerid, CONVERT(int, ClassificationID), CONVERT(int, UrgencyID), Memo, AttachTitle, NumberOfAttachPages, NumberOfPage, CONVERT(int, ReceiveTypeID), UserID, RetroactionNo, UserMemo, RegistrationDate, RegistrationTime, FollowLetterNo, ToStaffer, SentLetterID, TemplateID, HeaderID, LetterRecommites, PreCode, fromstaffer, Finalized, CONVERT(int, SendStatusID), LastUpdate, UserTableID, UniqueID, Archived, SubjectDescription, SubjectID,  CONVERT(int, LatestActionTypeID), LatestActionReason, DeadLineDate, CONVERT(int, ActionTypeID), UserTableID2, EmailNuFromDate FROM dbo.Letter TABLOCKX')
GO
SET IDENTITY_INSERT dbo.Tmp_Letter OFF
GO
DROP TABLE dbo.Letter
GO
EXECUTE sp_rename N'dbo.Tmp_Letter', N'Letter', 'OBJECT'
GO
ALTER TABLE dbo.Letter WITH NOCHECK ADD CONSTRAINT  
	PK_Letter PRIMARY KEY CLUSTERED 
	(
	LetterID
	) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX ind_idx ON dbo.Letter
	(
	IndicatorID
	) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX letter_idx ON dbo.Letter
	(
	SecretariatID,
	Letter_Type,
	MYear,
	letterformat,
	IndicatorID
	) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX myear_idx ON dbo.Letter
	(
	MYear
	) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX secid_idx ON dbo.Letter
	(
	SecretariatID
	) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX letter_type_idx ON dbo.Letter
	(
	Letter_Type
	) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX letterformat_idx ON dbo.Letter
	(
	letterformat
	) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX incommingno_idx ON dbo.Letter
	(
	IncommingNO
	) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX registrationdate_idx ON dbo.Letter
	(
	RegistrationDate
	) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX fromorgid_idx ON dbo.Letter
	(
	FromOrgID
	) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX ToOrgid_idx ON dbo.Letter
	(
	ToOrgID
	) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX Letter_IDX_Indicator ON dbo.Letter
	(
	IndicatorID,
	MYear,
	SecretariatID,
	Letter_Type,
	letterformat
	) ON [PRIMARY]
GO
COMMIT
GO

------------------------------------------------------------------------------------------

--Ranjbar Fields.FieldTypeID   Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION

if Exists(Select name from SysObjects Where Name = 'DF_Fields_TableID' )  --Ranjbar
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_TableID
GO

if  Exists(Select name from SysObjects Where Name = 'DF_Fields_IsWhere' )  --Ranjbar
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_IsWhere
GO

if  Exists(Select name from SysObjects Where Name = 'DF_Fields_ISString' )  --Ranjbar
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_ISString
GO

if  Exists(Select name from SysObjects Where Name = 'DF_Fields_IsLike' )  --Ranjbar
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_IsLike
GO

if  Exists(Select name from SysObjects Where Name = 'DF_Fields_EveryLike' )  --Ranjbar
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_EveryLike
GO

if  Exists(Select name from SysObjects Where Name = 'DF_Fields_VisibleInGrid' )  --Ranjbar
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_VisibleInGrid
GO

if  Exists(Select name from SysObjects Where Name = 'DF__Fields__isblob__4AEDF071' )  --Ranjbar
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF__Fields__isblob__4AEDF071
GO

if  Exists(Select name from SysObjects Where Name = 'DF__Fields__order__0A9E6132' )  --Ranjbar
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF__Fields__order__0A9E6132
GO
CREATE TABLE dbo.Tmp_Fields
	(
	ID int NOT NULL IDENTITY (1, 1),
	FieldName nvarchar(50) NOT NULL,
	TableID int NOT NULL,
	Description nvarchar(50) NULL,
	IsWhere bit NOT NULL,
	ISString bit NOT NULL,
	IsLike bit NOT NULL,
	EveryLike bit NOT NULL,
	VisibleInGrid bit NOT NULL,
	isblob bit NULL,
	FieldTypeID int NULL,
	ReferenceTableID int NULL,
	[order] int NULL,
	FieldGroupID int NULL,
	isboolean bit NULL
	)  ON [PRIMARY]
GO

if not Exists(Select name from SysObjects Where Name = 'DF_Fields_TableID' )  --Ranjbar
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_TableID DEFAULT (1) FOR TableID
GO
if not Exists(Select name from SysObjects Where Name = 'DF_Fields_IsWhere' )  --Ranjbar
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_IsWhere DEFAULT (1) FOR IsWhere
GO
if not Exists(Select name from SysObjects Where Name = 'DF_Fields_ISString' )  --Ranjbar
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_ISString DEFAULT (1) FOR ISString
GO
if not Exists(Select name from SysObjects Where Name = 'DF_Fields_IsLike' )  --Ranjbar
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_IsLike DEFAULT (1) FOR IsLike
GO
if not Exists(Select name from SysObjects Where Name = 'DF_Fields_EveryLike' )  --Ranjbar
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_EveryLike DEFAULT (0) FOR EveryLike
GO
if not Exists(Select name from SysObjects Where Name = 'DF_Fields_VisibleInGrid' )  --Ranjbar
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_VisibleInGrid DEFAULT (1) FOR VisibleInGrid
GO
if not Exists(Select name from SysObjects Where Name = 'DF__Fields__isblob__4AEDF071' )  --Ranjbar
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF__Fields__isblob__4AEDF071 DEFAULT (0) FOR isblob
GO
if not Exists(Select name from SysObjects Where Name = 'DF__Fields__order__0A9E6132' )  --Ranjbar
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF__Fields__order__0A9E6132 DEFAULT (1) FOR [order]
GO
SET IDENTITY_INSERT dbo.Tmp_Fields ON
GO
IF EXISTS(SELECT * FROM dbo.Fields)
	 EXEC('INSERT INTO dbo.Tmp_Fields (ID, FieldName, TableID, Description, IsWhere, ISString, IsLike, EveryLike, VisibleInGrid, isblob, FieldTypeID, ReferenceTableID, [order], FieldGroupID, isboolean)
		SELECT ID, FieldName, TableID, Description, IsWhere, ISString, IsLike, EveryLike, VisibleInGrid, isblob, CONVERT(int, FieldTypeID), CONVERT(int, ReferenceTableID), [order], FieldGroupID, isboolean FROM dbo.Fields TABLOCKX')
GO
SET IDENTITY_INSERT dbo.Tmp_Fields OFF
GO
DROP TABLE dbo.Fields
GO
EXECUTE sp_rename N'dbo.Tmp_Fields', N'Fields', 'OBJECT'
GO
ALTER TABLE dbo.Fields ADD CONSTRAINT
	PK_Fields PRIMARY KEY CLUSTERED 
	(
	ID
	) ON [PRIMARY]

GO
COMMIT
GO

------------------------------------------------------------------------------------------
--Ranjbar    Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_LetterTypes
	(
	ID int NOT NULL,
	Title nvarchar(50) NULL,
	PreCode nvarchar(10) NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.LetterTypes)
	 EXEC('INSERT INTO dbo.Tmp_LetterTypes (ID, Title, PreCode)
		SELECT CONVERT(int, ID), Title, PreCode FROM dbo.LetterTypes TABLOCKX')
GO
DROP TABLE dbo.LetterTypes
GO
EXECUTE sp_rename N'dbo.Tmp_LetterTypes', N'LetterTypes', 'OBJECT'
GO
ALTER TABLE dbo.LetterTypes ADD CONSTRAINT
	PK_LetterTypes_1 PRIMARY KEY CLUSTERED 
	(
	ID
	) WITH FILLFACTOR = 90 ON [PRIMARY]

GO
COMMIT
GO

--------------------------------------------------------------------------------------------

--Ranjbar    Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_Classifications
	(
	ID int NOT NULL,
	Title nvarchar(50) NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.Classifications)
	 EXEC('INSERT INTO dbo.Tmp_Classifications (ID, Title)
		SELECT CONVERT(int, ID), Title FROM dbo.Classifications TABLOCKX')
GO
DROP TABLE dbo.Classifications
GO
EXECUTE sp_rename N'dbo.Tmp_Classifications', N'Classifications', 'OBJECT'
GO
ALTER TABLE dbo.Classifications ADD CONSTRAINT
	PK_Classifications PRIMARY KEY CLUSTERED 
	(
	ID
	) WITH FILLFACTOR = 90 ON [PRIMARY]

GO
COMMIT
GO

-------------------------------------------------------------------------------------------------------------

--Ranjbar    Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_ReceiveTypes
	(
	ID int NOT NULL,
	Title nvarchar(50) NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.ReceiveTypes)
	 EXEC('INSERT INTO dbo.Tmp_ReceiveTypes (ID, Title)
		SELECT CONVERT(int, ID), Title FROM dbo.ReceiveTypes TABLOCKX')
GO
DROP TABLE dbo.ReceiveTypes
GO
EXECUTE sp_rename N'dbo.Tmp_ReceiveTypes', N'ReceiveTypes', 'OBJECT'
GO
ALTER TABLE dbo.ReceiveTypes ADD CONSTRAINT
	PK_ReceiveTypes PRIMARY KEY CLUSTERED 
	(
	ID
	) WITH FILLFACTOR = 90 ON [PRIMARY]

GO
COMMIT
GO

------------------------------------------------------------------------------------------

--Ranjbar    Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_ActionType
	(
	ActionTypeID int NOT NULL,
	ActionTypeTitle nvarchar(50) NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.ActionType)
	 EXEC('INSERT INTO dbo.Tmp_ActionType (ActionTypeID, ActionTypeTitle)
		SELECT CONVERT(int, ActionTypeID), ActionTypeTitle FROM dbo.ActionType TABLOCKX')
GO
DROP TABLE dbo.ActionType
GO
EXECUTE sp_rename N'dbo.Tmp_ActionType', N'ActionType', 'OBJECT'
GO
ALTER TABLE dbo.ActionType ADD CONSTRAINT
	PK_ActionType PRIMARY KEY CLUSTERED 
	(
	ActionTypeID
	) ON [PRIMARY]

GO
COMMIT
GO

------------------------------------------------------------------------------------------

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION

if Exists(Select name from SysObjects Where Name = 'DF_ReCommites_Type' )  --Ranjbar
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF_ReCommites_Type
GO
if Exists(Select name from SysObjects Where Name = 'DF_ReCommites_ParentId' )  --Ranjbar
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF_ReCommites_ParentId
GO
if Exists(Select name from SysObjects Where Name = 'DF_ReCommites_UserID' )  --Ranjbar
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF_ReCommites_UserID
GO
if Exists(Select name from SysObjects Where Name = 'DF_ReCommites_Done' )  --Ranjbar
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF_ReCommites_Done
GO
if Exists(Select name from SysObjects Where Name = 'DF__ReCommite__LastU__7F2CAE86' )  --Ranjbar
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF__ReCommite__LastU__7F2CAE86
GO
if Exists(Select name from SysObjects Where Name = 'DF__ReCommite__Actio__056F97C1' )  --Ranjbar
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF__ReCommite__Actio__056F97C1
GO
CREATE TABLE dbo.Tmp_ReCommites
	(
	RecommiteID int NOT NULL IDENTITY (1, 1),
	LetterID int NOT NULL,
	ID smallint NOT NULL,
	Type tinyint NOT NULL,
	ParentId smallint NOT NULL,
	OrgID int NOT NULL,
	Paraph nvarchar(500) NULL,
	RecommiteDate varchar(10) NOT NULL,
	UserID int NOT NULL,
	IsCopy bit NULL,
	Proceeded bit NOT NULL,
	ProceedDate varchar(10) NULL,
	staffmemo nvarchar(255) NULL,
	viewdate char(10) NULL,
	OrgStaff nvarchar(50) NULL,
	DeadLineDate char(10) NULL,
	LastUpdate datetime NULL,
	UniqueID bigint NULL,
	ActionTypeID int NULL,
	DeadLineToint int NULL,
	IsAnswer bit NULL,
	ISFollowup bit NULL
	)  ON [PRIMARY]
GO
DECLARE @v sql_variant 
SET @v = N'??? ?????'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_ReCommites', N'column', N'Type'
GO
if not Exists(Select name from SysObjects Where Name = 'DF_ReCommites_Type' )  --Ranjbar
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF_ReCommites_Type DEFAULT (1) FOR Type
GO
if not Exists(Select name from SysObjects Where Name = 'DF_ReCommites_ParentId' )  --Ranjbar
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF_ReCommites_ParentId DEFAULT (0) FOR ParentId
GO
if not Exists(Select name from SysObjects Where Name = 'DF_ReCommites_UserID' )  --Ranjbar
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF_ReCommites_UserID DEFAULT (1) FOR UserID
GO
if not Exists(Select name from SysObjects Where Name = 'DF_ReCommites_Done' )  --Ranjbar
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF_ReCommites_Done DEFAULT (0) FOR Proceeded
GO
if not Exists(Select name from SysObjects Where Name = 'DF__ReCommite__LastU__7F2CAE86' )  --Ranjbar
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF__ReCommite__LastU__7F2CAE86 DEFAULT (getdate()) FOR LastUpdate
GO
if not Exists(Select name from SysObjects Where Name = 'DF__ReCommite__Actio__056F97C1' )  --Ranjbar
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF__ReCommite__Actio__056F97C1 DEFAULT (1) FOR ActionTypeID
GO

SET IDENTITY_INSERT dbo.Tmp_ReCommites ON
GO
IF EXISTS(SELECT * FROM dbo.ReCommites)
	 EXEC('INSERT INTO dbo.Tmp_ReCommites (RecommiteID, LetterID, ID, Type, ParentId, OrgID, Paraph, RecommiteDate, UserID, IsCopy, Proceeded, ProceedDate, staffmemo, viewdate, OrgStaff, DeadLineDate, LastUpdate, UniqueID, ActionTypeID, DeadLineToint, IsAnswer, ISFollowup)
		SELECT RecommiteID, LetterID, ID, Type, ParentId, OrgID, Paraph, RecommiteDate, UserID, IsCopy, Proceeded, ProceedDate, staffmemo, viewdate, OrgStaff, DeadLineDate, LastUpdate, UniqueID, CONVERT(int, ActionTypeID), DeadLineToint, IsAnswer, ISFollowup FROM dbo.ReCommites TABLOCKX')
GO
SET IDENTITY_INSERT dbo.Tmp_ReCommites OFF
GO
DROP TABLE dbo.ReCommites
GO
EXECUTE sp_rename N'dbo.Tmp_ReCommites', N'ReCommites', 'OBJECT'
GO
ALTER TABLE dbo.ReCommites ADD CONSTRAINT
	PK_ReCommites PRIMARY KEY CLUSTERED 
	(
	RecommiteID
	) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX recommite_idx ON dbo.ReCommites
	(
	LetterID,
	ID,
	Type,
	ParentId,
	OrgID
	) ON [PRIMARY]
GO
CREATE TRIGGER Update_LetterRecommites ON dbo.ReCommites 
FOR INSERT, UPDATE, DELETE
AS
declare @Letterid int,@actionTypeID tinyint ,@Paraph nvarchar(500)


SELECT    @letterid=LetterID  ,@actionTypeID=actionTypeID
FROM         inserted

if @letterid is null
SELECT    @letterid=LetterID
FROM        deleted

select top 1 @paraph=isnull(Paraph,'') 
from Recommites
where letterid=@Letterid
order by recommitedate desc ,recommiteid desc 


UPDATE    Letter
SET    LetterRecommites =CAST(dbo.Recommites_by_indicator(LetterID)+'
¬Œ—Ì‰ Å«—«›: '+@paraph AS NVARCHAR(500))
 ,latestActionTypeid=@actionTypeID
where Letterid=@letterid
GO
COMMIT
GO

------------------------------------------------------------------------------------------

--Ranjbar Fields.FieldTypeID   Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_TableID
GO
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_IsWhere
GO
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_ISString
GO
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_IsLike
GO
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_EveryLike
GO
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF_Fields_VisibleInGrid
GO
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF__Fields__isblob__4AEDF071
GO
ALTER TABLE dbo.Fields
	DROP CONSTRAINT DF__Fields__order__0A9E6132
GO
CREATE TABLE dbo.Tmp_Fields
	(
	ID int NOT NULL IDENTITY (1, 1),
	FieldName nvarchar(50) NOT NULL,
	TableID int NOT NULL,
	Description nvarchar(50) NULL,
	IsWhere bit NOT NULL,
	ISString bit NOT NULL,
	IsLike bit NOT NULL,
	EveryLike bit NOT NULL,
	VisibleInGrid bit NOT NULL,
	isblob bit NULL,
	FieldTypeID int NULL,
	ReferenceTableID int NULL,
	[order] int NULL,
	FieldGroupID int NULL,
	isboolean bit NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_TableID DEFAULT (1) FOR TableID
GO
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_IsWhere DEFAULT (1) FOR IsWhere
GO
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_ISString DEFAULT (1) FOR ISString
GO
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_IsLike DEFAULT (1) FOR IsLike
GO
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_EveryLike DEFAULT (0) FOR EveryLike
GO
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF_Fields_VisibleInGrid DEFAULT (1) FOR VisibleInGrid
GO
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF__Fields__isblob__4AEDF071 DEFAULT (0) FOR isblob
GO
ALTER TABLE dbo.Tmp_Fields ADD CONSTRAINT
	DF__Fields__order__0A9E6132 DEFAULT (1) FOR [order]
GO
SET IDENTITY_INSERT dbo.Tmp_Fields ON
GO
IF EXISTS(SELECT * FROM dbo.Fields)
	 EXEC('INSERT INTO dbo.Tmp_Fields (ID, FieldName, TableID, Description, IsWhere, ISString, IsLike, EveryLike, VisibleInGrid, isblob, FieldTypeID, ReferenceTableID, [order], FieldGroupID, isboolean)
		SELECT ID, FieldName, TableID, Description, IsWhere, ISString, IsLike, EveryLike, VisibleInGrid, isblob, CONVERT(int, FieldTypeID), CONVERT(int, ReferenceTableID), [order], FieldGroupID, isboolean FROM dbo.Fields TABLOCKX')
GO
SET IDENTITY_INSERT dbo.Tmp_Fields OFF
GO
DROP TABLE dbo.Fields
GO
EXECUTE sp_rename N'dbo.Tmp_Fields', N'Fields', 'OBJECT'
GO
ALTER TABLE dbo.Fields ADD CONSTRAINT
	PK_Fields PRIMARY KEY CLUSTERED 
	(
	ID
	) ON [PRIMARY]

GO
COMMIT
GO

------------------------------------------------------------------------------------------
--Ranjbar    Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_LetterTypes
	(
	ID int NOT NULL,
	Title nvarchar(50) NULL,
	PreCode nvarchar(10) NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.LetterTypes)
	 EXEC('INSERT INTO dbo.Tmp_LetterTypes (ID, Title, PreCode)
		SELECT CONVERT(int, ID), Title, PreCode FROM dbo.LetterTypes TABLOCKX')
GO
DROP TABLE dbo.LetterTypes
GO
EXECUTE sp_rename N'dbo.Tmp_LetterTypes', N'LetterTypes', 'OBJECT'
GO
ALTER TABLE dbo.LetterTypes ADD CONSTRAINT
	PK_LetterTypes_1 PRIMARY KEY CLUSTERED 
	(
	ID
	) WITH FILLFACTOR = 90 ON [PRIMARY]

GO
COMMIT
GO

--------------------------------------------------------------------------------------------

--Ranjbar    Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_Classifications
	(
	ID int NOT NULL,
	Title nvarchar(50) NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.Classifications)
	 EXEC('INSERT INTO dbo.Tmp_Classifications (ID, Title)
		SELECT CONVERT(int, ID), Title FROM dbo.Classifications TABLOCKX')
GO
DROP TABLE dbo.Classifications
GO
EXECUTE sp_rename N'dbo.Tmp_Classifications', N'Classifications', 'OBJECT'
GO
ALTER TABLE dbo.Classifications ADD CONSTRAINT
	PK_Classifications PRIMARY KEY CLUSTERED 
	(
	ID
	) WITH FILLFACTOR = 90 ON [PRIMARY]

GO
COMMIT
GO

-------------------------------------------------------------------------------------------------------------

--Ranjbar    Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_ReceiveTypes
	(
	ID int NOT NULL,
	Title nvarchar(50) NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.ReceiveTypes)
	 EXEC('INSERT INTO dbo.Tmp_ReceiveTypes (ID, Title)
		SELECT CONVERT(int, ID), Title FROM dbo.ReceiveTypes TABLOCKX')
GO
DROP TABLE dbo.ReceiveTypes
GO
EXECUTE sp_rename N'dbo.Tmp_ReceiveTypes', N'ReceiveTypes', 'OBJECT'
GO
ALTER TABLE dbo.ReceiveTypes ADD CONSTRAINT
	PK_ReceiveTypes PRIMARY KEY CLUSTERED 
	(
	ID
	) WITH FILLFACTOR = 90 ON [PRIMARY]

GO
COMMIT
GO

------------------------------------------------------------------------------------------

--Ranjbar    Tinyint => int

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_ActionType
	(
	ActionTypeID int NOT NULL,
	ActionTypeTitle nvarchar(50) NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.ActionType)
	 EXEC('INSERT INTO dbo.Tmp_ActionType (ActionTypeID, ActionTypeTitle)
		SELECT CONVERT(int, ActionTypeID), ActionTypeTitle FROM dbo.ActionType TABLOCKX')
GO
DROP TABLE dbo.ActionType
GO
EXECUTE sp_rename N'dbo.Tmp_ActionType', N'ActionType', 'OBJECT'
GO
ALTER TABLE dbo.ActionType ADD CONSTRAINT
	PK_ActionType PRIMARY KEY CLUSTERED 
	(
	ActionTypeID
	) ON [PRIMARY]

GO
COMMIT
GO

------------------------------------------------------------------------------------------

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF_ReCommites_Type
GO
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF_ReCommites_ParentId
GO
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF_ReCommites_UserID
GO
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF_ReCommites_Done
GO
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF__ReCommite__LastU__7F2CAE86
GO
ALTER TABLE dbo.ReCommites
	DROP CONSTRAINT DF__ReCommite__Actio__056F97C1
GO
CREATE TABLE dbo.Tmp_ReCommites
	(
	RecommiteID int NOT NULL IDENTITY (1, 1),
	LetterID int NOT NULL,
	ID smallint NOT NULL,
	Type tinyint NOT NULL,
	ParentId smallint NOT NULL,
	OrgID int NOT NULL,
	Paraph nvarchar(500) NULL,
	RecommiteDate varchar(10) NOT NULL,
	UserID int NOT NULL,
	IsCopy bit NULL,
	Proceeded bit NOT NULL,
	ProceedDate varchar(10) NULL,
	staffmemo nvarchar(255) NULL,
	viewdate char(10) NULL,
	OrgStaff nvarchar(50) NULL,
	DeadLineDate char(10) NULL,
	LastUpdate datetime NULL,
	UniqueID bigint NULL,
	ActionTypeID int NULL,
	DeadLineToint int NULL,
	IsAnswer bit NULL,
	ISFollowup bit NULL
	)  ON [PRIMARY]
GO
DECLARE @v sql_variant 
SET @v = N'??? ?????'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'user', N'dbo', N'table', N'Tmp_ReCommites', N'column', N'Type'
GO
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF_ReCommites_Type DEFAULT (1) FOR Type
GO
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF_ReCommites_ParentId DEFAULT (0) FOR ParentId
GO
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF_ReCommites_UserID DEFAULT (1) FOR UserID
GO
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF_ReCommites_Done DEFAULT (0) FOR Proceeded
GO
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF__ReCommite__LastU__7F2CAE86 DEFAULT (getdate()) FOR LastUpdate
GO
ALTER TABLE dbo.Tmp_ReCommites ADD CONSTRAINT
	DF__ReCommite__Actio__056F97C1 DEFAULT (1) FOR ActionTypeID
GO
SET IDENTITY_INSERT dbo.Tmp_ReCommites ON
GO
IF EXISTS(SELECT * FROM dbo.ReCommites)
	 EXEC('INSERT INTO dbo.Tmp_ReCommites (RecommiteID, LetterID, ID, Type, ParentId, OrgID, Paraph, RecommiteDate, UserID, IsCopy, Proceeded, ProceedDate, staffmemo, viewdate, OrgStaff, DeadLineDate, LastUpdate, UniqueID, ActionTypeID, DeadLineToint, IsAnswer, ISFollowup)
		SELECT RecommiteID, LetterID, ID, Type, ParentId, OrgID, Paraph, RecommiteDate, UserID, IsCopy, Proceeded, ProceedDate, staffmemo, viewdate, OrgStaff, DeadLineDate, LastUpdate, UniqueID, CONVERT(int, ActionTypeID), DeadLineToint, IsAnswer, ISFollowup FROM dbo.ReCommites TABLOCKX')
GO
SET IDENTITY_INSERT dbo.Tmp_ReCommites OFF
GO
DROP TABLE dbo.ReCommites
GO
EXECUTE sp_rename N'dbo.Tmp_ReCommites', N'ReCommites', 'OBJECT'
GO
ALTER TABLE dbo.ReCommites ADD CONSTRAINT
	PK_ReCommites PRIMARY KEY CLUSTERED 
	(
	RecommiteID
	) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX recommite_idx ON dbo.ReCommites
	(
	LetterID,
	ID,
	Type,
	ParentId,
	OrgID
	) ON [PRIMARY]
GO
CREATE TRIGGER Update_LetterRecommites ON dbo.ReCommites 
FOR INSERT, UPDATE, DELETE
AS
declare @Letterid int,@actionTypeID tinyint ,@Paraph nvarchar(500)


SELECT    @letterid=LetterID  ,@actionTypeID=actionTypeID
FROM         inserted

if @letterid is null
SELECT    @letterid=LetterID
FROM        deleted

select top 1 @paraph=isnull(Paraph,'') 
from Recommites
where letterid=@Letterid
order by recommitedate desc ,recommiteid desc 


UPDATE    Letter
SET    LetterRecommites =CAST(dbo.Recommites_by_indicator(LetterID)+'
¬Œ—Ì‰ Å«—«›: '+@paraph AS NVARCHAR(500))
 ,latestActionTypeid=@actionTypeID
where Letterid=@letterid
GO
COMMIT
GO

------------------------------------------------------------------------------------------

/*Rajbar 88.03.09  ﬁ—«—œ«œ‰ «Ì‰œﬂ” Ê «— »«ÿ »Ì‰ Ãœ«Ê·*/  

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION


if not Exists(Select * from Sysindexes Where(Name = 'IX_Actions_ID')And(ID =(Select ID from SysObjects Where Name = 'Actions')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Actions_ID ON dbo.Actions
	(ID) ON [PRIMARY]

GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ApplicationForms_ID')And(ID =(Select ID from SysObjects Where Name = 'ApplicationForms')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ApplicationForms_ID ON dbo.ApplicationForms
	(
	ID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ArchiveFolder_ParentFolderID')And(ID =(Select ID from SysObjects Where Name = 'ArchiveFolder')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ArchiveFolder_ParentFolderID ON dbo.ArchiveFolder
	(
	ParentFolderID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ArchiveFolder_Title')And(ID =(Select ID from SysObjects Where Name = 'ArchiveFolder')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ArchiveFolder_Title ON dbo.ArchiveFolder
	(
	Title
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ArchiveFolder_UserID')And(ID =(Select ID from SysObjects Where Name = 'ArchiveFolder')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ArchiveFolder_UserID ON dbo.ArchiveFolder
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'PK_Emails')And(ID =(Select ID from SysObjects Where Name = 'Emails')) )  --Ranjbar
ALTER TABLE dbo.Emails WITH NOCHECK ADD CONSTRAINT  
	PK_Emails PRIMARY KEY CLUSTERED 
	(
	EmailsID
	) ON [PRIMARY]

GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Emails_Code')And(ID =(Select ID from SysObjects Where Name = 'Emails')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Emails_Code ON dbo.Emails
	(
	Code
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Emails_Subject')And(ID =(Select ID from SysObjects Where Name = 'Emails')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Emails_Subject ON dbo.Emails
	(
	Subject
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Emails_EmailNuFromDate')And(ID =(Select ID from SysObjects Where Name = 'Emails')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Emails_EmailNuFromDate ON dbo.Emails
	(
	EmailNuFromDate
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Emails_SendAddress')And(ID =(Select ID from SysObjects Where Name = 'Emails')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Emails_SendAddress ON dbo.Emails
	(
	SendAddress
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ErrorMessage_ErrorMessage')And(ID =(Select ID from SysObjects Where Name = 'ErrorMessage')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ErrorMessage_ErrorMessage ON dbo.ErrorMessage
	(
	ErrorMessage
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ErrorMessage_FarsiMessage')And(ID =(Select ID from SysObjects Where Name = 'ErrorMessage')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ErrorMessage_FarsiMessage ON dbo.ErrorMessage
	(
	FarsiMessage
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_FieldAccess_FieldID')And(ID =(Select ID from SysObjects Where Name = 'FieldAccess')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_FieldAccess_FieldID ON dbo.FieldAccess
	(
	FieldID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_FieldAccess_UserID')And(ID =(Select ID from SysObjects Where Name = 'FieldAccess')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_FieldAccess_UserID ON dbo.FieldAccess
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_FieldAccess_AccessTypeID')And(ID =(Select ID from SysObjects Where Name = 'FieldAccess')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_FieldAccess_AccessTypeID ON dbo.FieldAccess
	(
	AccessTypeID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Fields_TableID')And(ID =(Select ID from SysObjects Where Name = 'Fields')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Fields_TableID ON dbo.Fields
	(
	TableID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Fields_FieldName')And(ID =(Select ID from SysObjects Where Name = 'Fields')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Fields_FieldName ON dbo.Fields
	(
	FieldName
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Fields_FieldGroupID')And(ID =(Select ID from SysObjects Where Name = 'Fields')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Fields_FieldGroupID ON dbo.Fields
	(
	FieldGroupID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Fields_FieldTypeID')And(ID =(Select ID from SysObjects Where Name = 'Fields')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Fields_FieldTypeID ON dbo.Fields
	(
	FieldTypeID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Fields_ReferenceTableID')And(ID =(Select ID from SysObjects Where Name = 'Fields')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Fields_ReferenceTableID ON dbo.Fields
	(
	ReferenceTableID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_FollowUp_StartFollowUpID')And(ID =(Select ID from SysObjects Where Name = 'FollowUp')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_FollowUp_StartFollowUpID ON dbo.FollowUp
	(
	StartFollowUpID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_FollowUp_FollowUPTypeID')And(ID =(Select ID from SysObjects Where Name = 'FollowUp')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_FollowUp_FollowUPTypeID ON dbo.FollowUp
	(
	FollowUPTypeID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_FollowUp_DoneStatusID')And(ID =(Select ID from SysObjects Where Name = 'FollowUp')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_FollowUp_DoneStatusID ON dbo.FollowUp
	(
	DoneStatusID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_FollowUp_UserID')And(ID =(Select ID from SysObjects Where Name = 'FollowUp')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_FollowUp_UserID ON dbo.FollowUp
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_FollowUp_Letterid')And(ID =(Select ID from SysObjects Where Name = 'FollowUp')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_FollowUp_Letterid ON dbo.FollowUp
	(
	Letterid
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_FromOrganizations_Title')And(ID =(Select ID from SysObjects Where Name = 'FromOrganizations')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_FromOrganizations_Title ON dbo.FromOrganizations
	(
	Title
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_FromOrganizations_ParentID')And(ID =(Select ID from SysObjects Where Name = 'FromOrganizations')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_FromOrganizations_ParentID ON dbo.FromOrganizations
	(
	ParentID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_FromOrganizations')And(ID =(Select ID from SysObjects Where Name = 'FromOrganizations')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_FromOrganizations ON dbo.FromOrganizations
	(
	Code
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ImageData_TableName')And(ID =(Select ID from SysObjects Where Name = 'ImageData')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ImageData_TableName ON dbo.ImageData
	(
	TableName
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ImageData_TableID')And(ID =(Select ID from SysObjects Where Name = 'ImageData')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ImageData_TableID ON dbo.ImageData
	(
	TableID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_IndicatorID')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_IndicatorID ON dbo.Letter
	(
	IndicatorID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_Letter_Type')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_Letter_Type ON dbo.Letter
	(
	Letter_Type
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_letterformat')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_letterformat ON dbo.Letter
	(
	letterformat
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_IncommingNO')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_IncommingNO ON dbo.Letter
	(
	IncommingNO
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_FromOrgID')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_FromOrgID ON dbo.Letter
	(
	FromOrgID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_ToOrgID')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_ToOrgID ON dbo.Letter
	(
	ToOrgID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_Signerid')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_Signerid ON dbo.Letter
	(
	Signerid
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_ClassificationID')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_ClassificationID ON dbo.Letter
	(
	ClassificationID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_UrgencyID')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_UrgencyID ON dbo.Letter
	(
	UrgencyID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_UserID')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_UserID ON dbo.Letter
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_MYear')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_MYear ON dbo.Letter
	(
	MYear
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_RegistrationDate')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_RegistrationDate ON dbo.Letter
	(
	RegistrationDate
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Letter_SecretariatID')And(ID =(Select ID from SysObjects Where Name = 'Letter')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Letter_SecretariatID ON dbo.Letter
	(
	SecretariatID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_LetterArchiveFolder_ArchiveFolderID')And(ID =(Select ID from SysObjects Where Name = 'LetterArchiveFolder')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_LetterArchiveFolder_ArchiveFolderID ON dbo.LetterArchiveFolder
	(
	ArchiveFolderID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_LetterArchiveFolder_LetterID')And(ID =(Select ID from SysObjects Where Name = 'LetterArchiveFolder')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_LetterArchiveFolder_LetterID ON dbo.LetterArchiveFolder
	(
	LetterID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_LetterArchiveFolder_UserID')And(ID =(Select ID from SysObjects Where Name = 'LetterArchiveFolder')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_LetterArchiveFolder_UserID ON dbo.LetterArchiveFolder
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_LetterData_LetterID')And(ID =(Select ID from SysObjects Where Name = 'LetterData')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_LetterData_LetterID ON dbo.LetterData
	(
	LetterID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_LetterData_extention')And(ID =(Select ID from SysObjects Where Name = 'LetterData')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_LetterData_extention ON dbo.LetterData
	(
	extention
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_LetterFieldValue_LetterID')And(ID =(Select ID from SysObjects Where Name = 'LetterFieldValue')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_LetterFieldValue_LetterID ON dbo.LetterFieldValue
	(
	LetterID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_LetterFieldValue_FieldID')And(ID =(Select ID from SysObjects Where Name = 'LetterFieldValue')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_LetterFieldValue_FieldID ON dbo.LetterFieldValue
	(
	FieldID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_LetterFieldValue_InsertUserID')And(ID =(Select ID from SysObjects Where Name = 'LetterFieldValue')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_LetterFieldValue_InsertUserID ON dbo.LetterFieldValue
	(
	InsertUserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_LetterTemplate_Title')And(ID =(Select ID from SysObjects Where Name = 'LetterTemplate')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_LetterTemplate_Title ON dbo.LetterTemplate
	(
	Title
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_LetterText_LetterID')And(ID =(Select ID from SysObjects Where Name = 'LetterText')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_LetterText_LetterID ON dbo.LetterText
	(
	LetterID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_LetterText_LetterFormat')And(ID =(Select ID from SysObjects Where Name = 'LetterText')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_LetterText_LetterFormat ON dbo.LetterText
	(
	LetterFormat
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ListItems_ListID')And(ID =(Select ID from SysObjects Where Name = 'ListItems')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ListItems_ListID ON dbo.ListItems
	(
	ListID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_News_Code')And(ID =(Select ID from SysObjects Where Name = 'News')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_News_Code ON dbo.News
	(
	Code
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_News_Title')And(ID =(Select ID from SysObjects Where Name = 'News')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_News_Title ON dbo.News
	(
	Title
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_News_UserID')And(ID =(Select ID from SysObjects Where Name = 'News')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_News_UserID ON dbo.News
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_NewsGroup_Title')And(ID =(Select ID from SysObjects Where Name = 'NewsGroup')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_NewsGroup_Title ON dbo.NewsGroup
	(
	Title
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_NewsGroup_UsersID')And(ID =(Select ID from SysObjects Where Name = 'NewsGroup')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_NewsGroup_UsersID ON dbo.NewsGroup
	(
	UsersID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_NewsGroupUsers_UsersID')And(ID =(Select ID from SysObjects Where Name = 'NewsGroupUsers')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_NewsGroupUsers_UsersID ON dbo.NewsGroupUsers
	(
	UsersID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_NewsGroupUsers_NewsGroupID')And(ID =(Select ID from SysObjects Where Name = 'NewsGroupUsers')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_NewsGroupUsers_NewsGroupID ON dbo.NewsGroupUsers
	(
	NewsGroupID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_NewsUsers_NewsID')And(ID =(Select ID from SysObjects Where Name = 'NewsUsers')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_NewsUsers_NewsID ON dbo.NewsUsers
	(
	NewsID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_NewsUsers_UsersID')And(ID =(Select ID from SysObjects Where Name = 'NewsUsers')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_NewsUsers_UsersID ON dbo.NewsUsers
	(
	UsersID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ParaphTemplate_UserID')And(ID =(Select ID from SysObjects Where Name = 'ParaphTemplate')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ParaphTemplate_UserID ON dbo.ParaphTemplate
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ParaphTemplate_OrderID')And(ID =(Select ID from SysObjects Where Name = 'ParaphTemplate')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ParaphTemplate_OrderID ON dbo.ParaphTemplate
	(
	OrderID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ParaphTemplate_Title')And(ID =(Select ID from SysObjects Where Name = 'ParaphTemplate')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ParaphTemplate_Title ON dbo.ParaphTemplate
	(
	Title
	) ON [PRIMARY]
GO


if not Exists(Select * from Sysindexes Where(Name = 'IX_Phone_Title')And(ID =(Select ID from SysObjects Where Name = 'Phone')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Phone_Title ON dbo.Phone
	(
	Title
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Phone_PersonName')And(ID =(Select ID from SysObjects Where Name = 'Phone')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Phone_PersonName ON dbo.Phone
	(
	PersonName
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Phone_Tel1')And(ID =(Select ID from SysObjects Where Name = 'Phone')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Phone_Tel1 ON dbo.Phone
	(
	Tel1
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Phone_Tel2')And(ID =(Select ID from SysObjects Where Name = 'Phone')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Phone_Tel2 ON dbo.Phone
	(
	Tel2
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Phone_Mobile')And(ID =(Select ID from SysObjects Where Name = 'Phone')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Phone_Mobile ON dbo.Phone
	(
	Mobile
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Phone_UsersID')And(ID =(Select ID from SysObjects Where Name = 'Phone')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Phone_UsersID ON dbo.Phone
	(
	UsersID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Phone_Email')And(ID =(Select ID from SysObjects Where Name = 'Phone')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Phone_Email ON dbo.Phone
	(
	Email
	) ON [PRIMARY]
GO



if not Exists(Select * from Sysindexes Where(Name = 'IX_PhoneGroup_Title')And(ID =(Select ID from SysObjects Where Name = 'PhoneGroup')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_PhoneGroup_Title ON dbo.PhoneGroup
	(
	Title
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_PhoneGroup_UsersID')And(ID =(Select ID from SysObjects Where Name = 'PhoneGroup')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_PhoneGroup_UsersID ON dbo.PhoneGroup
	(
	UsersID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'PK_Receipt_ReceiptID')And(ID =(Select ID from SysObjects Where Name = 'Receipt')) )  --Ranjbar
ALTER TABLE dbo.Receipt WITH NOCHECK ADD CONSTRAINT  
	PK_Receipt_ReceiptID PRIMARY KEY CLUSTERED 
	(
	ReceiptID
	) ON [PRIMARY]

GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Receipt_Title')And(ID =(Select ID from SysObjects Where Name = 'Receipt')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Receipt_Title ON dbo.Receipt
	(
	Title
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ReceiveTypes_Title')And(ID =(Select ID from SysObjects Where Name = 'ReceiveTypes')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ReceiveTypes_Title ON dbo.ReceiveTypes
	(
	Title
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'PK_RecommiteData_RecommiteDataID')And(ID =(Select ID from SysObjects Where Name = 'RecommiteData')) )  --Ranjbar
ALTER TABLE dbo.RecommiteData WITH NOCHECK ADD CONSTRAINT  
	PK_RecommiteData_RecommiteDataID PRIMARY KEY CLUSTERED 
	(
	RecommiteDataID
	) ON [PRIMARY]

GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_RecommiteData_RecommiteID')And(ID =(Select ID from SysObjects Where Name = 'RecommiteData')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_RecommiteData_RecommiteID ON dbo.RecommiteData
	(
	RecommiteID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_RecommiteData_extention')And(ID =(Select ID from SysObjects Where Name = 'RecommiteData')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_RecommiteData_extention ON dbo.RecommiteData
	(
	extention
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ReCommites_LetterID')And(ID =(Select ID from SysObjects Where Name = 'ReCommites')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ReCommites_LetterID ON dbo.ReCommites
	(
	LetterID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ReCommites_ID')And(ID =(Select ID from SysObjects Where Name = 'ReCommites')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ReCommites_ID ON dbo.ReCommites
	(
	ID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ReCommites_ParentId')And(ID =(Select ID from SysObjects Where Name = 'ReCommites')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ReCommites_ParentId ON dbo.ReCommites
	(
	ParentId
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ReCommites_OrgID')And(ID =(Select ID from SysObjects Where Name = 'ReCommites')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ReCommites_OrgID ON dbo.ReCommites
	(
	OrgID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ReCommites_UserID')And(ID =(Select ID from SysObjects Where Name = 'ReCommites')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ReCommites_UserID ON dbo.ReCommites
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ReCommites_DeadLineDate')And(ID =(Select ID from SysObjects Where Name = 'ReCommites')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ReCommites_DeadLineDate ON dbo.ReCommites
	(
	DeadLineDate
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ReCommites_ActionTypeID')And(ID =(Select ID from SysObjects Where Name = 'ReCommites')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ReCommites_ActionTypeID ON dbo.ReCommites
	(
	ActionTypeID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ReferenceTableData_TableID')And(ID =(Select ID from SysObjects Where Name = 'ReferenceTableData')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ReferenceTableData_TableID ON dbo.ReferenceTableData
	(
	TableID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_ReferenceTableData_DataID')And(ID =(Select ID from SysObjects Where Name = 'ReferenceTableData')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_ReferenceTableData_DataID ON dbo.ReferenceTableData
	(
	DataID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_RelatedSecretariats_DestinationSecID')And(ID =(Select ID from SysObjects Where Name = 'RelatedSecretariats')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_RelatedSecretariats_DestinationSecID ON dbo.RelatedSecretariats
	(
	DestinationSecID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_RelatedSecretariats_DestinationOrgID_inSource')And(ID =(Select ID from SysObjects Where Name = 'RelatedSecretariats')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_RelatedSecretariats_DestinationOrgID_inSource ON dbo.RelatedSecretariats
	(
	DestinationOrgID_inSource
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Secretariats_ArchiveCenterID')And(ID =(Select ID from SysObjects Where Name = 'Secretariats')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Secretariats_ArchiveCenterID ON dbo.Secretariats
	(
	ArchiveCenterID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Secretariats_Precode')And(ID =(Select ID from SysObjects Where Name = 'Secretariats')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Secretariats_Precode ON dbo.Secretariats
	(
	Precode
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Tables_TableType')And(ID =(Select ID from SysObjects Where Name = 'Tables')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Tables_TableType ON dbo.Tables
	(
	TableType
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'PK_UserAccArchive')And(ID =(Select ID from SysObjects Where Name = 'UserAccArchive')) )  --Ranjbar
ALTER TABLE dbo.UserAccArchive WITH NOCHECK ADD CONSTRAINT  
	PK_UserAccArchive PRIMARY KEY CLUSTERED 
	(
	UserAccArchiveID
	) ON [PRIMARY]

GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserAccArchive_SecID')And(ID =(Select ID from SysObjects Where Name = 'UserAccArchive')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserAccArchive_SecID ON dbo.UserAccArchive
	(
	SecID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserAccArchive_UserID')And(ID =(Select ID from SysObjects Where Name = 'UserAccArchive')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserAccArchive_UserID ON dbo.UserAccArchive
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserAccArchive_ArchiveCenterID')And(ID =(Select ID from SysObjects Where Name = 'UserAccArchive')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserAccArchive_ArchiveCenterID ON dbo.UserAccArchive
	(
	ArchiveCenterID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserAccArchive_ArchiveFolderID')And(ID =(Select ID from SysObjects Where Name = 'UserAccArchive')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserAccArchive_ArchiveFolderID ON dbo.UserAccArchive
	(
	ArchiveFolderID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserExtention_UserId')And(ID =(Select ID from SysObjects Where Name = 'UserExtention')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserExtention_UserId ON dbo.UserExtention
	(
	UserId
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserExtention_ExtentionID')And(ID =(Select ID from SysObjects Where Name = 'UserExtention')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserExtention_ExtentionID ON dbo.UserExtention
	(
	ExtentionID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserLog_UserID')And(ID =(Select ID from SysObjects Where Name = 'UserLog')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserLog_UserID ON dbo.UserLog
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserLog_FormID')And(ID =(Select ID from SysObjects Where Name = 'UserLog')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserLog_FormID ON dbo.UserLog
	(
	FormID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserLog_ActionID')And(ID =(Select ID from SysObjects Where Name = 'UserLog')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserLog_ActionID ON dbo.UserLog
	(
	ActionID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserLog_LetterID')And(ID =(Select ID from SysObjects Where Name = 'UserLog')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserLog_LetterID ON dbo.UserLog
	(
	LetterID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserLog_User_Act_Form')And(ID =(Select ID from SysObjects Where Name = 'UserLog')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserLog_User_Act_Form ON dbo.UserLog
	(
	UserID,
	ActionID,
	FormID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserLog_User_Act_Form_Letter')And(ID =(Select ID from SysObjects Where Name = 'UserLog')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserLog_User_Act_Form_Letter ON dbo.UserLog
	(
	UserID,
	ActionID,
	FormID,
	LetterID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserLoginLogout_UserID')And(ID =(Select ID from SysObjects Where Name = 'UserLoginLogout')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserLoginLogout_UserID ON dbo.UserLoginLogout
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserNote_UserID')And(ID =(Select ID from SysObjects Where Name = 'UserNote')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserNote_UserID ON dbo.UserNote
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Users_FromOrgID')And(ID =(Select ID from SysObjects Where Name = 'Users')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Users_FromOrgID ON dbo.Users
	(
	FromOrgID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Users_AccessID')And(ID =(Select ID from SysObjects Where Name = 'Users')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Users_AccessID ON dbo.Users
	(
	AccessID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Users_DefualtSecretariatID')And(ID =(Select ID from SysObjects Where Name = 'Users')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Users_DefualtSecretariatID ON dbo.Users
	(
	DefualtSecretariatID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_Users_SecondOrgID')And(ID =(Select ID from SysObjects Where Name = 'Users')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_Users_SecondOrgID ON dbo.Users
	(
	SecondOrgID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserTemplateGroup_TemplateGroupID')And(ID =(Select ID from SysObjects Where Name = 'UserTemplateGroup')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserTemplateGroup_TemplateGroupID ON dbo.UserTemplateGroup
	(
	TemplateGroupID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_UserTemplateGroup_UserID')And(ID =(Select ID from SysObjects Where Name = 'UserTemplateGroup')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_UserTemplateGroup_UserID ON dbo.UserTemplateGroup
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_WorkGroup')And(ID =(Select ID from SysObjects Where Name = 'WorkGroup')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_WorkGroup ON dbo.WorkGroup
	(
	UserID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'PK_WorkGroupOrg')And(ID =(Select ID from SysObjects Where Name = 'WorkGroupOrg')) )  --Ranjbar
ALTER TABLE dbo.WorkGroupOrg WITH NOCHECK ADD CONSTRAINT  
	PK_WorkGroupOrg PRIMARY KEY CLUSTERED 
	(
	WorkGroupOrgID
	) ON [PRIMARY]

GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_WorkGroupOrg_FromOrgID')And(ID =(Select ID from SysObjects Where Name = 'WorkGroupOrg')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_WorkGroupOrg_FromOrgID ON dbo.WorkGroupOrg
	(
	FromOrgID
	) ON [PRIMARY]
GO

if not Exists(Select * from Sysindexes Where(Name = 'IX_WorkGroupOrg_WorkGroupID')And(ID =(Select ID from SysObjects Where Name = 'WorkGroupOrg')) )  --Ranjbar
CREATE NONCLUSTERED INDEX IX_WorkGroupOrg_WorkGroupID ON dbo.WorkGroupOrg
	(
	WorkGroupID
	) ON [PRIMARY]
GO

COMMIT
GO



----------------------------------------------------------------------------------------------------------------------------------------------------------------
[Num]=4
-----------

/*Ranjbar 88.03.09*/

/*»⁄œ «“ «”ﬂ—ÌÅ  «Ì‰œﬂ” œ” Ê—«  “Ì— «Ã—« ‘Ê‰œ
»€Ì— «“ ﬂ·ÌœÂ«Ì Œ«—ÃÌ “Ì—  „«„Ì ﬂ·ÌœÂ«Ì Œ«—ÃÌ ﬁœÌ„Ì  Ê”ÿ œ” Ê—«  “Ì— Õ–› „Ì ‘Ê‰œ*/

declare @sql varchar(8000)
set @sql=''
select @sql=@sql+'
alter table '+o1.name+' drop constraint '+o.name
FROM Sysforeignkeys f ,      Sysobjects o1 ,sysobjects o
where fkeyid = o1.id and constid=o.id
and o.name not in ('FK_ReCommites_FromOrganizations',
'FK_ReCommites_Users','FK_ReCommites_ActionType',
'FK_Users_FromOrganizations','FK_Letter_Subject','FK_Users_FromOrganizations1',
'FK_Letter_SendStatus','FK_Letter_FromOrganizations','FK_Letter_Secretariats',
'FK_ArchiveFolder_Users','FK_Letter_LetterTypes','FK_Emails_Users',
'FK_Letter_Classifications','FK_Letter_FromOrganizations1',
'FK_FieldAccess_Fields','FK_Letter_Urgenceis','FK_FieldAccess_Users',
'FK_Letter_ReceiveTypes','FK_FieldAccess_AccessType','FK_Letter_Users',
'FK_Letter_ActionType','FK_LetterRelation_Letter','FK_LetterRelation_Letter1',
'FK_FollowUp_Letter','FK_ReCommites_Letter','FK_LetterData_Letter',
'FK_LetterArchiveFolder_Letter','FK_LetterFieldValue_Letter','FK_Fields_Tables',
'FK_Fields_FieldType','FK_FollowUp_FollowUpType','FK_FollowUp_Users',
'FK_FollowUp_DoneStatus','FK_LetterArchiveFolder_ArchiveFolder','FK_LetterArchiveFolder_Users',
'FK_News_Urgenceis','FK_LetterFieldValue_Fields','FK_News_Users',
'FK_LetterFieldValue_Users','FK_NewsGroup_Users','FK_NewsGroupUsers_Users',
'FK_NewsGroupUsers_NewsGroup','FK_LetterTemplate_TemplateGroup','FK_NewsUsers_News',
'FK_LetterText_LetterFormats','FK_NewsUsers_Users','FK_ParaphTemplate_Users',
'FK_PhoneGroup_Users','FK_Phone_PhoneGroup','FK_Phone_Users',
'FK_RecommiteData_ReCommites','FK_ReferenceTableData_Tables','FK_Secretariats_ArchiveCenter',
'FK_UserAccArchive_Users','FK_UserAccArchive_ArchiveCenter','FK_UserAccArchive_ArchiveFolder',
'FK_UserAccArchive_Secretariats','FK_UserExtention_Extention','FK_UserExtention_Users',
'FK_UserLog_Users','FK_UserLog_Letter','FK_UserLoginLogout_Users',
'FK_UserTemplateGroup_TemplateGroup','FK_UserShortCut_Users',
'FK_UserNote_Users','FK_UserSecretariats_Secretariats','FK_UserSecretariats_Users',
'FK_FromOrganizations_FromOrganizations','FK_UserTemplateGroup_Users','FK_Letter_LetterFormats','FK_Letter_Letter',
'FK_RelatedSecretariats_Secretariats','FK_UserMessage_Users',
'FK_UserMessage_Users1','FK_WorkGroup_Users','FK_WorkGroupOrg_WorkGroup','FK_WorkGroupOrg_FromOrganizations')

if @sql <> '' 
   Exec(@sql)

-----------------------------------------------------
                                                                                                                                                                                                                                                                 
-- Ranjbar  «”ﬂ—ÌÅ  ﬂ·ÌœÂ«Ì Œ«—ÃÌ

/*
-- ”«Œ  «”ﬂ—ÌÅ  ﬂ·ÌœÂ«Ì Œ«—ÃÌ 
Select '
if not exists (select * from sysobjects where name='''+o.name+''')
ALTER TABLE '+ o1.name + 
' WITH NOCHECK ADD CONSTRAINT   ['+o.name+'] FOREIGN KEY ( ['+c1.name+'] ) REFERENCES [dbo].['+o2.name+'] ( ['+c2.name+'] )
--GO
'
--SELECT o1.name , c1.name , o2.name , c2.name,o.name
FROM Sysforeignkeys f , 
     Sysobjects o1 , 
     Sysobjects o2 , 
     Syscolumns c1 , 
     Syscolumns c2,
     Sysobjects o
Where fkeyid  = o1.id 
  And rkeyid  = o2.id 
  And o1.id   = c1.id 
  And o2.id   = c2.id
  And fkey    = c1.colid 
  And rkey    = c2.colid
  And constid = o.id
*/

if not exists (select * from sysobjects where name='FK_ReCommites_FromOrganizations')
ALTER TABLE ReCommites WITH NOCHECK ADD CONSTRAINT   [FK_ReCommites_FromOrganizations] FOREIGN KEY ( [OrgID] ) REFERENCES [dbo].[FromOrganizations] ( [ID] )
GO

if not exists (select * from sysobjects where name='FK_ReCommites_Users')
ALTER TABLE ReCommites WITH NOCHECK ADD CONSTRAINT   [FK_ReCommites_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_UserAccArchive_ArchiveCenter')
ALTER TABLE UserAccArchive WITH NOCHECK ADD CONSTRAINT   [FK_UserAccArchive_ArchiveCenter] FOREIGN KEY ( [ArchiveCenterID] ) REFERENCES [dbo].[ArchiveCenter] ( [ArchiveCenterID] )
GO

if not exists (select * from sysobjects where name='FK_LetterData_Letter')
ALTER TABLE LetterData WITH NOCHECK ADD CONSTRAINT   [FK_LetterData_Letter] FOREIGN KEY ( [LetterID] ) REFERENCES [dbo].[Letter] ( [LetterID] )
GO

if not exists (select * from sysobjects where name='FK_UserAccArchive_ArchiveFolder')
ALTER TABLE UserAccArchive WITH NOCHECK ADD CONSTRAINT   [FK_UserAccArchive_ArchiveFolder] FOREIGN KEY ( [ArchiveFolderID] ) REFERENCES [dbo].[ArchiveFolder] ( [FolderID] )
GO

if not exists (select * from sysobjects where name='FK_LetterArchiveFolder_Letter')
ALTER TABLE LetterArchiveFolder WITH NOCHECK ADD CONSTRAINT   [FK_LetterArchiveFolder_Letter] FOREIGN KEY ( [LetterID] ) REFERENCES [dbo].[Letter] ( [LetterID] )
GO

if not exists (select * from sysobjects where name='FK_UserAccArchive_Secretariats')
ALTER TABLE UserAccArchive WITH NOCHECK ADD CONSTRAINT   [FK_UserAccArchive_Secretariats] FOREIGN KEY ( [SecID] ) REFERENCES [dbo].[Secretariats] ( [SecID] )
GO

if not exists (select * from sysobjects where name='FK_LetterFieldValue_Letter')
ALTER TABLE LetterFieldValue WITH NOCHECK ADD CONSTRAINT   [FK_LetterFieldValue_Letter] FOREIGN KEY ( [LetterID] ) REFERENCES [dbo].[Letter] ( [LetterID] )
GO

if not exists (select * from sysobjects where name='FK_UserExtention_Extention')
ALTER TABLE UserExtention WITH NOCHECK ADD CONSTRAINT   [FK_UserExtention_Extention] FOREIGN KEY ( [ExtentionID] ) REFERENCES [dbo].[Extention] ( [ExtentionID] )
GO

if not exists (select * from sysobjects where name='FK_UserExtention_Users')
ALTER TABLE UserExtention WITH NOCHECK ADD CONSTRAINT   [FK_UserExtention_Users] FOREIGN KEY ( [UserId] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_News_Urgenceis')
ALTER TABLE News WITH NOCHECK ADD CONSTRAINT   [FK_News_Urgenceis] FOREIGN KEY ( [UrgenceisID] ) REFERENCES [dbo].[Urgenceis] ( [ID] )
GO

if not exists (select * from sysobjects where name='FK_News_Users')
ALTER TABLE News WITH NOCHECK ADD CONSTRAINT   [FK_News_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_UserLoginLogout_Users')
ALTER TABLE UserLoginLogout WITH NOCHECK ADD CONSTRAINT   [FK_UserLoginLogout_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_UserTemplateGroup_TemplateGroup')
ALTER TABLE UserTemplateGroup WITH NOCHECK ADD CONSTRAINT   [FK_UserTemplateGroup_TemplateGroup] FOREIGN KEY ( [TemplateGroupID] ) REFERENCES [dbo].[TemplateGroup] ( [TemplateGroupID])
Go
ALTER TABLE dbo.UserTemplateGroup NOCHECK CONSTRAINT FK_UserTemplateGroup_TemplateGroup
GO

if not exists (select * from sysobjects where name='FK_UserShortCut_Users')
ALTER TABLE UserShortCut WITH NOCHECK ADD CONSTRAINT   [FK_UserShortCut_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_UserNote_Users')
ALTER TABLE UserNote WITH NOCHECK ADD CONSTRAINT   [FK_UserNote_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_UserSecretariats_Secretariats')
ALTER TABLE UserSecretariats WITH NOCHECK ADD CONSTRAINT   [FK_UserSecretariats_Secretariats] FOREIGN KEY ( [SecId] ) REFERENCES [dbo].[Secretariats] ( [SecID] )
GO

if not exists (select * from sysobjects where name='FK_UserSecretariats_Users')
ALTER TABLE UserSecretariats WITH NOCHECK ADD CONSTRAINT   [FK_UserSecretariats_Users] FOREIGN KEY ( [UserId] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_FromOrganizations_FromOrganizations')
ALTER TABLE FromOrganizations WITH NOCHECK ADD CONSTRAINT   [FK_FromOrganizations_FromOrganizations] FOREIGN KEY ( [ParentID] ) REFERENCES [dbo].[FromOrganizations] ( [ID] )

if not exists (select * from sysobjects where name='FK_ReCommites_ActionType')
ALTER TABLE ReCommites WITH NOCHECK ADD CONSTRAINT   [FK_ReCommites_ActionType] FOREIGN KEY ( [ActionTypeID] ) REFERENCES [dbo].[ActionType] ( [ActionTypeID] )
GO

if not exists (select * from sysobjects where name='FK_Users_FromOrganizations')
ALTER TABLE Users WITH NOCHECK ADD CONSTRAINT   [FK_Users_FromOrganizations] FOREIGN KEY ( [FromOrgID] ) REFERENCES [dbo].[FromOrganizations] ( [ID] )
GO

if not exists (select * from sysobjects where name='FK_Users_FromOrganizations1')
ALTER TABLE Users WITH NOCHECK ADD CONSTRAINT   [FK_Users_FromOrganizations1] FOREIGN KEY ( [SecondOrgID] ) REFERENCES [dbo].[FromOrganizations] ( [ID] )
GO

if not exists (select * from sysobjects where name='FK_ArchiveFolder_Users')
ALTER TABLE ArchiveFolder WITH NOCHECK ADD CONSTRAINT   [FK_ArchiveFolder_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO
ALTER TABLE dbo.ArchiveFolder NOCHECK CONSTRAINT FK_ArchiveFolder_Users  /*«„ﬂ«‰ ﬁ—«— œ«œ‰ „ﬁœ«— ’›— œ— ¬ÌœÌ*/
GO

if not exists (select * from sysobjects where name='FK_Emails_Users')
ALTER TABLE Emails WITH NOCHECK ADD CONSTRAINT   [FK_Emails_Users] FOREIGN KEY ( [UsersID] ) REFERENCES [dbo].[Users] ( [Id] )
GO



if not exists (select * from sysobjects where name='FK_FieldAccess_Fields')
ALTER TABLE FieldAccess WITH NOCHECK ADD CONSTRAINT   [FK_FieldAccess_Fields] FOREIGN KEY ( [FieldID] ) REFERENCES [dbo].[Fields] ( [ID] )
GO

if not exists (select * from sysobjects where name='FK_FieldAccess_Users')
ALTER TABLE FieldAccess WITH NOCHECK ADD CONSTRAINT   [FK_FieldAccess_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_FieldAccess_AccessType')
ALTER TABLE FieldAccess WITH NOCHECK ADD CONSTRAINT   [FK_FieldAccess_AccessType] FOREIGN KEY ( [AccessTypeID] ) REFERENCES [dbo].[AccessType] ( [AccessTypeID] )
GO

if not exists (select * from sysobjects where name='FK_Fields_Tables')
ALTER TABLE Fields WITH NOCHECK ADD CONSTRAINT   [FK_Fields_Tables] FOREIGN KEY ( [TableID] ) REFERENCES [dbo].[Tables] ( [TableId] )
GO

if not exists (select * from sysobjects where name='FK_Fields_FieldType')
ALTER TABLE Fields WITH NOCHECK ADD CONSTRAINT   [FK_Fields_FieldType] FOREIGN KEY ( [FieldTypeID] ) REFERENCES [dbo].[FieldType] ( [FieldTypeID] )
GO

if not exists (select * from sysobjects where name='FK_FollowUp_FollowUpType')
ALTER TABLE FollowUp WITH NOCHECK ADD CONSTRAINT   [FK_FollowUp_FollowUpType] FOREIGN KEY ( [FollowUPTypeID] ) REFERENCES [dbo].[FollowUpType] ( [FollowUpTypeID] )
GO

if not exists (select * from sysobjects where name='FK_FollowUp_Users')
ALTER TABLE FollowUp WITH NOCHECK ADD CONSTRAINT   [FK_FollowUp_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_FollowUp_DoneStatus')
ALTER TABLE FollowUp WITH NOCHECK ADD CONSTRAINT   [FK_FollowUp_DoneStatus] FOREIGN KEY ( [DoneStatusID] ) REFERENCES [dbo].[DoneStatus] ( [DoneStatusID] )
GO

if not exists (select * from sysobjects where name='FK_LetterArchiveFolder_ArchiveFolder')
ALTER TABLE LetterArchiveFolder WITH NOCHECK ADD CONSTRAINT   [FK_LetterArchiveFolder_ArchiveFolder] FOREIGN KEY ( [ArchiveFolderID] ) REFERENCES [dbo].[ArchiveFolder] ( [FolderID])

if not exists (select * from sysobjects where name='FK_LetterArchiveFolder_Users')
ALTER TABLE LetterArchiveFolder WITH NOCHECK ADD CONSTRAINT   [FK_LetterArchiveFolder_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_LetterFieldValue_Fields')
ALTER TABLE LetterFieldValue WITH NOCHECK ADD CONSTRAINT   [FK_LetterFieldValue_Fields] FOREIGN KEY ( [FieldID] ) REFERENCES [dbo].[Fields] ( [ID] )
GO

if not exists (select * from sysobjects where name='FK_Letter_Subject')
ALTER TABLE Letter WITH NOCHECK ADD CONSTRAINT   [FK_Letter_Subject] FOREIGN KEY ( [SubjectID] ) REFERENCES [dbo].[Subject] ( [SubjectID] )
GO

if not exists (select * from sysobjects where name='FK_LetterFieldValue_Users')
ALTER TABLE LetterFieldValue WITH NOCHECK ADD CONSTRAINT   [FK_LetterFieldValue_Users] FOREIGN KEY ( [InsertUserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_Letter_SendStatus')
ALTER TABLE Letter WITH NOCHECK ADD CONSTRAINT   [FK_Letter_SendStatus] FOREIGN KEY ( [SendStatusID] ) REFERENCES [dbo].[SendStatus] ( [SendStatusID] )
GO

if not exists (select * from sysobjects where name='FK_NewsGroup_Users')
ALTER TABLE NewsGroup WITH NOCHECK ADD CONSTRAINT   [FK_NewsGroup_Users] FOREIGN KEY ( [UsersID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_Letter_FromOrganizations')
ALTER TABLE Letter WITH NOCHECK ADD CONSTRAINT   [FK_Letter_FromOrganizations] FOREIGN KEY ( [FromOrgID] ) REFERENCES [dbo].[FromOrganizations] ( [ID] )
GO

if not exists (select * from sysobjects where name='FK_NewsGroupUsers_Users')
ALTER TABLE NewsGroupUsers WITH NOCHECK ADD CONSTRAINT   [FK_NewsGroupUsers_Users] FOREIGN KEY ( [UsersID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_Letter_Secretariats')
ALTER TABLE Letter WITH NOCHECK ADD CONSTRAINT   [FK_Letter_Secretariats] FOREIGN KEY ( [SecretariatID] ) REFERENCES [dbo].[Secretariats] ( [SecID] )
GO

if not exists (select * from sysobjects where name='FK_NewsGroupUsers_NewsGroup')
ALTER TABLE NewsGroupUsers WITH NOCHECK ADD CONSTRAINT   [FK_NewsGroupUsers_NewsGroup] FOREIGN KEY ( [NewsGroupID] ) REFERENCES [dbo].[NewsGroup] ( [NewsGroupID] )
GO

if not exists (select * from sysobjects where name='FK_LetterTemplate_TemplateGroup')
ALTER TABLE LetterTemplate WITH NOCHECK ADD CONSTRAINT   [FK_LetterTemplate_TemplateGroup] FOREIGN KEY ( [TemplateGroupID] ) REFERENCES [dbo].[TemplateGroup] ( [TemplateGroupID] )
GO

if not exists (select * from sysobjects where name='FK_Letter_LetterTypes')
ALTER TABLE Letter WITH NOCHECK ADD CONSTRAINT   [FK_Letter_LetterTypes] FOREIGN KEY ( [Letter_Type] ) REFERENCES [dbo].[LetterTypes] ( [ID] )
GO

if not exists (select * from sysobjects where name='FK_LetterText_LetterFormats')
ALTER TABLE LetterText WITH NOCHECK ADD CONSTRAINT   [FK_LetterText_LetterFormats] FOREIGN KEY ( [LetterFormat] ) REFERENCES [dbo].[LetterFormats] ( [Code] )
GO

if not exists (select * from sysobjects where name='FK_Letter_Classifications')
ALTER TABLE Letter WITH NOCHECK ADD CONSTRAINT   [FK_Letter_Classifications] FOREIGN KEY ( [ClassificationID] ) REFERENCES [dbo].[Classifications] ( [ID] )
GO

if not exists (select * from sysobjects where name='FK_NewsUsers_Users')
ALTER TABLE NewsUsers WITH NOCHECK ADD CONSTRAINT   [FK_NewsUsers_Users] FOREIGN KEY ( [UsersID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_Letter_FromOrganizations1')
ALTER TABLE Letter WITH NOCHECK ADD CONSTRAINT   [FK_Letter_FromOrganizations1] FOREIGN KEY ( [ToOrgID] ) REFERENCES [dbo].[FromOrganizations] ( [ID] )
GO
ALTER TABLE dbo.Letter NOCHECK CONSTRAINT FK_Letter_FromOrganizations1  /*«„ﬂ«‰ ﬁ—«— œ«œ‰ „ﬁœ«— ’›— œ— ¬ÌœÌ*/
GO


if not exists (select * from sysobjects where name='FK_ParaphTemplate_Users')
ALTER TABLE ParaphTemplate WITH NOCHECK ADD CONSTRAINT   [FK_ParaphTemplate_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_Letter_Urgenceis')
ALTER TABLE Letter WITH NOCHECK ADD CONSTRAINT   [FK_Letter_Urgenceis] FOREIGN KEY ( [UrgencyID] ) REFERENCES [dbo].[Urgenceis] ( [ID] )
GO

if not exists (select * from sysobjects where name='FK_PhoneGroup_Users')
ALTER TABLE PhoneGroup WITH NOCHECK ADD CONSTRAINT   [FK_PhoneGroup_Users] FOREIGN KEY ( [UsersID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_Letter_ReceiveTypes')
ALTER TABLE Letter WITH NOCHECK ADD CONSTRAINT   [FK_Letter_ReceiveTypes] FOREIGN KEY ( [ReceiveTypeID] ) REFERENCES [dbo].[ReceiveTypes] ( [ID] )
GO

if not exists (select * from sysobjects where name='FK_Phone_PhoneGroup')
ALTER TABLE Phone WITH NOCHECK ADD CONSTRAINT   [FK_Phone_PhoneGroup] FOREIGN KEY ( [PhoneGroupID] ) REFERENCES [dbo].[PhoneGroup] ( [PhoneGroupID] )
GO

if not exists (select * from sysobjects where name='FK_Letter_Users')
ALTER TABLE Letter WITH NOCHECK ADD CONSTRAINT   [FK_Letter_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_Phone_Users')
ALTER TABLE Phone WITH NOCHECK ADD CONSTRAINT   [FK_Phone_Users] FOREIGN KEY ( [UsersID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_Letter_ActionType')
ALTER TABLE Letter WITH NOCHECK ADD CONSTRAINT   [FK_Letter_ActionType] FOREIGN KEY ( [ActionTypeID] ) REFERENCES [dbo].[ActionType] ( [ActionTypeID] )
GO

if not exists (select * from sysobjects where name='FK_RecommiteData_ReCommites')
ALTER TABLE RecommiteData WITH NOCHECK ADD CONSTRAINT   [FK_RecommiteData_ReCommites] FOREIGN KEY ( [RecommiteID] ) REFERENCES [dbo].[ReCommites] ( [RecommiteID] )
GO

if not exists (select * from sysobjects where name='FK_LetterRelation_Letter')
ALTER TABLE LetterRelation WITH NOCHECK ADD CONSTRAINT   [FK_LetterRelation_Letter] FOREIGN KEY ( [MainLetterID] ) REFERENCES [dbo].[Letter] ( [LetterID] )
GO

if not exists (select * from sysobjects where name='FK_ReferenceTableData_Tables')
ALTER TABLE ReferenceTableData WITH NOCHECK ADD CONSTRAINT   [FK_ReferenceTableData_Tables] FOREIGN KEY ( [TableID] ) REFERENCES [dbo].[Tables] ( [TableId] )
GO

if not exists (select * from sysobjects where name='FK_LetterRelation_Letter1')
ALTER TABLE LetterRelation WITH NOCHECK ADD CONSTRAINT   [FK_LetterRelation_Letter1] FOREIGN KEY ( [MainLetterID] ) REFERENCES [dbo].[Letter] ( [LetterID] )
GO

if not exists (select * from sysobjects where name='FK_Secretariats_ArchiveCenter')
ALTER TABLE Secretariats WITH NOCHECK ADD CONSTRAINT   [FK_Secretariats_ArchiveCenter] FOREIGN KEY ( [ArchiveCenterID] ) REFERENCES [dbo].[ArchiveCenter] ( [ArchiveCenterID] )
GO

if not exists (select * from sysobjects where name='FK_FollowUp_Letter')
ALTER TABLE FollowUp WITH NOCHECK ADD CONSTRAINT   [FK_FollowUp_Letter] FOREIGN KEY ( [Letterid] ) REFERENCES [dbo].[Letter] ( [LetterID] )
GO
ALTER TABLE dbo.FollowUp NOCHECK CONSTRAINT FK_FollowUp_Letter
GO


if not exists (select * from sysobjects where name='FK_UserAccArchive_Users')
ALTER TABLE UserAccArchive WITH NOCHECK ADD CONSTRAINT   [FK_UserAccArchive_Users] FOREIGN KEY ( [UserID] ) REFERENCES [dbo].[Users] ( [Id] )
GO

if not exists (select * from sysobjects where name='FK_ReCommites_Letter')
ALTER TABLE ReCommites WITH NOCHECK ADD CONSTRAINT   [FK_ReCommites_Letter] FOREIGN KEY ( [LetterID] ) REFERENCES [dbo].[Letter] ( [LetterID] )
GO

if not exists (select * from sysobjects where name='FK_Users_UserSign')
ALTER TABLE dbo.Users WITH NOCHECK ADD CONSTRAINT  FK_Users_UserSign FOREIGN KEY (Id ) REFERENCES dbo.UserSign (UserID)
GO
ALTER TABLE dbo.Users NOCHECK CONSTRAINT FK_Users_UserSign
GO

if not exists (select * from sysobjects where name='FK_UserTemplateGroup_Users')
ALTER TABLE dbo.UserTemplateGroup WITH NOCHECK ADD CONSTRAINT FK_UserTemplateGroup_Users FOREIGN KEY(UserID) REFERENCES dbo.Users(Id)
GO

if not exists (select * from sysobjects where name='FK_Letter_LetterFormats')
ALTER TABLE dbo.Letter WITH NOCHECK ADD CONSTRAINT FK_Letter_LetterFormats FOREIGN KEY (letterformat ) REFERENCES dbo.LetterFormats(Code)
GO
if not exists (select * from sysobjects where name='FK_Letter_Letter')
ALTER TABLE dbo.Letter WITH NOCHECK ADD CONSTRAINT FK_Letter_Letter FOREIGN KEY (SentLetterID) REFERENCES dbo.Letter (LetterID)
GO
if not exists (select * from sysobjects where name='FK_RelatedSecretariats_Secretariats')
ALTER TABLE dbo.RelatedSecretariats WITH NOCHECK ADD CONSTRAINT FK_RelatedSecretariats_Secretariats FOREIGN KEY (DestinationSecID) REFERENCES dbo.Secretariats(SecID)
GO
if not exists (select * from sysobjects where name='FK_UserMessage_Users')
ALTER TABLE dbo.UserMessage WITH NOCHECK ADD CONSTRAINT FK_UserMessage_Users FOREIGN KEY (To_) REFERENCES dbo.Users (Id)
GO
if not exists (select * from sysobjects where name='FK_UserMessage_Users1')
ALTER TABLE dbo.UserMessage WITH NOCHECK ADD CONSTRAINT FK_UserMessage_Users1 FOREIGN KEY (From_) REFERENCES dbo.Users(Id)
GO
if not exists (select * from sysobjects where name='FK_WorkGroup_Users')
ALTER TABLE dbo.WorkGroup WITH NOCHECK ADD CONSTRAINT FK_WorkGroup_Users FOREIGN KEY(UserID) REFERENCES dbo.Users(Id)
GO
if not exists (select * from sysobjects where name='FK_WorkGroupOrg_WorkGroup')
ALTER TABLE dbo.WorkGroupOrg WITH NOCHECK ADD CONSTRAINT FK_WorkGroupOrg_WorkGroup FOREIGN KEY(WorkGroupID) REFERENCES dbo.WorkGroup(WorkGroupID)
GO
if not exists (select * from sysobjects where name='FK_WorkGroupOrg_FromOrganizations')
ALTER TABLE dbo.WorkGroupOrg WITH NOCHECK ADD CONSTRAINT FK_WorkGroupOrg_FromOrganizations FOREIGN KEY(FromOrgID) REFERENCES dbo.FromOrganizations(ID)
GO



/*
-- ”«Œ  «”ﬂ—ÌÅ  ﬂ·ÌœÂ«Ì Œ«—ÃÌ 
Select '
if not exists (select * from sysobjects where name='''+o.name+''')
ALTER TABLE '+ o1.name + 
' ADD CONSTRAINT ['+o.name+'] FOREIGN KEY ( ['+c1.name+'] ) REFERENCES [dbo].['+o2.name+'] ( ['+c2.name+'] )
--GO
'
--SELECT o1.name , c1.name , o2.name , c2.name,o.name
FROM Sysforeignkeys f , 
     Sysobjects o1 , 
     Sysobjects o2 , 
     Syscolumns c1 , 
     Syscolumns c2,
     Sysobjects o
Where fkeyid  = o1.id 
  And rkeyid  = o2.id 
  And o1.id   = c1.id 
  And o2.id   = c2.id
  And fkey    = c1.colid 
  And rkey    = c2.colid
  And constid = o.id
*/
------------------------------------------------------------------------------------------------------------------------------------------------------


[Num]=5
-----------

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_Letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_Letter]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE [Delete_Letter]  
@LetterID int,@newInd int  
AS  
declare @letterformat tinyint  
select   @letterformat=letterformat  
from letter  
where letterid=@LetterID  
  
if @letterformat=1   
  UPDATE    Letter  
  SET        LetterFormat = 3 ,memo=memo +'('+cast(indicatorid as varchar(6)), indicatorid=@newind  
 WHERE     (LetterID = @LetterID)  
  
if @letterformat in (2,3)  
begin    
  DELETE [ReCommites]  WHERE     (LetterID = @LetterID)  
  DELETE [LetterText]  WHERE     (LetterID = @LetterID)  
  DELETE [LetterData]  WHERE     (LetterID = @LetterID)  
  DELETE from Letter WHERE     (LetterID = @LetterID)  
end

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

------------------------------------------------------------------------------------------------------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_DelayedLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_DelayedLetter]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE [Sp_DelayedLetter]  
@SecretariatID int,@myear tinyint,@DeadLine int, @userID int , @Tag Tinyint  /*Ranjbar*/ 
as  
  
declare  
@sql nvarchar (4000),  
@rw nvarchar(500),  
@Today char(10),  
@deadlineDate char(10),  
@OrgID int,  
@todayToint varchar(10)  
  
select @today=dbo.shamsi(getdate())  
set @todayToint=cast(dbo.ShamsiToInt(@today) as varchar(10))  
  
SELECT     @OrgID=FromOrgID  
FROM         Users  
WHERE     Id = @userID  
  
set @RW='WHERE (Rc.deadlinedate is not null or ChildRecommite.Deadlinedate is not null) and ( L.myear='+cast(@myear as varchar(10))+
') AND (Rc.OrgID = '+ cast(@OrgID as varchar(10))+') '  
    
if @SecretariatID>0  
set @rw=@rw+' AND (SecretariatID = '+cast(@SecretariatID as varchar(10))+')'  
else  
set @rw=@rw+' AND (SecretariatID in (SELECT SecId FROM UserSecretariats WHERE UserId = '+cast(@userid as varchar(5))+'))'  
  
/* Ranjbar 88.03.16  
set @rw=@rw+' AND (case when Rc.Proceeded=1 and ChildRecommite.Proceeded=0 then ChildRecommite.DeadLineToint  
     when Rc.Proceeded=0  then RC.DeadLineToint else  '''+@todayToint+''' end-'+@todayToint+' )< '+cast(@DeadLine as varchar(5))  
*/
--ﬂ«— «»·
if @Tag = 1
   set @rw=@rw+' AND (case when Rc.Proceeded=0  then RC.DeadLineToint else  '''+@todayToint+''' end-'+@todayToint+' )< '+cast(@DeadLine as varchar(5)) 
--«—”«·Â«Ì »«Ìê«‰Ì ‰‘œÂ
if @Tag = 2
   set @rw=@rw+' AND (case when Rc.Proceeded=1 and ChildRecommite.Proceeded=0 then ChildRecommite.DeadLineToint  
       else  '''+@todayToint+''' end-'+@todayToint+' )< '+cast(@DeadLine as varchar(5))  
--//---
  
set @sql=' SELECT count( *)  
FROM ReCommites RC  
INNER JOIN Letter L ON RC.LetterID = L.LetterID  
left JOIN ReCommites ChildRecommite ON RC.LetterID = ChildRecommite.LetterID AND  
RC.ID = ChildRecommite.ParentId  AND ChildRecommite.type = RC.type '  
  
set @sql=@sql+@rW  
  
exec sp_executesql  @sql  
  

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO



------------------------------------------------------------------------------------------------------------------------------------------------------
/* Ranjbar 88.03.24   ﬁ”Ì„ ﬂ—œ‰ ›«Ì·Â«Ì œÌ «»Ì”  */
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_AddFileToDB]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_AddFileToDB]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

CREATE Procedure dbo.Sp_AddFileToDB @DBName nVarchar(50) 
As

Declare @MaxFileID int
Declare @FileSizeInMB int
Declare @FileName nVarchar(50)
Declare @NewFileName nVarchar(50)
Declare @NewFilePath nVarchar(500)

Declare @NewFileNu int
Declare @MDFSqlText nVarchar(1000)
Declare @SqlText nVarchar(1000)

Select @MaxFileID = Max(FileID) 
FROM dbo.sysfiles  
WHERE Groupid = (SELECT u.groupid FROM dbo.sysfilegroups u WHERE u.groupname = N'PRIMARY')

Select @FileSizeInMB = ( (size * (8192/1024))/1024 ) , @FileName = Name , @NewFilePath = FileName
from dbo.sysfiles
Where Groupid = (SELECT u.groupid FROM dbo.sysfilegroups u WHERE u.groupname = N'PRIMARY') 
And(FileID = @MaxFileID )

Set @NewFileName = @FileName

Set @NewFilePath = Substring(@NewFilePath,1, Len(RTrim(@NewFilePath))-Len(RTrim(@NewFileName)+'.mdb')  )
if @MaxFileID = 1  --.mdf
   Set @NewFileNu = 2
else
   Set @NewFileNu   = Cast(Substring(@NewFileName,Len(RTrim(@NewFileName))-1 ,Len(RTrim(@NewFileName))) as int)+1

if Len( Cast(@NewFileNu as nvarchar) ) = 1
   Set @NewFileName = @DBName+'_Data_'+ '0' +Cast(@NewFileNu as nvarchar)
else
   Set @NewFileName = @DBName+'_Data_'+ Cast(@NewFileNu as nvarchar)
/*
Select @NewFilePath
Select @MaxFileID
Select @NewFileNu
Select @NewFileName
Select @FileSizeInMB --*/

if @FileSizeInMB > 3800 --MB
begin
   if @MaxFileID = 1  --mdf ﬁ—«— œ«œ‰ „«ﬂ“Ì„„ ÕÃ„ »—«Ì ›«Ì·
   begin
      Set @MDFSqlText = 'Use Master ALTER DATABASE ['+ @DBName +'] MODIFY FILE (NAME = N'''+ RTrim(@FileName) +''', MAXSIZE = '+ Cast(@FileSizeInMB+30 as nvarchar(10)) +') '
      Exec(@MDFSqlText)
      Print @MDFSqlText
   end 

   Set @SqlText = 'use Master '+
   'ALTER DATABASE [' + RTrim(@DBName) + '] 
    ADD FILE( NAME = '''+@NewFileName+''' , FILENAME = ''' + @NewFilePath + @NewFileName + '.NDF'' , 
             SIZE = 1 , MAXSIZE = 4000 , FILEGROWTH = 10% ) '
   Exec(@SqlText)
   Print @SqlText
end


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


------------------------------------------------------------------------------------------------------------------------------------------------------
[Num]=6
-----------

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.LetterData ADD
	ListItemsID int NULL
GO
COMMIT
GO
------------------------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.ListItems ADD
	UsersID int NULL
GO
COMMIT
GO
------------------------------------------------------------------------------------------------------------------------------------------------------



[Num]=7
-----------

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION


if exists (select * from sysobjects where name='FK_UserAccArchive_Users')
ALTER TABLE dbo.UserAccArchive
	DROP CONSTRAINT FK_UserAccArchive_Users
GO
COMMIT
GO
BEGIN TRANSACTION

if not exists (select * from sysobjects where name='FK_UserAccArchive_Users')
ALTER TABLE dbo.UserAccArchive WITH NOCHECK ADD CONSTRAINT
	FK_UserAccArchive_Users FOREIGN KEY
	(
	UserID
	) REFERENCES dbo.Users
	(
	Id
	)
GO
ALTER TABLE dbo.UserAccArchive 
	NOCHECK CONSTRAINT FK_UserAccArchive_Users
GO
COMMIT
GO

------------------------------------------------------------------------------------------------------------------------------------------------------
/*Ranjbar 88.04.16  œ«œ‰ œ” —”Ì »Â  „«„Ì “Ê‰ﬂ‰ Â«Ì ”Ì” „Ì */ 
Delete from UserAccArchive
Declare @UsersID int
Declare @SecID int
Declare @ArchFldID int
Declare @ArchCenID int

Declare Cur_Users CURSOR
For 
Select US.UserID, S.SecID,AC.ArchiveCenterID ,AF.FolderID
From Secretariats S ,ArchiveCenter AC,ArchiveFolder AF,UserSecretariats US
Where(S.SecID = US.Secid)
And(S.ArchiveCenterID = AC.ArchiveCenterID)
And((AF.UserID = AC.ArchiveCenterID*10000)/*or(AF.UserID = 0)*/) --- And(AF.UserID not Between 1 and 9999)
Order by US.UserID
Open Cur_Users
Fetch Next From Cur_Users into @UsersID,@SecID,@ArchCenID,@ArchFldID

While @@FETCH_STATUS = 0
begin
      if not Exists(Select * From UserAccArchive Where(UserID = @UsersID)And(SecID = @SecID)And(ArchiveCenterID = @ArchCenID)And(ArchiveFolderID=@ArchFldID) )
         Insert into UserAccArchive(UserID,SecID,ArchiveCenterID,ArchiveFolderID,IsAccess) 
         Values(@UsersID,@SecID,@ArchCenID,@ArchFldID,1)

   Fetch Next From Cur_Users into @UsersID,@SecID,@ArchCenID,@ArchFldID
end
Close Cur_Users
DealLocate Cur_Users
GO

------------------------------------------------------------------------------------------------------------------------------------------------------
/*Ranjbar 88.04.16 œ— ’Ê—  Ê«—œ ‘œ‰ Ìﬂ “Ê‰ﬂ‰ ”Ì” „Ì ÃœÌœ » Ê«‰ ¬‰ “Ê‰ﬂ‰ —« »Â  „«„Ì ﬂ«—»—«‰ œ” —”Ì œ«œ*/

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Tr_Ins_ArchiveFolder]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[Tr_Ins_ArchiveFolder]
GO

Create Trigger Tr_Ins_ArchiveFolder
on ArchiveFolder
After Insert
As
Declare @ArchFldID int
if Exists(Select FolderID from Inserted Where((UserID > 10000)or(UserID = 0)) ) ---UserID not Between 1 and 9999
   Set @ArchFldID = (Select FolderID from Inserted Where((UserID > 10000)or(UserID = 0)) )
else
   Set @ArchFldID = 0
if @ArchFldID > 0 
begin
   Declare @UsersID int
   Declare @SecID int
   Declare @ArchCenID int

   Select @SecID = SecID, @ArchCenID=AC.ArchiveCenterID from Secretariats Sec , ArchiveCenter AC , ArchiveFolder AF 
   Where(Sec.ArchiveCenterID = AC.ArchiveCenterID)
   And(AC.ArchiveCenterID*10000 = AF.UserID)
   And(AF.FolderID = @ArchFldID) 

   Declare Cur_Users CURSOR
   For 
   Select US.UserID/*, S.SecID,AC.ArchiveCenterID*/ 
   From Secretariats S 
   Inner Join UserSecretariats US On S.SecID = US.Secid
   Open Cur_Users
   Fetch Next From Cur_Users into @UsersID/*,@SecID,@ArchCenID*/
   While @@FETCH_STATUS = 0
   begin
      if not Exists(Select * From UserAccArchive Where(UserID = @UsersID)And(SecID = @SecID)And(ArchiveCenterID = @ArchCenID)And(ArchiveFolderID=@ArchFldID) )
         Insert into UserAccArchive(UserID,SecID,ArchiveCenterID,ArchiveFolderID,IsAccess) 
         Values(@UsersID,@SecID,@ArchCenID,@ArchFldID,1)

      Fetch Next From Cur_Users into @UsersID/*,@SecID,@ArchCenID*/
   end
   Close Cur_Users
   DealLocate Cur_Users
end
GO
------------------------------------------------------------------------------------------------------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_Letter_By_UserMemo]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_Letter_By_UserMemo]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE Procedure Get_Letter_By_UserMemo
@UserMemo nvarchar(255),@Letter_Type tinyint
as
SELECT   Letter.LetterID,letter.Letter_Type, Letter.IndicatorID, Letter.MYear, Secretariats.SecTitle, LetterTypes.Title AS LetterType, Letter.IncommingNO,
                      Letter.Incommingdate, Letter.Memo, Letter.AttachTitle, Letter.RetroactionNo, Letter.UserMemo, Letter.RegistrationDate, Letter.FollowLetterNo, 
                      Letter.SubjectDescription, Subject.SubjectTitle, Classifications.Title AS ClassificationTitle, FromOrganizations_1.Title AS FromTitle, 
                      FromOrganizations.Title AS ToTitle
FROM         Letter INNER JOIN
                      Secretariats ON Letter.SecretariatID = Secretariats.SecID INNER JOIN
                      LetterTypes ON Letter.Letter_Type = LetterTypes.ID INNER JOIN
                      FromOrganizations ON Letter.FromOrgID = FromOrganizations.ID INNER JOIN
                      FromOrganizations FromOrganizations_1 ON Letter.ToOrgID = FromOrganizations_1.ID INNER JOIN
                      Classifications ON Letter.ClassificationID = Classifications.ID LEFT OUTER JOIN
                      Subject ON Letter.SubjectID = Subject.SubjectID
WHERE     (Letter_Type=@Letter_Type or @Letter_Type=0) and (Letter.UserMemo like '%'+@UserMemo+'%')  
/*union 
SELECT   Letter.LetterID,letter.Letter_Type, Letter.IndicatorID, Letter.MYear, Secretariats.SecTitle, LetterTypes.Title AS LetterType, Letter.IncommingNO,
                      Letter.Incommingdate, Letter.Memo, Letter.AttachTitle, Letter.RetroactionNo, Letter.UserMemo, Letter.RegistrationDate, Letter.FollowLetterNo, 
                      Letter.SubjectDescription, Subject.SubjectTitle, Classifications.Title AS ClassificationTitle, FromOrganizations_1.Title AS FromTitle, 
                      FromOrganizations.Title AS ToTitle
FROM         Letter INNER JOIN
                      Secretariats ON Letter.SecretariatID = Secretariats.SecID INNER JOIN
                      LetterTypes ON Letter.Letter_Type = LetterTypes.ID INNER JOIN
                      FromOrganizations ON Letter.FromOrgID = FromOrganizations.ID INNER JOIN
                      FromOrganizations FromOrganizations_1 ON Letter.ToOrgID = FromOrganizations_1.ID INNER JOIN
                      Classifications ON Letter.ClassificationID = Classifications.ID LEFT OUTER JOIN
                      Subject ON Letter.SubjectID = Subject.SubjectID
WHERE     usermemo like '%-%' and 
@usermemo between ltrim(rtrim(substring(UserMemo,1,charindex('-',usermemo)-1))) and  ltrim(rtrim(substring(UserMemo,charindex('-',usermemo)+1,100)))
and (Letter_Type=@Letter_Type or @Letter_Type=0) 
*/
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


------------------------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
if exists (select * from sysobjects where name='FK_Fields_ArchiveFolder')
ALTER TABLE dbo.Fields
	DROP CONSTRAINT FK_Fields_ArchiveFolder
GO
COMMIT
GO
------------------------------------------------------------------------------------------------------------------------------------------------------

[Num]=8
--------------

/*Ranjbar 88.05.03*/ 
/* LetterArchiveFolder.LetterID œ— «Ì‰ ›Ì·œ Â„ ¬ÌœÌ ‰«„Â Ê Â„ ¬ÌœÌ «—Ã«⁄«  ﬁ—«— „ÌêÌ—œ */
--------------------------
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.LetterArchiveFolder
	DROP CONSTRAINT FK_LetterArchiveFolder_Letter
GO
COMMIT
GO
BEGIN TRANSACTION
ALTER TABLE dbo.LetterArchiveFolder WITH NOCHECK ADD CONSTRAINT
	FK_LetterArchiveFolder_Letter FOREIGN KEY
	(
	LetterID
	) REFERENCES dbo.Letter
	(
	LetterID
	)
GO
ALTER TABLE dbo.LetterArchiveFolder
	NOCHECK CONSTRAINT FK_LetterArchiveFolder_Letter
GO
COMMIT
GO


------------------------------------------------------------------------------------------------------------------------------------------------------
/* œ— ç«—  ”«“„«‰Ì Ã«Ì Å—«‰ “ Â« ⁄Ê÷ ‘œÂ */
Update FromOrganizations
Set Title = '('+Substring( RTrim(Title) ,1,Len(RTrim(Title))-1 )
Where (RTrim(LTrim(Title))<>'')
And(Right(Title,1) = ')')
GO
------------------------------------------------------------------------------------------------------------------------------------------------------
/*Letter.ReceiveTypeID ﬁ—«— œ«œ‰ ›Ì·œ */
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insert_ReciveLetter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[insert_ReciveLetter]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE [insert_ReciveLetter]  
 (@letterID integer output,  
  @IndicatorID  int,  
  @MYear  tinyint,  
  @SecretariatID  tinyint,  
  @Letter_Type  tinyint,  
  @letterformat  tinyint,  
  @Memo  nvarchar(500),  
  @UserID  int,  
  @RegistrationDate  char(10),  
  @RegistrationTime  varchar(5),  
  @OrgID int)  
AS  
  
declare @OrgStaff nvarchar(50)  
select @OrgStaff=ResponsibleStaffer  
from dbo.FromOrganizations  
where id=@orgid  
  
INSERT INTO dbo.Letter   
(IndicatorID,  MYear,  SecretariatID,  Letter_Type,  letterformat,  Memo,  UserID,  RegistrationDate,  RegistrationTime,  FromOrgID,ReceiveTypeID/*Ranjbar*/)   
VALUES   
(@IndicatorID,  @MYear,  @SecretariatID,  @Letter_Type,  @letterformat,  @Memo,  @UserID,  @RegistrationDate,  @RegistrationTime,  @OrgID,2)  
  
SET @LetterID=@@Identity  
  
INSERT INTO dbo.ReCommites   (LetterID, ID, Type,  ParentId,  OrgID,  Paraph,  RecommiteDate,  UserID,  IsCopy,  Proceeded,OrgStaff)   
values(@letterid,1,3,0,@orgid,'',@registrationdate,@userid,0,0,@OrgStaff)  

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


------------------------------------------------------------------------------------------------------------------------------------------------------
/*Letter.ReceiveTypeID ﬁ—«— œ«œ‰ ›Ì·œ */
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get_All_Letter]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get_All_Letter]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE Get_All_Letter    
    
@Secretariatid int,    
@myear tinyint,    
@Letter_Type int,    
@LetterFormat int,    
@where nvarchar(2000),    
@top smallint ,    
@archiveFolderID int,    
@ArchiveStatus tinyint -- 0 ,1 and 2(= all)    
as    
declare @sqlCommand nvarchar(4000)    
DECLARE @InnerNo NVARCHAR(500);    
declare @Delimeter char(1)    
set @Delimeter=dbo.GetSystemValue(44)    
set @InnerNo=case  dbo.GetSystemValue(35)    
                   when 0 then ''    
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'    
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'    
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'    
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'    
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'    
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'    
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'    
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+    
    
             case  dbo.GetSystemValue(36)    
                   when 0 then ''    
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'    
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'    
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'    
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'    
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'    
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'    
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'    
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+    
    
             case  dbo.GetSystemValue(37)    
                   when 0 then ''    
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'    
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'    
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'    
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'    
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'    
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'    
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'    
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+    
    
             case  dbo.GetSystemValue(38)    
                   when 0 then ''    
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'    
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'    
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'    
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'    
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'    
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'    
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'    
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+    
    
             case  dbo.GetSystemValue(39)    
                   when 0 then ''    
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'                       when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'    
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'    
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'    
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'    
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'    
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'    
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end+    
    
             case  dbo.GetSystemValue(40)    
                   when 0 then ''    
                   when 1 then 'isnull(Secretariats.Precode,'''')+'''+@Delimeter+'''+'    
                   when 2 then 'cast(Myear as char(2))+'''+@Delimeter+'''+'    
                   when 3 then 'cast(indicatorid as nvarchar(10))+'''+@Delimeter+'''+'    
                   when 4 then 'case when len(sender.Code)>5 then sender.PreCode else sender.Code end +'''+@Delimeter+'''+'    
                   when 5 then 'case when len(Deliver.Code)>5 then Deliver.PreCode else Deliver.Code end +'''+@Delimeter+'''+'    
                   when 6 then 'isnull(LetterTypes.PreCode,'''')+'''+@Delimeter+'''+'    
                   when 7 then 'isnull(UserMemo,'''')+'''+@Delimeter+'''+'    
                   when 8 then 'isnull(Deliver.Precode,'''')+'''+@Delimeter+'''+' end    
    
IF len(@InnerNo)>5    
if substring(@InnerNo,len(@InnerNo)-4,5)='+'''+@Delimeter+'''+'    
   set @InnerNo=substring(@InnerNo,1,len(@InnerNo)-5)    
    
if @innerno<>''    
set @InnerNo='replace(replace(ltrim(rtrim('+@InnerNo+')),'''+@Delimeter+@Delimeter+''','''+@Delimeter+'''),'''+@Delimeter+@Delimeter+''','''+@Delimeter+''')'    
else    
set @innerno='cast(indicatorid as nvarchar(500))'    
    
set @sqlCommand='SELECT top  '+Cast(@top as varchar(5)) +'     Letter.LetterID, Letter.IndicatorID, Letter.MYear, Letter.SecretariatID,    
                      Letter.Letter_Type, Letter.letterformat, Letter.IncommingNO, Letter.FromOrgID,Letter.IncommingDate,    
                      Letter.ToOrgID, Letter.UrgencyID, Letter.Memo, Letter.RetroactionNo, Letter.RegistrationDate, Letter.FollowLetterNo,    
                      Letter.ToStaffer, Letter.SentLetterID, Letter.TemplateID, Letter.UserMemo,Letter.DeadLineDate, sender.Title AS SenderTitle,    
                      Deliver.Title AS DeliverTitle,dbo.has_Page(Letter.letterid) has_Page,    
dbo.has_WordPage(Letter.letterid) has_WordPage,dbo.has_file(letter.letterID) has_file,    
LetterTypes.Title LetterTypeTitle,LetterRecommites,sendstatusTitle,'+@innerno+'  InnerNo,Letter.Archived    
,ActionTypeTitle   
 , Letter.SignerID , (Select Title from FromOrganizations FO Where(FO.ID = Letter.SignerID)) as SignerTitle   
,Letter.ReceiveTypeID  
  
FROM Letter left  JOIN    
     FromOrganizations sender ON Letter.ToOrgID = sender.ID left JOIN    
     FromOrganizations Deliver ON Letter.FromOrgID = Deliver.ID    
     Left join LetterTypes on LetterTypes.ID=Letter.Letter_type    
     inner join sendstatus on sendstatus.sendstatusID=Letter.sendstatusID    
     inner join Secretariats on Secretariats.Secid=Letter.SecretariatID    
     left JOIN ActionType  ON ActionType.ActionTypeID = Letter.LatestActionTypeID'    
    
    
if @archiveFolderID>0    
set @sqlCommand=@sqlCommand+'    
Left join LetterArchiveFolder on LetterArchiveFolder.Letterid=Letter.LetterID '    
    
set @sqlCommand=@sqlCommand+' where letter.Finalized=1 '    
    
    
    
set @where=isnull(ltrim(rtrim(@where)),'')    
if @where <>'' set @where =' and '+@where    
    
if @Letter_Type<>0    
  set @where=@where+' and (Letter_Type = '+Cast(@Letter_Type as varchar(5))+')'    
    
if @Secretariatid<>0    
  set @where=@where+' and (Secretariatid = '+Cast(@Secretariatid as varchar(5))+')'    
    
if @Myear<>0    
  set @where=@where+' and (myear = '+Cast(@myear as varchar(5))+')'    
    
    
    
if @LetterFormat<>0    
  set @where=@where+' and (LetterFormat = '+Cast(@LetterFormat as varchar(5))+')'    
    
if @archiveFolderID>0    
    
  set @where=@where+' and (archiveFolderID = '+Cast(@archiveFolderID as varchar(5))+')'    
    
if @ArchiveStatus=0    
 set @where=@where+' and archived=0'    
    
if @ArchiveStatus=1    
 set @where=@where+' and archived=1'    
    
if @ArchiveStatus=2    
 begin    
   set @where=@where+' and    
       not exists (SELECT  * FROM   LetterArchiveFolder,ArchiveFolder Where    
       LetterArchiveFolder.ArchiveFolderID = ArchiveFolder.FolderID    
       and  (ArchiveFolder.UserID=0 or ArchiveFolder.UserID>=10000)  and Letterid =Letter.LetterID)  and archived=1'    
end    
    
    
set @sqlCommand=@sqlCommand+@where + ' order by indicatorid desc '    
    
exec sp_executesql   @sqlCommand    
    


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


------------------------------------------------------------------------------------------------------------------------------------------------------

[Num]=9
-----------

/*Ranjbar  €ÌÌ—  «»⁄ ‘„”Ì*/

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Shamsi]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[Shamsi]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/*Ravanpoor*/
CREATE FUNCTION dbo.Shamsi(@Date  DateTime)  
RETURNS Varchar(20)
as                 --  EHSAN RAVANPOUR 1386-06-31
begin
SET @Date = CAST(CONVERT(VARCHAR(20),@Date,111) AS DATETIME)
DECLARE @Farsi_Date  as Varchar(20) 
DECLARE @StY Varchar(10), @StM Varchar(10),@StD Varchar(10)
declare @y bigint, @m bigint, @d bigint
declare @d1 bigint, @d4 bigint, @d33 bigint

set @d1=365
set @d4=4*@d1 +1
set @d33=33*@d1 +8
set @d=cast(@Date as bigint)+422506
set @y=(@d/@d33)*33+122
set @d=@d % @d33
if(@d>(7*@d4+@d1))
Begin
   set @y=@y+1
   set @d=@d-@d1
End
set @y=@y+(@d/@d4)*4
set @d=@d % @d4
declare @i bigint
set @i=@d/@d1
set @d=@d%@d1;
if(@i=4)
Begin
   set @i=@i-1
   set @d=@d+@d1
End
set @y=@y+@i
if(@d<186)
Begin
   set @m=(@d/31)+1
   set @d=(@d%31)+1
end
Else
Begin
   set @d=@d-186
   set @m=(@d/30)+7
   set @d=(@d%30)+1
End
 SET @StY = CAST (@y as VarChar(5))
 SET @StM = RIGHT('0'+CAST (@m as VarChar(5)),2)
 SET @StD = RIGHT('0'+CAST (@d as VarChar(5)),2)
 SET @Farsi_Date = @StY+'/'+@StM+'/'+@StD
 Return @Farsi_Date
end

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

------------------------------------------------------------------------------------------------------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HistoryDateList]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[HistoryDateList]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO


CREATE function HistoryDateList(@today char(10),@weekday tinyint)  
  
returns @result table (id int , Title nvarchar(100),beginDate char(10),Enddate char(10))  
begin  
  
declare @year char(4)  
set @year=substring(@today,1,4)  
  
insert into @result values (1, '«„—Ê“',@today,@today)  
insert into @result values (2, 'œÌ—Ê“',dbo.ShamsiIncDate(@today,0,0,-1),dbo.ShamsiIncDate(@today,0,0,-1))  
insert into @result values (3, 'Â› Â «ŒÌ—',dbo.ShamsiIncDate(@today,0,0,-@weekday),@today)  
insert into @result values (4, '„«Â «ŒÌ—',substring(@today,1,8)+'01',@today)  
/*declare @month int,@i int  
set @month=cast(substring(@today,9,2) as int)-1  */
--set @i=1  
  
-- if @i<=@month  
 insert into @result values (5, '›—Ê—œÌ‰',@year+'/01/01',@year+'/01/31')  
-- set @i=@i+1  
    
-- if @i<=@month  
 insert into @result values (6, '«—œÌ»Â‘ ',@year+'/02/01',@year+'/02/31')  
-- set @i=@i+1  
  
-- if @i<=@month  
 insert into @result values (7, 'Œ—œ«œ',@year+'/03/01',@year+'/03/31')  
-- set @i=@i+1  
  
-- if @i<=@month  
 insert into @result values (8, ' Ì—',@year+'/04/01',@year+'/04/31')  
-- set @i=@i+1  
  
-- if @i<=@month  
 insert into @result values (9, '„—œ«œ',@year+'/05/01',@year+'/05/31')  
-- set @i=@i+1  
  
-- if @i<=@month  
 insert into @result values (10, '‘Â—ÌÊ—',@year+'/06/01',@year+'/06/31')  
-- set @i=@i+1  
  
-- if @i<=@month  
 insert into @result values (11, '„Â—',@year+'/07/01',@year+'/07/31')  
-- set @i=@i+1  
  
-- if @i<=@month  
 insert into @result values (12, '¬»«‰',@year+'/08/01',@year+'/08/31')  
-- set @i=@i+1  
  
-- if @i<=@month  
 insert into @result values (13, '¬–—',@year+'/09/01',@year+'/09/31')  
-- set @i=@i+1  
  
-- if @i<=@month  
 insert into @result values (14, 'œÌ',@year+'/10/01',@year+'/10/31')  
-- set @i=@i+1  
  
-- if @i<=@month  
 insert into @result values (15, '»Â„‰',@year+'/11/01',@year+'/11/31')  

---/*RAnjbar*/
-- set @i=@i+1  
-- if @i<=@month  
 insert into @result values (16, '«”›‰œ',@year+'/12/01',@year+'/12/29')  
---//
  
 insert into @result values (17, ' Â„Â „Ê«—œ ','1300/11/01',+'1399/12/30')  
return    
end  


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

------------------------------------------------------------------------------------------------------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Sp_DistinctDate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Sp_DistinctDate]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE [Sp_DistinctDate] @MyFarsiToday nvarchar(10)     
As    
  declare @today char(10) , @dw tinyint    
  /*Set @today = dbo.shamsi(getdate())   Ranjbar*/  
  Set @today = @MyFarsiToday  
  /*Set @dw = datepart(dw , getdate()) --weekday   
  Select * from HistoryDateList(@Today ,@dw)  Ranjbar*/    
  Select * from HistoryDateList(@Today ,7)
  Order by ID 

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

------------------------------------------------------------------------------------------------------------------------------------------------------
/*Ranjbar «„ﬂ«‰ Õ–› “Ê‰ﬂ‰*/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[delete_ArchiveFolder]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[delete_ArchiveFolder]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE Delete_ArchiveFolder(@FolderID [int])  
AS 

/*Ranjbar*/
DELETE UserAccArchive  
WHERE( ArchiveFolderID = @FolderID)  
---
 
delete LetterArchiveFolder 
where ArchiveFolderID = @FolderID  

DELETE ArchiveFolder  
WHERE( FolderID = @FolderID)  


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

------------------------------------------------------------------------------------------------------------------------------------------------------
[Num]=10
-----------

/*Ranjbar      LetterFieldValue  «„ﬂ«‰ Ê«—œ ﬂ—œ‰ ¬ÌœÌ ﬂ«—»— œ— ÃœÊ·  */
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Make_FieldValues_by_LetterID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Make_FieldValues_by_LetterID]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


CREATE procedure Make_FieldValues_By_LetterID
@LetterID int,@FormOrder tinyint
as

declare @tableID int, @tableID2 int,@TableID0 int,@userid int /*Ranjbar*/ 
 
select @TableID=UserTableID,@tableID2=UsertableID2,@userid=userid/*Ranjbar*/ 
from letter
where letterid=@LetterID
 
if @tableID is not null or @tableID2 is not null
begin

delete LetterFieldValue
from LetterFieldValue
inner join  Fields on Fields.id=LetterFieldValue.fieldid
where Letterid =@letterid and  
(
(tableid<>@TableID and formorder=1) or 
(tableid<>@TableID2 and formorder=2)
)

if @FormOrder=1 
set @TableID0=@tableID
else
set @TableID0=@tableID2 

insert into  LetterFieldValue(letterid,FieldID,formOrder,insertuserid/*Ranjbar*/)
 select @letterID,ID, @FormOrder,@userid/*Ranjbar*/
 from Fields
 where tableid=@TableID0 and
 id not in (select FieldID from LetterFieldValue where Letterid=@LetterID and formOrder=@formOrder)

INSERT INTO FieldAccess ([FieldID] ,[UserID] ,[AccessTypeID])
SELECT fields.id,users.id,3
FROM Fields,Users
where tableid=@TableID0
and str(fields.id)+'m'+str(users.id) not in 
(select str(fieldid)+'m'+str(userid) from FieldAccess)
 
end


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


------------------------------------------------------------------------------------------------------------------------------------------------------
/*Ranjbar   «’·«Õ  «—ÌŒ «‘ »«Â Ê«—œ ‘œÂ */

Update Letter 
Set RegistrationDate = '1388/05/31'
Where (RTrim(RegistrationDate)='1388/05/00')
GO
Update Letter 
Set IncommingDate = '1388/05/31'
Where (RTrim(IncommingDate)='1388/05/00')
GO
------------------------------------------------------------------------------------------------------------------------------------------------------
/*Ranjbar  Letter «“ ÃœÊ· ToOrgID «„ﬂ«‰ ﬁ—«— œ«œ‰ „ﬁœ«— ’›— œ— ›Ì·œ  */

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.Letter
	DROP CONSTRAINT FK_Letter_FromOrganizations1
GO
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.Letter WITH NOCHECK ADD CONSTRAINT
	FK_Letter_FromOrganizations1 FOREIGN KEY
	(
	ToOrgID
	) REFERENCES dbo.FromOrganizations
	(
	ID
	)
GO
ALTER TABLE dbo.Letter
	NOCHECK CONSTRAINT FK_Letter_FromOrganizations1
GO
COMMIT
GO
------------------------------------------------------------------------------------------------------------------------------------------------------
[Num]=11
-----------
Delete from UserAccArchive
GO
Insert Into UserAccArchive(SecID,UserID,ArchiveCenterID,ArchiveFolderID,IsAccess)
Select Sec.SecID , U.ID , Ac.ArchiveCenterID , AF.FolderID , 1 
from UserSecretariats Us , Users U , Secretariats Sec , ArchiveCenter Ac , ArchiveFolder AF
Where US.UserID = U.ID
  And US.SecID = Sec.SecID
  And Sec.ArchiveCenterID = Ac.ArchiveCenterID
  And (Ac.ArchiveCenterID * 10000) = (AF.UserID)
GO
------------------------------------------------------------------------------------------------------------------------------------------------------
[Num]=12
-----------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Tr_Ins_ArchiveFolder]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[Tr_Ins_ArchiveFolder]
GO

CREATE Trigger Tr_Ins_ArchiveFolder 
on ArchiveFolder
After Insert 
As
Declare @ArchiveFolderID int  
Declare @ArchiveCenterID int
Select Top 1 @ArchiveFolderID = Inserted.FolderID , @ArchiveCenterID = Inserted.UserID/10000 
From Inserted , ArchiveFolder Where Inserted.FolderID = ArchiveFolder.FolderID

Delete from UserAccArchive Where ArchiveFolderID = @ArchiveFolderID And ArchiveCenterID = @ArchiveCenterID

Insert into UserAccArchive(SecID,UserID,ArchiveCenterID,ArchiveFolderID,ISAccess)
Select US.SecID , US.UserID , AC.ArchiveCenterID , @ArchiveFolderID , 1
from UserSecretariats US , Secretariats S , ArchiveCenter Ac , Users U
Where US.SecID = S.SecID
  And S.ArchiveCenterID = Ac.ArchiveCenterID
  And US.UserID = U.ID 
  And Ac.ArchiveCenterID = ( @ArchiveCenterID)
Order By US.SecID , AC.ArchiveCenterID , US.UserID 

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


------------------------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.Letter
	DROP CONSTRAINT FK_Letter_FromOrganizations
GO
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.Letter WITH NOCHECK ADD CONSTRAINT
	FK_Letter_FromOrganizations FOREIGN KEY
	(
	FromOrgID
	) REFERENCES dbo.FromOrganizations
	(
	ID
	)
GO
ALTER TABLE dbo.Letter
	NOCHECK CONSTRAINT FK_Letter_FromOrganizations
GO
COMMIT
GO
------------------------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.ArchiveFolder
	DROP CONSTRAINT FK_ArchiveFolder_Users
GO
COMMIT
BEGIN TRANSACTION
ALTER TABLE dbo.ArchiveFolder WITH NOCHECK ADD CONSTRAINT
	FK_ArchiveFolder_Users FOREIGN KEY
	(
	UserID
	) REFERENCES dbo.Users
	(
	Id
	)
GO
ALTER TABLE dbo.ArchiveFolder
	NOCHECK CONSTRAINT FK_ArchiveFolder_Users
GO
COMMIT
GO
------------------------------------------------------------------------------------------------------------------------------------------------------
